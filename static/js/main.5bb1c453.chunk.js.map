{"version":3,"sources":["components/private-route/PrivateRoute.js","utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/dataReducers.js","reducers/index.js","store.js","actions/dataActions.js","components/TabBuilder/TabBuilder.jsx","components/items/Slider/SliderTab.jsx","components/items/StaticText/StaticText.js","components/items/NormalCurve/NormalCurve.jsx","components/items/NormalCurve/NormalCurveResearch.jsx","components/items/Threshold/Histogram.js","components/items/Threshold/HistogramResearch.jsx","components/TabList/TabList.jsx","components/layout/NavBar.js","components/layout/Landing.js","components/layout/HomePage.js","components/auth/Register.js","components/auth/Login.js","components/dashboard/Dashboard.js","components/Study/ConfigStudy.js","components/Study/ExptConfigs.js","components/Study/PartStudyData.js","components/Study/PartExptData.js","App.js","serviceWorker.js","index.js","components/items/NormalCurve/sameSquare.png","components/items/NormalCurve/rlyDiff.png","components/items/NormalCurve/bigSmall.png"],"names":["connect","state","auth","Component","component","rest","render","props","isAuthenticated","to","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","user","loading","studyName","dbInfo","studyInfo","colData","colsData","colNames","fileName","combineReducers","action","errors","dataFlow","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","getStudyInfo","which_database","which_study","get","then","res","data","experiments","getColData","col_name","getColNames","TabBuilder","selectRef","React","createRef","importQRef","username","this","qType","allGroups","qSelectedToExptname","length","allExpts","renderOption","item","value","map","qKeys","Object","keys","filter","k","charAt","qArr","forEach","question","csvColName","mapQTypetoQKey","push","q","exptName","qOptions","label","className","name","id","ref","onClick","build","current","importQuestion","SliderTab","sliderRef","outputRef","qRef","minRef","maxRef","min","max","keyRef","checked","minVal","Number","maxVal","handleChange","bind","onChange","appendToKeysArr","delete","count","getCount","e","setState","target","imported","defaultQ","defaultMin","defaultMax","objType","nameType","qNum","onInput","defaultValue","StaticText","qToDisplay","editing","cols","rows","NormalCurve","rectRef","svgRef","areaRef","lengthRef","startPos1Ref","startPos2Ref","graph1keyRef","graph2keyRef","colNumValRef","radiusRef","ticksRef","checkBoxRef","toggleTriRef1","toggleTriRef2","questionKeyRef","legendKey1Ref","legendKey2Ref","color1Ref","color2Ref","arg0ref","arg1ref","arg2ref","arg3ref","arg4ref","arg5ref","arg6ref","dotReturn","curveArea","triMouseDown","triDrag","triUp","lengthSubmit","alterStartPos1","alterStartPos2","svgColReturn","establishStateData","updateRadius","updateTicks","checkChange","toggleTri1","toggleTri2","returnTri1","returnTri2","changeColor1","changeColor2","changeJSON","onUpdateShapes","onFinishShapes","edgeLim","unitHeight","circRad","len1","len2","distancing","height","Math","ceil","colNumInit","internalLength","edgeCol","edgeLength","ceilDist","axisStart","axisStartCol","axisWidth","axisEndCol","axisEnd","triCent1","triCent2","triCentCol1","triCentCol2","variance1","abs","variance2","startPos1","distancing1","col11","col12","variance","endCol","colNumVal","tickNum","tickDist","rangeVal","startPos2","distancing2","col21","col22","fixCurve1","fixCurve2","axisLength","parseInt","color1","color2","maxLength","jsonData","x","y","isDown","rectX","down","svgWidth","svgHeight","svgX","colValHeiS","colValHeiS2","mousePointerRange","triDown","colLim1","round","colLim2","overlapVals","colNum","lowVal","showCoors","xPos","yPos","xPosOrig","CX","CY","stroke","fill","fillOpacity","strokeOpacity","cx","cy","r","points","onMouseDown","num","dragger","distFromCent","svg","pt","createSVGPoint","clientX","svgP","matrixTransform","getScreenCTM","inverse","preventDefault","col","colRelative","svgPre","ptPre","svgPPre","prevState","svgColPlacement","innerHTML","key","configuredShapes","newLength","newData","newPos","radius","newTickCount","colVal","Boolean","newColor","argArr","post","JSON","parse","replace","window","confirm","alert","defaultVal","defaultCurveVal","dataType","defaultArg","whichArg","configArgs","onMouseMove","onMouseUp","width","Array","row","dotReturn2","tick","textAnchor","class","style","backgroundColor","updateColVal","for","sameSquareData","rlyDiffData","bigSmallData","NormalCurveResearch","arg7ref","handleDrop","handleSelectedFile","processJSON","selectNC","dataReceived","fileNames","setFileNames","fileChosen","content","saveFile","acceptedFiles","console","log","file","dataFlowColData","itemType","includes","reader","FileReader","onabort","onerror","onload","fileText","result","files","readAsText","fileContent","currentTarget","unshift","src","sameSquare","alt","rlyDiff","bigSmall","Histogram","graphRef","sliderPos","drawChart","d3","append","attr","selectAll","enter","d","i","text","vertAlign","position","margin","top","step","HistogramResearch","histogramFiles","fileOptions","onDrop","accept","getRootProps","getInputProps","TabList","builderFunction","tabDefine","arr","children","tab","toString","curOutput","output","newCount","complete","deleted","expt","myRef","submitRef","nameRef","outputCreate","checkOutput","configDataToItem","match","params","location","newExpt","thisExpt","exptObj","find","questionKey","thisQKey","questionToDisplay","newDelete","newFile","concat","obj","int","elem","lowNum","isNaN","highNum","index","indexOf","exptItem","finalObj","sendFile","put","response","reload","catch","error","studyLink","method","opacity","history","dataFlowDBInfo","dataFlowFileName","Navbar","userIsLoggedIn","Landing","HomePage","href","Register","onSubmit","newUser","password","password2","registerUser","nextProps","noValidate","classnames","invalid","userExists","userData","err","withRouter","Login","loginUser","userNotFound","pwdIncorrect","setItem","jwt_decode","Dashboard","onLogoutClick","onAddStudy","onDeleteStudy","getDBInfo","link","addStudyName","getStudyNames","study_name","dataToPost","entry","ConfigStudy","deployed","deployExpts","changeState","onDeploy","onChecked","onDeleteExperiment","randomize","putRandomize","thisSudyDeployedExpt","split","database_name","nowState","dataToPut","processColNames","condition","surveyLink","exptDataLink","partExptDataLink","exptPartLink","previewLink","dbLink","exptBuilderLink","pathname","colName","conditionInfo","linkInfo","createExptCol","expt_name","exptNames","difference","color","padding","partStudyDataLink","getExpts","deploy","which_expt","saveAddInfo","infoType","info","ExptConfigs","JSONString","stringify","showExptData","PartStudyData","makeArr","showJSONData","getIndex","partColNames","getColsData","flattendObj","flattenObject","keyName","newKey","oldKey","substr","renameKey","ids","participantID","ele","prevData","doc","newEle","flattenObj","line","allIndex","str","element","document","createElement","Blob","URL","createObjectURL","download","body","appendChild","click","file_name","filename","PartExptData","jwtToken","currentTime","Date","now","exp","App","basename","NavBar","exact","path","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.5bb1c453.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * Set up private routes so that only logged in users can see configuration components\r\n * @param {[Object]} param0 [Object containing component, authorization, and else]\r\n */\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      auth.isAuthenticated === true ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )}\r\n  />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","// this will delete the Authorization header for axios requests \r\n// if the user is already logged in \r\n\r\nimport axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    } else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING\r\n} from \"./types\";\r\n\r\n/**\r\n * POST request to api to create a collection with user's login name\r\n * @param {[Object]} userData [json object contains username and password]\r\n * @param {[Object]} history [json object contains React history]\r\n */\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    // set up proxy in package.json later\r\n    .post(\"https://test-api-615.herokuapp.com/api/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n/**\r\n * POST request to api to grant jwtToken and login user\r\n * @param {[Object]} userData [json object contains username and password]\r\n */\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    // set up proxy in package.json later\r\n    .post(\"https://test-api-615.herokuapp.com/api/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n/**\r\n * Set logged in user\r\n * @param {[Boolean]} decoded [whether the user is logged in]\r\n */\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\n/**\r\n * Load user\r\n */\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n\r\n/**\r\n * Logout user\r\n */\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};","// reducers use types to put data into Redux store\r\n\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const ADD_STUDY_NAME = \"ADD_STUDY_NAME\";\r\nexport const GET_DB_INFO = \"GET_DB_INFO\";\r\nexport const GET_STUDY_INFO = \"GET_STUDY_INFO\";\r\nexport const GET_COL_DATA = \"GET_COL_DATA\";\r\nexport const GET_COLS_DATA = \"GET_COLS_DATA\";\r\nexport const GET_COL_NAMES = \"GET_COL_NAMES\";\r\n\r\nexport const STORE_FILENAME = \"STORE_FILENAME\";\r\nexport const DELETE_FILE = \"DELETE_FILE\";\r\nexport const SEND_FILE = \"SEND_FILE\";","import {\r\n    SET_CURRENT_USER,\r\n    USER_LOADING\r\n  } from \"../actions/types\";\r\n\r\nconst isEmpty = require(\"is-empty\"); \r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isEmpty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default: return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS: return action.payload;\r\n        default: return state;\r\n    }\r\n}","import {\r\n  ADD_STUDY_NAME,\r\n  GET_DB_INFO,\r\n  GET_STUDY_INFO,\r\n  GET_COL_DATA,\r\n  GET_COLS_DATA,\r\n  GET_COL_NAMES,\r\n  STORE_FILENAME\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  studyName: '',\r\n  dbInfo: [],\r\n  studyInfo: [],\r\n  colData: [],\r\n  colsData: [],\r\n  colNames: [],\r\n  // files: []\r\n  fileName: ''\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_STUDY_NAME:\r\n      return {\r\n        ...state,\r\n        studyName: action.payload\r\n      };\r\n    case GET_DB_INFO:\r\n      return {\r\n        ...state,\r\n        dbInfo: action.payload\r\n      };\r\n    case GET_STUDY_INFO:\r\n      return {\r\n        ...state,\r\n        studyInfo: action.payload\r\n      };\r\n    case GET_COL_DATA:\r\n      return {\r\n        ...state,\r\n        colData: action.payload\r\n      };\r\n    case GET_COLS_DATA:\r\n      return {\r\n        ...state,\r\n        colsData: [...state.colsData, action.payload]\r\n      };\r\n    case GET_COL_NAMES:\r\n      return {\r\n        ...state,\r\n        colNames: action.payload\r\n      };\r\n    case STORE_FILENAME:\r\n      return {\r\n        ...state,\r\n        fileName: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducers\";\r\nimport errorReducer from \"./errorReducers\";\r\nimport dataReducer from \"./dataReducers\";\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  errors: errorReducer,\r\n  dataFlow: dataReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\n// ****** IMPORTANT ******\r\n// uncomment the line including __REDUX_DEVTOOLS_EXTENSION__ when developing\r\n// comment the line including __REDUX_DEVTOOLS_EXTENSION__ before \r\n// deploying to gh pages \r\n// (the line tells the browser to require devtools, but users don't have devtools)\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n    // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;","import axios from \"axios\";\r\nimport {\r\n  ADD_STUDY_NAME,\r\n  GET_DB_INFO,\r\n  GET_STUDY_INFO,\r\n  GET_COL_DATA,\r\n  GET_COLS_DATA,\r\n  GET_COL_NAMES,\r\n  STORE_FILENAME\r\n} from \"./types\";\r\n\r\n/**\r\n * POST request to add a document containing study_name \r\n * @param {[String]} which_database [name of the database we are sending the document to]\r\n * @param {[String]} study_name [name of the study (user input)]\r\n */\r\nexport const addStudyName = (which_database, study_name) => dispatch => {\r\n  const dataToPost = {\r\n    studyName: study_name,\r\n    experiments: []\r\n  };\r\n  // We are adding the document to /info collection\r\n  axios\r\n    .post('https://test-api-615.herokuapp.com/api/feedback/' + which_database + '/info',\r\n      dataToPost)\r\n    .then(entry => {\r\n      // console.log(entry);\r\n      dispatch({\r\n        type: ADD_STUDY_NAME,\r\n        payload: entry.data.studyName\r\n      });\r\n      alert(\"Study [\" + study_name + \"] is created.\");\r\n      window.location.reload(true);\r\n    })\r\n}\r\n\r\n/**\r\n * Get all documents from the /info collection of which_database\r\n * @param {[String]} which_database [name of the database we want to query]\r\n */\r\nexport const getDBInfo = (which_database) => dispatch => {\r\n  axios\r\n    .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database + '/info')\r\n    .then(res => {\r\n      dispatch({\r\n        type: GET_DB_INFO,\r\n        payload: res.data\r\n      })\r\n    })\r\n}\r\n\r\n/**\r\n * Get all experiments associated with which_study\r\n * @param {[String]} which_database [name of the database we want to query]\r\n * @param {[String]} which_study [name of the study we want to query]\r\n */\r\nexport const getStudyInfo = (which_database, which_study) => dispatch => {\r\n  axios\r\n    .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database +\r\n      '/info/studyName-' + which_study)\r\n    .then(res => {\r\n      dispatch({\r\n        type: GET_STUDY_INFO,\r\n        // note we are grabbing the experiments object from res.data\r\n        payload: res.data.experiments\r\n      });\r\n    })\r\n}\r\n\r\n/**\r\n * PUT request to add additional information to a specific element of the \r\n * experiments array in a stufy document\r\n * @param {[String]} which_database [name of the database we want to query]\r\n * @param {[String]} study_name [name of the study we want to query]\r\n * @param {[String]} expt_name [experiment name]\r\n * @param {[String]} infoType [either 'link' or 'condition']\r\n * @param {[Object]} info [a JSON object in the format {infoType: \"some_data\"}]\r\n */\r\nexport const saveAddInfo = (which_database, study_name, expt_name, infoType, info) => dispatch => {\r\n  axios\r\n    .put('https://test-api-615.herokuapp.com/api/feedback/' + which_database + \r\n      '/info/studyName-' + study_name + '/experiments/exptName-' + expt_name + '/' + infoType,\r\n      info)\r\n    .then(res => {\r\n      // Note we don't need to save any data to Redux store\r\n      console.log(res.data);\r\n    })\r\n} \r\n\r\n/**\r\n * POST request to create a collection to store participant data for which_expt\r\n * @param {[String]} which_database [database name]\r\n * @param {[String]} col_name [name of the collection to be created]\r\n * @param {[String]} which_expt [name of the experiment to be deployed]\r\n */\r\nexport const createExptCol = (which_database, col_name, which_expt) => dispatch => {\r\n  axios\r\n    .post('https://test-api-615.herokuapp.com/api/' + which_database +\r\n      \"/createCol/\" + col_name)\r\n    .then(res => {\r\n      // we can potentially improve the alert box\r\n      alert(\"Experiment [\" + which_expt + \"] is deployed.\");\r\n      window.location.reload(true);\r\n    })\r\n}\r\n\r\n/**\r\n * Get participant data from col_name \r\n * @param {[String]} which_database [name of the database we want to query]\r\n * @param {[String]} col_name [name of the collection we want to query]\r\n */\r\nexport const getColData = (which_database, col_name) => dispatch => {\r\n  axios\r\n    .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database +\r\n      \"/\" + col_name)\r\n    .then(res => {\r\n      // set collection data in redux store\r\n      dispatch({\r\n        type: GET_COL_DATA,\r\n        payload: res.data\r\n      })\r\n    })\r\n}\r\n\r\n/**\r\n * Get participant data from col_name then append data to Redux store\r\n * ( Look at reducers to see the different between getColData and getColsData )\r\n * @param {[String]} which_database [database name]\r\n * @param {[String]} col_name [collection name]\r\n */\r\nexport const getColsData = (which_database, col_name) => dispatch => {\r\n  axios\r\n  .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database +\r\n    \"/\" + col_name)\r\n  .then(res => {\r\n    res.data.forEach(doc => {\r\n      // append collection data to redux store\r\n      dispatch({\r\n        type: GET_COLS_DATA,\r\n        payload: doc\r\n      })\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Get all collection names from which_database\r\n * @param {[String]} which_database [database name]\r\n */\r\nexport const getColNames = (which_database) => dispatch => {\r\n  axios\r\n    .get('https://test-api-615.herokuapp.com/api/' + which_database + \"/collections\")\r\n    .then(res => {\r\n      dispatch({\r\n        type: GET_COL_NAMES,\r\n        payload: res.data\r\n      })\r\n    })\r\n}\r\n\r\n// forgot if this function is useful\r\n// export const storeFileName = (fileName) => dispatch => {\r\n//   dispatch({\r\n//     type: STORE_FILENAME,\r\n//     payload: fileName\r\n//   })\r\n// }\r\n\r\n/**\r\n * DEPRECATED method: POST request to send user uploaded data to database\r\n * under the \"itemData\" collection\r\n * @param {[String]} which_database [database name]\r\n * @param {[Object]} file [a json object containing experiment item config data]\r\n */\r\nexport const sendFile = (which_database, file) => dispatch => {\r\n  axios\r\n    .post('https://test-api-615.herokuapp.com/api/feedback/' + which_database + \r\n      \"/itemData\", file)\r\n    .then(res => {\r\n      console.log(\"Data sent to DB\");\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n  getStudyInfo\r\n} from \"../../actions/dataActions\"\r\n\r\nclass TabBuilder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.selectRef = React.createRef();\r\n    this.importQRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // username and studyName are passed from TabList.jsx\r\n    const username = this.props.username;\r\n    const studyName = this.props.studyName;\r\n    this.props.getStudyInfo(username, studyName);\r\n  }\r\n\r\n  // ###TODO###: add more switch statements here when adding a new component\r\n  // ###TODO###: the switch statement is not super necessary, pls improve\r\n  /**\r\n   * Convert question type to its key in json\r\n   * @param {[String]} qType [question type]\r\n   */\r\n  mapQTypetoQKey(qType) {\r\n    switch(qType) {\r\n      case \"slider\":\r\n        return \"slider-question-key\"\r\n      case \"static-text\":\r\n        return \"static-text-key\"\r\n      case \"normal-curve\":\r\n        return \"normal-curve-question-key\"\r\n      case \"threshold\":\r\n        return \"threshold-key\"\r\n      default:\r\n        return \"\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var allGroups;\r\n    // this object contains the mapping from questions to their experiment\r\n    var qSelectedToExptname = {};\r\n    // the following block of code generates the content of a dropdown menu\r\n    // for researchers to select which question them want to import \r\n    if (!this.props.experiments.length == 0) {\r\n      const allExpts = this.props.experiments;\r\n      const renderOption = item => <option value={item}>{item}</option>\r\n      // per experiment\r\n      // input: item represents a JSON object containing the configuration data\r\n      //        of a specific experiment \r\n      const renderGroup = item => {\r\n        const qKeys = Object.keys(item).filter(\r\n          k => k.charAt(0) == \"q\");\r\n        // qArr contains all csvColNames of all questions in an experiment\r\n        var qArr = [];\r\n        qKeys.forEach(k => {\r\n          const question = item[k]; \r\n          const qKey = this.mapQTypetoQKey(question[\"Type\"]);\r\n          const csvColName = question[qKey];\r\n          qArr.push(csvColName);\r\n        })\r\n        qArr.map(q => qSelectedToExptname[q] = item.exptName);\r\n        const qOptions = qArr.map(renderOption);\r\n        return (\r\n          <optgroup label={item.exptName}>\r\n            {qOptions}\r\n          </optgroup>\r\n        )\r\n      }\r\n      allGroups = allExpts.map(renderGroup);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <div className=\"boxed\"> \r\n          <span>Choose what element to add next</span><br />\r\n          <select name=\"tabType\" id=\"tabType\" ref={this.selectRef}>\r\n            {/* <option value=\"slider\">Slider</option> */}\r\n            <option value=\"static-text\">Static Text</option>\r\n            <option value=\"normal-curve\">Normal Curve</option>\r\n            <option value=\"threshold\">Threshold</option>\r\n          </select>\r\n          <button onClick={() => this.props.build(this.selectRef.current.value)}>+</button>\r\n          <br/><br/>\r\n          OR\r\n          <br/><br/>\r\n          {\r\n            this.props.experiments.length == 0 \r\n            ? \r\n            <div>\r\n              Cannot import question from another experiment because there are no \r\n              experiments in this study yet.\r\n            </div>\r\n            :\r\n            <div>\r\n              <span>Import a question from another experiment in this study</span><br/>\r\n              <select name=\"importQue\" id=\"importQue\" ref={this.importQRef}>\r\n                {allGroups}\r\n              </select>\r\n              <button onClick={() => \r\n                // importQuestion lives in TabList.jsx\r\n                this.props.importQuestion(\r\n                  qSelectedToExptname[this.importQRef.current.value], \r\n                  this.importQRef.current.value)}>\r\n                +\r\n              </button>\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    ) \r\n  }\r\n}\r\n\r\nTabBuilder.propTypes = {\r\n  getStudyInfo: PropTypes.func.isRequired,\r\n  experiments: PropTypes.array.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  experiments: state.dataFlow.studyInfo\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getStudyInfo }\r\n)(TabBuilder);","import React, { Component } from 'react';\r\nimport './SliderTab.css';\r\n\r\nclass SliderTab extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sliderRef = React.createRef();\r\n    this.outputRef = React.createRef();\r\n    this.qRef = React.createRef();\r\n    this.minRef = React.createRef();\r\n    this.maxRef = React.createRef();\r\n    this.state = { min: 1, max: 100 }\r\n    this.keyRef = React.createRef();\r\n\r\n    // console.log(this.props);\r\n\r\n    this.state = {\r\n      checked: false,\r\n      minVal: Number,\r\n      maxVal: Number\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.appendToKeysArr = this.appendToKeysArr.bind(this);\r\n  }\r\n\r\n  delete() {\r\n    this.props.delete(this.props.count);\r\n  }\r\n\r\n  getCount() {\r\n    this.props.getCount(this.props.count);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleChange(type, q, count) {\r\n    this.props.handleChange(type, q, count);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.imported) {\r\n      this.handleChange(\"Question\", this.props.defaultQ, this.props.count);\r\n      this.handleChange(\"lowRange\", this.props.defaultMin, this.props.count);\r\n      this.handleChange(\"highRange\", this.props.defaultMax, this.props.count);\r\n    }\r\n  }\r\n\r\n  appendToKeysArr(objType, nameType, csvColName, count) {\r\n    this.props.appendToKeysArr(objType, nameType, csvColName, count);\r\n  }\r\n\r\n  render() {\r\n    const qNum = this.props.count + 1;\r\n    return (\r\n      <form className=\"unit\">\r\n        <br/>\r\n        Question #{qNum} \r\n        <br/><br/>\r\n        <p>Enter your question below:\r\n        <br/>\r\n        <input onInput={() => this.handleChange(\"Question\", this.qRef.current.value, this.props.count)} \r\n          ref={this.qRef} type=\"text\" defaultValue={this.props.defaultQ}/></p><br/>\r\n        {/* { this.qRef.current.value == null ? this.props.min : this.qRef.current.value } */}\r\n        <input type=\"range\" min=\"1\" max=\"100\" defaultValue=\"50\" className=\"slider\" name=\"myRange\" id=\"myRange\" ref={this.sliderRef} />\r\n        {this.state.maxVal} <br/>\r\n        <p>Minimum: \r\n          <input onInput={() => this.handleChange(\"lowRange\", this.minRef.current.value, this.props.count)} \r\n          ref={this.minRef} type=\"text\" \r\n          defaultValue={this.props.defaultMin}\r\n          // name=\"minVal\" value={this.state.minVal} onChange={this.onChange}\r\n          /></p><br/>\r\n        {/* <p>Value: <span id=\"slider1\" ref={this.outputRef}></span></p> */}\r\n        <p>Maximum: <input onInput={() => this.handleChange(\"highRange\", this.maxRef.current.value, this.props.count)} \r\n          ref={this.maxRef} type=\"text\" \r\n          defaultValue={this.props.defaultMax}\r\n          // name=\"maxVal\" value={this.state.maxVal} onChange={this.onChange}\r\n          /></p>\r\n        <br/><br/>\r\n        What csv column name do you want to assign to this question? <br/>\r\n        <b>Please use letters only, and the name must be unique.</b> <br/>\r\n        Recommedation: include your experiment name, this question number \r\n        ({qNum}), and the question type (slider)\r\n        <br/>\r\n        <input type=\"text\" ref={this.keyRef} \r\n          onInput={() => {\r\n            // this.appendToKeysArr(\r\n            //   \"csvColNames\", \r\n            //   \"slider-question-key\", \r\n            //   this.keyRef.current.value, \r\n            //   this.props.count);\r\n            this.handleChange(\"slider-question-key\", this.keyRef.current.value, this.props.count)\r\n            // this.appendToKeysArr(\r\n            //   \"keyValuePairs\",\r\n              \r\n            // )\r\n          }}/>\r\n        <br/><br/>\r\n        <button onClick={this.delete.bind(this)}>Delete</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SliderTab;","import React, { Component } from 'react';\r\n\r\nclass StaticText extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.qRef = React.createRef();\r\n    this.keyRef = React.createRef();\r\n\r\n    this.state = {\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  delete() {\r\n    this.props.delete(this.props.count);\r\n  }\r\n\r\n  getCount() {\r\n    this.props.getCount(this.props.count);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleChange(type, q, count) {\r\n    this.props.handleChange(type, q, count);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // NOTE: import includes both \"import question from another experiment\" and\r\n    //       \"Edit experiment\"\r\n    if (this.props.imported) {\r\n      // we only want to show the actual content because the question is imported \r\n      // (researchers may want to use different csv column names)\r\n      this.handleChange(\"Static Text\", this.props.qToDisplay[\"Static Text\"], this.props.count);\r\n    }; \r\n    if (this.props.editing) {\r\n      // we want to show previous csv column names because researchers want to make edits\r\n      this.handleChange(\"static-text-key\", this.props.qToDisplay[\"static-text-key\"], this.props.count);\r\n    }; \r\n  }\r\n\r\n  render() {\r\n    const qNum = this.props.count + 1;\r\n    return (\r\n      <form className=\"unit\">\r\n        <br/>\r\n        Question #{qNum} \r\n        <br/>\r\n        Enter your static text below: <br/>\r\n        {\r\n          this.props.imported\r\n          ?\r\n          <textarea cols=\"60\" rows=\"10\" ref={this.qRef} \r\n          defaultValue={this.props.qToDisplay[\"Static Text\"]}\r\n          onInput={() => this.handleChange(\"Static Text\", this.qRef.current.value, this.props.count)}>\r\n          </textarea>\r\n          :\r\n          <textarea cols=\"60\" rows=\"10\" ref={this.qRef} \r\n          onInput={() => this.handleChange(\"Static Text\", this.qRef.current.value, this.props.count)}>\r\n          </textarea>\r\n        }\r\n        <br/><br/>\r\n        What csv column name do you want to assign to this question? <br/>\r\n        <b>Please use letters only, the name must be unique, leave no space between letters.</b> <br/>\r\n        Recommedation: include your experiment name, this question number \r\n        ({qNum}), and the question type (staticText)\r\n        <br/>\r\n        {\r\n          this.props.editing \r\n          ? \r\n          <input type=\"text\" ref={this.keyRef} \r\n          defaultValue={this.props.qToDisplay[\"static-text-key\"]}\r\n          onInput={() => this.handleChange(\"static-text-key\", this.keyRef.current.value, this.props.count)}/>\r\n          :\r\n          <input type=\"text\" ref={this.keyRef} \r\n          onInput={() => this.handleChange(\"static-text-key\", this.keyRef.current.value, this.props.count)}/>\r\n        }\r\n        <br/><br/>\r\n        <button onClick={this.delete.bind(this)}>Delete</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StaticText;","import React, { Component } from 'react';\r\nimport './NormalCurve.css';\r\nimport axios from 'axios';\r\nimport { json } from 'd3';\r\n\r\nclass NormalCurve extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.sliderRef = React.createRef();\r\n    this.rectRef = React.createRef();\r\n    this.svgRef = React.createRef();\r\n    this.areaRef = React.createRef();\r\n    this.lengthRef = React.createRef();\r\n    this.startPos1Ref = React.createRef();\r\n    this.startPos2Ref = React.createRef();\r\n    this.graph1keyRef = React.createRef();\r\n    this.graph2keyRef = React.createRef();\r\n    this.qRef = React.createRef();\r\n    this.colNumValRef = React.createRef();\r\n    this.radiusRef = React.createRef();\r\n    this.ticksRef = React.createRef();\r\n    this.checkBoxRef = React.createRef();\r\n    this.toggleTriRef1 = React.createRef();\r\n    this.toggleTriRef2 = React.createRef();\r\n    this.questionKeyRef = React.createRef();\r\n    this.legendKey1Ref = React.createRef();\r\n    this.legendKey2Ref = React.createRef();\r\n    this.color1Ref = React.createRef();\r\n    this.color2Ref = React.createRef();\r\n\r\n    this.arg0ref = React.createRef();\r\n    this.arg1ref = React.createRef();\r\n    this.arg2ref = React.createRef();\r\n    this.arg3ref = React.createRef();\r\n    this.arg4ref = React.createRef();\r\n    this.arg5ref = React.createRef();\r\n    this.arg6ref = React.createRef();\r\n\r\n    this.dotReturn = this.dotReturn.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n    this.triMouseDown = this.triMouseDown.bind(this);\r\n    this.triDrag = this.triDrag.bind(this);\r\n    this.triUp = this.triUp.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n    this.lengthSubmit = this.lengthSubmit.bind(this);\r\n    // this.toggleXVals = this.toggleXVals.bind(this);\r\n    this.alterStartPos1 = this.alterStartPos1.bind(this);\r\n    this.alterStartPos2 = this.alterStartPos2.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.svgColReturn = this.svgColReturn.bind(this);\r\n    this.svgColReturn = this.svgColReturn.bind(this);\r\n    this.establishStateData = this.establishStateData.bind(this);\r\n    this.updateRadius = this.updateRadius.bind(this);\r\n    this.updateTicks = this.updateTicks.bind(this);\r\n    this.checkChange = this.checkChange.bind(this);\r\n    this.toggleTri1 = this.toggleTri1.bind(this);\r\n    this.toggleTri2 = this.toggleTri2.bind(this);\r\n    this.returnTri1 = this.returnTri1.bind(this);\r\n    this.returnTri2 = this.returnTri2.bind(this);\r\n    this.changeColor1 = this.changeColor1.bind(this);\r\n    this.changeColor2 = this.changeColor2.bind(this);\r\n    this.changeJSON = this.changeJSON.bind(this);\r\n    this.onUpdateShapes = this.onUpdateShapes.bind(this);\r\n    this.onFinishShapes = this.onFinishShapes.bind(this);\r\n\r\n    this.state = this.establishStateData(this.props.data);\r\n  }\r\n\r\n  /**\r\n   * Sets the shared area upon loading\r\n   * @param\r\n   * @return\r\n   */\r\n  componentDidMount() {\r\n    this.curveArea();\r\n  }\r\n\r\n  /**\r\n   * Creates data for state upon loading the element\r\n   * @param  {[Object]} data [JSON file data for element]\r\n   * @return {[type]}     [JSON data for setting state]\r\n   */\r\n  establishStateData(data) {\r\n    // console.log(\"establishStateData()\", new Date());\r\n    const unitHeight = data[\"max-height\"];\r\n    const circRad = data[\"circle-radius\"];\r\n    const len1 = data[\"len1\"];\r\n    const len2 = data[\"len2\"];\r\n    const distancing = circRad * 4 - 1;\r\n    const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\r\n\r\n    const colNumInit = data[\"axis-length\"];\r\n    const internalLength = colNumInit * distancing;\r\n    const edgeCol = Math.ceil(Math.max(len1, len2) / 2);\r\n    const edgeLength = Math.max(len1, len2) * distancing;\r\n\r\n    const ceilDist = height - 50;\r\n    const length = edgeLength + internalLength;\r\n    const colNum = Math.ceil(length / distancing);\r\n\r\n    const axisStart = Math.ceil(edgeLength / 2);\r\n    const axisStartCol = edgeCol;\r\n    const axisWidth = length - ((len1 / 2 + 1) * distancing + (len2 / 2 + 1) * distancing - 1);\r\n    const axisEndCol = internalLength / distancing;\r\n    const axisEnd = axisEndCol * distancing;\r\n\r\n    const triCent1 = Math.ceil(0.5 * len1) * distancing;\r\n    const triCent2 = Math.ceil(0.5 * len2) * distancing;\r\n    const triCentCol1 = Math.ceil(triCent1 / distancing);\r\n    const triCentCol2 = Math.ceil(triCent2 / distancing);\r\n\r\n    const variance1 = Math.abs(Math.ceil(len1 / 2) - axisStartCol);\r\n    const variance2 = Math.abs(Math.ceil(len2 / 2) - axisStartCol);\r\n\r\n    let edgeLim;\r\n    if (\"edgeLim\" in data) {\r\n      edgeLim = data[\"edgeLim\"];\r\n    }\r\n    else {\r\n      edgeLim = false;\r\n    }\r\n\r\n    const startPos1 = data[\"startPos1\"];\r\n    let distancing1 = startPos1 + variance1 - 1;\r\n    let col11 = startPos1 + variance1;\r\n    let col12 = startPos1 + len1 - 1;\r\n    let col11Rel = startPos1;\r\n\r\n    let variance = axisStartCol - variance1;\r\n    if (edgeLim) {\r\n      if (col11 < axisStartCol - 1) {\r\n        distancing1 = (axisStartCol - 1) * distancing;\r\n        col11 = 0;\r\n        col12 = len1 - 1;\r\n      }\r\n      else if (col11 + len1 + 1 > axisStartCol + axisEndCol) {\r\n        const endCol = axisEndCol - len1;\r\n        distancing1 = distancing * (axisStartCol + endCol - 1);\r\n        col11 = endCol;\r\n        col12 = endCol + len2 - 1;\r\n      }\r\n      else {\r\n        distancing1 = distancing * col11;\r\n        col11 = col11Rel - variance;\r\n        col12 = col11Rel - variance + len1 - 1;\r\n      }\r\n    }\r\n    else {\r\n      // col11 = col11 - 1;\r\n      if (col11 + triCentCol1 < axisStartCol) {\r\n        distancing1 = (variance1) * distancing;\r\n        col11 = 0;\r\n        col12 = len1 - 1;\r\n      }\r\n      else if (col11 + triCentCol1 > axisStartCol + axisEndCol) {\r\n        distancing1 = distancing * (variance1 + axisEndCol);\r\n        col11 = axisEndCol;\r\n        col12 = axisEndCol + len1 - 1;\r\n      }\r\n      else {\r\n        distancing1 = distancing * (col11);\r\n        col11 = col11Rel;\r\n        col12 = col11Rel + len1 - 1;\r\n      }\r\n    }\r\n\r\n    const startPos2 = data[\"startPos2\"];\r\n    let distancing2 = startPos2 + variance2 - 1;\r\n    let col21 = startPos2 + variance2;\r\n    let col22 = startPos2 + len2 - 1;\r\n    let col21Rel = startPos2;\r\n\r\n    variance = axisStartCol - variance2;\r\n    if (edgeLim) {\r\n      if (col21 < axisStartCol - 1) {\r\n        distancing2 = (axisStartCol - 1) * distancing;\r\n        col21 = 0;\r\n        col22 = len2 - 1;\r\n      }\r\n      else if (col21 + len2 + 1 > axisStartCol + axisEndCol) {\r\n        const endCol = axisEndCol - len2;\r\n        distancing2 = distancing * (axisStartCol + endCol);\r\n        col21 = endCol;\r\n        col22 = endCol + len2 - 1;\r\n      }\r\n      else {\r\n        distancing2 = distancing * col21;\r\n        col21 = col21Rel - variance;\r\n        col22 = col21Rel - variance + len2 - 1;\r\n      }\r\n    }\r\n    else {\r\n      // col21 = col21 - 1;\r\n      if (col21 + triCentCol2 < axisStartCol) {\r\n        distancing2 = (variance2) * distancing;\r\n        col21 = 0;\r\n        col22 = len2 - 1;\r\n      }\r\n      else if (col21 + triCentCol2 > axisStartCol + axisEndCol) {\r\n        distancing2 = distancing * (variance2 + axisEndCol - 1);\r\n        col21 = axisEndCol;\r\n        col22 = axisEndCol + len2 - 1;\r\n      }\r\n      else {\r\n        distancing2 = distancing * (col21);\r\n        col21 = col21Rel;\r\n        col22 = col21Rel + len2 - 1;\r\n      }\r\n    }\r\n\r\n    let colNumVal;\r\n    if (\"colNumVal\" in data) {\r\n      colNumVal = this.props.data[\"colNumVal\"];\r\n    }\r\n    else {\r\n      colNumVal = 1;\r\n    }\r\n\r\n    let tickNum;\r\n    let tickDist;\r\n    let rangeVal;\r\n    const axisLength = colNumInit * colNumVal;\r\n    if (\"tickNum\" in data && axisLength % (parseInt(data[\"tickNum\"]) + 1) === 0) {\r\n      tickNum = parseInt(data[\"tickNum\"]);\r\n      tickDist = colNumInit * distancing / (tickNum + 1);\r\n      rangeVal = axisLength / (tickNum + 1);\r\n    }\r\n    else {\r\n      tickNum = 0;\r\n      tickDist = axisLength;\r\n      rangeVal = axisLength;\r\n    }\r\n\r\n    let fixCurve1;\r\n    if (\"fixCurve1\" in data) {\r\n      fixCurve1 = data[\"fixCurve1\"];\r\n    }\r\n    else {\r\n      fixCurve1 = false;\r\n    }\r\n\r\n    let fixCurve2;\r\n    if (\"fixCurve2\" in data) {\r\n      fixCurve2 = data[\"fixCurve2\"];\r\n    }\r\n    else {\r\n      fixCurve2 = false;\r\n    }\r\n\r\n    let maxLength = len1;\r\n    if (len2 > len1) {\r\n      maxLength = len2;\r\n    }\r\n\r\n    let color1;\r\n    if (\"color1\" in data) {\r\n      color1 = data[\"color1\"];\r\n    }\r\n    else {\r\n      color1 = \"CornflowerBlue\";\r\n    }\r\n\r\n    let color2;\r\n    if (\"color2\" in data) {\r\n      color2 = data[\"color2\"];\r\n    }\r\n    else {\r\n      color2 = \"Crimson\";\r\n    }\r\n\r\n    return {\r\n      jsonData: data,\r\n      axisLength: data[\"axis-length\"],\r\n      startPos1: data[\"startPos1\"],\r\n      startPos2: data[\"startPos2\"],\r\n      x: 0, y: 0, isDown: false,\r\n      rectX: 12.5,\r\n      down: false,\r\n      svgWidth: length,\r\n      svgHeight: height,\r\n      svgX: 6,\r\n      len1: len1,\r\n      colValHeiS: data[\"colValHeiS\"],\r\n      len2: len2,\r\n      colValHeiS2: data[\"colValHeiS2\"],\r\n      distancing: distancing,\r\n      distancing1 : distancing1,\r\n      distancing2: distancing2,\r\n      triCent1: triCentCol1 * distancing,\r\n      triCentCol1: triCentCol1,\r\n      triCent2: triCentCol2 * distancing,\r\n      triCentCol2: triCentCol2,\r\n      mousePointerRange: 0,\r\n      triDown: false,\r\n      col11: col11,\r\n      col12: col12,\r\n      col21: col21,\r\n      col22: col22,\r\n      colLim1: Math.round((length - (len1 * distancing)) / distancing),\r\n      colLim2: Math.round((length - (len2 * distancing)) / distancing),\r\n      overlapVals: data[\"overlapVals\"],\r\n      circRad: circRad,\r\n      ceilDist: ceilDist,\r\n      axisStart: axisStart,\r\n      axisStartCol: axisStartCol,\r\n      axisWidth: axisWidth,\r\n      axisEnd: axisEnd,\r\n      axisEndCol: axisEndCol,\r\n      edgeCol: edgeCol,\r\n      edgeLength: edgeLength,\r\n      colNum: colNumInit,\r\n      variance1: variance1,\r\n      variance2: variance2,\r\n      lowVal: this.props.data[\"lowVal\"],\r\n      showCoors: true,\r\n      colNumVal: colNumVal,\r\n      tickNum: tickNum,\r\n      tickDist: tickDist,\r\n      rangeVal: rangeVal,\r\n      edgeLim: edgeLim,\r\n      fixCurve1: fixCurve1,\r\n      fixCurve2: fixCurve2,\r\n      maxLength: maxLength,\r\n      color1: color1,\r\n      color2: color2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the <circle> for a given point on the first curve\r\n   * @param  {[Number]} xPos [X coordinate of circle]\r\n   * @param  {[Number]} yPos [Y coordinate of circle]\r\n   * @return {[JSX Object]}  [SVG Circle element]\r\n   */\r\n  dotReturn(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n\r\n    const CX = this.state.distancing1 + this.state.distancing * (xPosOrig + 1) + this.state.circRad - this.state.maxLength + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n\r\n    var hard = \r\n    <circle \r\n    // onMouseEnter={e => this.displayTag1(e)}\r\n    // onMouseLeave={e => this.hideTag1(e)}\r\n    // onMouseMove={e => this.updateTag1(e)} \r\n    className=\"icon\" \r\n    stroke={this.state.color1} \r\n    fill={this.state.color1}\r\n    fillOpacity=\"0.3\" \r\n    strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}>\r\n    </circle>;\r\n\r\n    return hard;\r\n  }\r\n\r\n  /**\r\n   * Returns the <circle> for a given point on the second curve\r\n   * @param  {[Number]} xPos [X coordinate of circle]\r\n   * @param  {[Number]} yPos [Y coordinate of circle]\r\n   * @return {[JSX Object]}  [SVG Circle element]\r\n   */\r\n  dotReturn2(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n\r\n    const CX = this.state.distancing2 + this.state.distancing * (xPosOrig + 1) + this.state.circRad - this.state.maxLength + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n\r\n    var hard = \r\n    <circle \r\n    // onMouseEnter={e => this.displayTag2(e)}\r\n    // onMouseLeave={e => this.hideTag2(e)}\r\n    // onMouseMove={e => this.updateTag2(e)} \r\n    className=\"icon\" \r\n    stroke={this.state.color2}\r\n    fill={this.state.color2}\r\n    fillOpacity=\"0.3\" \r\n    strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}>\r\n\r\n    </circle>;\r\n\r\n    return hard;\r\n  }\r\n\r\n  /**\r\n   * Returns the <polygon> for the triangle of the first curve\r\n   * @param  \r\n   * @return {[JSX Object]}  [SVG Polygon element]\r\n   */\r\n  returnTri1() {\r\n    if (this.state.fixCurve1) {\r\n      return (null);\r\n    }\r\n    else {\r\n      return (\r\n        <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent1 + this.state.distancing1 - 15, this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1 + 15, this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1, this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 1)}\r\n          />\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the <polygon> for the triangle of the second curve\r\n   * @param  \r\n   * @return {[JSX Object]}  [SVG Polygon element]\r\n   */\r\n  returnTri2() {\r\n    if (this.state.fixCurve2) {\r\n      return (null);\r\n    }\r\n    else {\r\n      return (\r\n        <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent2 + this.state.distancing2 - 15, this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2 + 15, this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2, this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 2)}\r\n          />\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the position of the triangle being dragged as a column relative to the\r\n   * absolute position and relative to the given starting value\r\n   * @param  {[Event]} e [Standard event sent when mouse movement occurs in javascript]\r\n   * @param  {[Number]} Dragger [1 for the first curve, 2 for the second]\r\n   * @return {[Number, Number]}  [Column position of triangle relative to absolute axis width,\r\n   * relative to starting position]\r\n   */\r\n  svgColReturn(e, dragger) {\r\n    let distFromCent;\r\n    let variance;\r\n    if (dragger === 1) {\r\n      distFromCent = this.state.triCentCol1;\r\n      variance = this.state.variance1;\r\n    }\r\n    else if (dragger === 2) {\r\n      distFromCent = this.state.triCentCol2;\r\n      variance = this.state.variance2;\r\n    }\r\n    var svg = this.svgRef.current;\r\n    var pt = svg.createSVGPoint();\r\n    pt.x = e.clientX;\r\n    var svgP = pt.matrixTransform(svg.getScreenCTM().inverse());\r\n    e.preventDefault();\r\n    var x = svgP.x - distFromCent + this.state.mousePointerRange;\r\n    var col = Math.round((x - this.state.axisStart) / this.state.distancing) + variance;\r\n    var colRelative = Math.round((x - this.state.axisStart) / this.state.distancing) - 1;\r\n    // console.log(col, colRelative, variance);\r\n    return [col, colRelative];\r\n  }\r\n\r\n  /**\r\n   * Updates state to reflect changes in curve position after mouse movement\r\n   * @param  {[Number]} col [Position of the curve in the SVG element]\r\n   * @param  {[Number]} colRelative [Position of the curve on the axis relative to the starting value]\r\n   * @param  {[Number]} dragger [1 for first curve, 2 for second curve]\r\n   * @return \r\n   */\r\n  svgColPlacement(col, colRelative, dragger) {\r\n    // console.log(col);\r\n    // console.log(this.state.axisStartCol);\r\n    // console.log(this.state.axisStart);\r\n    if (this.state.edgeLim) {\r\n      if (dragger === 2) {\r\n        const variance = this.state.axisStartCol - this.state.variance2;\r\n        if (col < this.state.axisStartCol - 1) {\r\n          // console.log(\"edge\");\r\n          this.setState({ distancing2: (this.state.axisStartCol - 1) * this.state.distancing, col21: 0, col22: this.state.len2 - 1 });\r\n        }\r\n        else if (col + this.state.len2 + 1 > this.state.axisStartCol + this.state.axisEndCol) {\r\n          const endCol = this.state.axisEndCol - this.state.len2;\r\n          this.setState({ distancing2: this.state.distancing * (this.state.axisStartCol + endCol - 1), col21: endCol, col22: endCol + this.state.len2 - 1 })\r\n        }\r\n        else {\r\n          this.setState({ distancing2: this.state.distancing * col, col21: colRelative - variance, col22: colRelative - variance + this.state.len2 - 1 });\r\n        }\r\n        this.curveArea();\r\n      }\r\n      else if (dragger === 1) {\r\n        const variance = this.state.axisStartCol - this.state.variance1;\r\n        if (col < this.state.axisStartCol - 1) {\r\n          this.setState({ distancing1: (this.state.axisStartCol - 1) * this.state.distancing, col11: 0, col12: this.state.len1 - 1 });\r\n        }\r\n        else if (col + this.state.len1 + 1 > this.state.axisStartCol + this.state.axisEndCol) {\r\n          const endCol = this.state.axisEndCol - this.state.len1;\r\n          this.setState({ distancing1: this.state.distancing * (this.state.axisStartCol + endCol - 1), col11: endCol, col12: endCol + this.state.len1 - 1 })\r\n        }\r\n        else {\r\n          this.setState({ distancing1: this.state.distancing * col, col11: colRelative - variance, col12: colRelative - variance + this.state.len1 - 1 });\r\n        }\r\n        // this.setState({ distancing2 : x })\r\n      }\r\n    }\r\n    else {\r\n      col = col - 1;\r\n      if (dragger === 2) {\r\n        // colRelative = colRelative - this.state.axisStartCol + this.state.variance2;\r\n        if (col + this.state.triCentCol2 < this.state.axisStartCol) {\r\n          this.setState({ distancing2: (this.state.variance2) * this.state.distancing, col21: 0, col22: this.state.len2 - 1 });\r\n        }\r\n        else if (col + this.state.triCentCol2 > this.state.axisStartCol + this.state.axisEndCol) {\r\n          this.setState({ distancing2: this.state.distancing * (this.state.variance2 + this.state.axisEndCol), col21: this.state.axisEndCol, col22: this.state.axisEndCol + this.state.len2 - 1 })\r\n        }\r\n        else {\r\n          this.setState({ distancing2: this.state.distancing * col, col21: colRelative, col22: colRelative + this.state.len2 - 1 });\r\n        }\r\n        this.curveArea();\r\n      }\r\n      else if (dragger === 1) {\r\n        // colRelative = colRelative - this.state.axisStartCol + this.state.variance1;\r\n        if (col + this.state.triCentCol1 < this.state.axisStartCol) {\r\n          this.setState({ distancing1: (this.state.variance1) * this.state.distancing, col11: 0, col12: this.state.len1 - 1 });\r\n        }\r\n        else if (col + this.state.triCentCol1 > this.state.axisStartCol + this.state.axisEndCol) {\r\n          this.setState({ distancing1: this.state.distancing * (this.state.variance1 + this.state.axisEndCol), col11: this.state.axisEndCol, col12: this.state.axisEndCol + this.state.len1 - 1 })\r\n        }\r\n        else {\r\n          this.setState({ distancing1: this.state.distancing * col, col11: colRelative, col12: colRelative + this.state.len1 - 1 });\r\n        }\r\n        this.curveArea();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates state to reflect movement of trianlges and distance from mouse point to triangle center\r\n   * @param  {[Event]} e [Event called by javascript upon mouse action]\r\n   * @param  {[Number]} num [1 for first curve, 2 for second curve]\r\n   * @return \r\n   */\r\n  triMouseDown(e, num) {\r\n    if (e.type === \"mousedown\") {\r\n      // console.log(\"MOUSEDOWN\");\r\n      e.preventDefault();\r\n      var svgPre = this.svgRef.current;\r\n      // Set mousePointerRange so that we know the distance\r\n      // from the mouse tip to the x-value of the triangle\r\n      // tip\r\n      var ptPre = svgPre.createSVGPoint();\r\n      ptPre.x = e.clientX;\r\n      var svgPPre = ptPre.matrixTransform(svgPre.getScreenCTM().inverse());\r\n      if (num === 1) {\r\n        this.setState(prevState => ({\r\n          // rectX : svgP.x,\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent1 + this.state.distancing1 - svgPPre.x\r\n        }));\r\n      }\r\n      else if (num === 2) {\r\n        this.setState(prevState => ({\r\n          // rectX : svgP.x,\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent2 + this.state.distancing2 - svgPPre.x\r\n        }));\r\n      }\r\n      // console.log(this.state);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called upon mouse being dragged, calls functions for moving curves\r\n   * @param  {[Event]} e [Event called by javascript upon mouse action]\r\n   * @return \r\n   */\r\n  triDrag(e) {\r\n      e.preventDefault();\r\n      var dragger = this.state.triDown;\r\n      var cols = this.svgColReturn(e, dragger);\r\n      var col = cols[0];\r\n      var colRelative = cols[1]\r\n      // console.log(col);\r\n      this.setState(this.svgColPlacement(col, colRelative, dragger));\r\n      this.curveArea();\r\n  }\r\n\r\n  /**\r\n   * Informs state the mouse is no longer holding down on a triangle\r\n   * @param  {[Event]} e [Event called by javascript upon mouse action]\r\n   * @return \r\n   */\r\n  triUp(e) {\r\n    // console.log(\"UP\");\r\n    if (this.state.triDown) {\r\n      this.setState({ triDown: false });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates area of the curve and updates the element that carries area value using ref\r\n   * @param  \r\n   * @return \r\n   */\r\n  curveArea() {\r\n    let col11;\r\n    let col12;\r\n    let col21;\r\n    let col22;\r\n\r\n    if (this.state.edgeLim) {\r\n      col11 = this.state.col11;\r\n      col12 = this.state.col12;\r\n      col21 = this.state.col21;\r\n      col22 = this.state.col22;\r\n    }\r\n    else {\r\n      col11 = this.state.col11 + this.state.variance1;\r\n      col12 = this.state.col12 + this.state.variance1;\r\n      col21 = this.state.col21 + this.state.variance2;\r\n      col22 = this.state.col22 + this.state.variance2;\r\n    }\r\n\r\n    if (col11 > col22 || col12 < col21) {\r\n      this.areaRef.current.innerHTML = 0;\r\n    }\r\n    else {\r\n      // console.log(this.state.col22, this.state.col11, Math.abs(this.state.col22 - this.state.col11));\r\n      this.areaRef.current.innerHTML = this.state.overlapVals[Math.abs(col22 - col11)];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes this element in the parent element if called\r\n   * @param  \r\n   * @return \r\n   */\r\n  delete() {\r\n    this.props.delete(this.props.count);\r\n  }\r\n  \r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  /**\r\n   * Calls props function changeJSON when change is made to experiment JSON\r\n   * that must be recorded\r\n   * @param  {[String]} key [key in JSON that must be updated]\r\n   * @param  {[]} value [New value for key in JSON]\r\n   * @param  {[]} data XXXXX\r\n   * @return \r\n   */\r\n  changeJSON(key, value, data) {\r\n    this.props.changeJSON(key, value, data);\r\n  }\r\n\r\n  /**\r\n   * Calls props function handleChange to update parent element\r\n   * @param  {[String]} key [key in parent that must be updated]\r\n   * @param  {[]} value [new value for key]\r\n   * @param  {[Number]} count [count of current element in parent list]\r\n   * @return \r\n   */\r\n  handleChange(key, value, count) {\r\n    this.props.handleChange(key, value, count);\r\n  }\r\n  /**\r\n   * Basic setup functions on component creation\r\n   * @param  \r\n   * @return \r\n   */\r\n  componentDidMount() {\r\n    // importing component, save imported data\r\n    if (this.props.imported) {\r\n      this.handleChange(\"Question\", this.props.qToDisplay[\"Question\"], this.props.count);\r\n      this.handleChange(\"graph1key\", this.props.qToDisplay[\"graph1key\"], this.props.count);\r\n      this.handleChange(\"graph2key\", this.props.qToDisplay[\"graph2key\"], this.props.count);\r\n      this.setState({ configuredShapes: true });\r\n    } else {\r\n      this.setState({ configuredShapes: false });\r\n    }\r\n    if (this.props.editing) {\r\n      this.handleChange(\"normal-curve-question-key\", this.props.qToDisplay[\"normal-curve-question-key\"], this.props.count);\r\n      this.handleChange(\"normal-curve-legend-key1\", this.props.qToDisplay[\"normal-curve-legend-key1\"], this.props.count);\r\n      this.handleChange(\"normal-curve-legend-key2\", this.props.qToDisplay[\"normal-curve-legend-key2\"], this.props.count);\r\n    };\r\n  }\r\n\r\n\r\n  /**\r\n   * Reloads the curve upon a new axis length being entered with new length recorded\r\n   * @param  {[Number]} newLength [The new length set by the researcher]\r\n   * @return \r\n   */\r\n  lengthSubmit() {\r\n    const newLength = this.lengthRef.current.value;\r\n    const internalLength = newLength * this.state.distancing;\r\n    const length = this.state.edgeLength + internalLength;\r\n\r\n    const axisEndCol = internalLength / this.state.distancing;\r\n    const axisEnd = axisEndCol * this.state.distancing;\r\n    // console.log(axisEndCol);\r\n\r\n    this.changeJSON(\"axis-length\", Number(newLength), this.state.jsonData);\r\n\r\n    // this.setState({\r\n    //   colNum: newLength,\r\n    //   svgWidth: length,\r\n    //   axisEndCol: axisEndCol,\r\n    //   axisEnd: axisEnd\r\n    // });\r\n\r\n    // const col1 = this.state.col11 - 1 + this.state.variance1;\r\n    // this.svgColPlacement(col1, this.state.col11, 1);\r\n\r\n    // const col2 = this.state.col21 - 1 + this.state.variance2;\r\n    // this.svgColPlacement(col2, this.state.col21, 2);\r\n    \r\n    const newData = this.props.data;\r\n    newData[\"axis-length\"] = newLength;\r\n    this.setState(this.establishStateData(newData));\r\n  }\r\n\r\n  // toggleXVals() {\r\n  //   this.setState(prevState => {\r\n  //     return {\r\n  //       showCoors: !prevState.showCoors\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  /**\r\n   * Manually alters the start position of the first curve when presented\r\n   * Accounts for possibility of going beyond the axis\r\n   * @param  {[Number]} newPos [new column position on the axis]\r\n   * @return\r\n   */\r\n  alterStartPos1(newPos) {\r\n    let startPos1 = parseInt(this.startPos1Ref.current.value) + this.state.variance1;\r\n    let col11 = startPos1 - this.state.variance1 + 1;\r\n    let col12 = col11 + this.state.len1 - 1;\r\n    if (startPos1 + this.state.triCentCol1 < this.state.axisStartCol) {\r\n      startPos1 = this.state.variance1 - 1;\r\n      col11 = 0;\r\n      col12 = this.state.len1 - 1;\r\n    }\r\n    else if (startPos1 + this.state.triCentCol1 > this.state.axisStartCol + this.state.axisEndCol) {\r\n      startPos1 = this.state.variance1 + this.state.axisEndCol - 1;\r\n      col11 = this.state.axisEndCol;\r\n      col12 = this.state.axisEndCol + this.state.len1 - 1;\r\n    }\r\n\r\n    this.changeJSON(\"startPos1\", Number(newPos), this.state.jsonData);\r\n\r\n    this.setState({\r\n      distancing1: startPos1 * this.state.distancing,\r\n      col11: col11,\r\n      col12: col12\r\n    });\r\n  }\r\n\r\n  \r\n  /**\r\n   * Manually alters the start position of the second curve when presented\r\n   * Accounts for possibility of going beyond the axis\r\n   * @param  {[Number]} newPos [new column position on the axis]\r\n   * @return\r\n   */\r\n  alterStartPos2(newPos) {\r\n    let startPos2 = parseInt(this.startPos2Ref.current.value) + this.state.variance2;\r\n    let col21 = startPos2 - this.state.variance2 + 1;\r\n    let col22 = col21 + this.state.len2 - 1;\r\n    if (startPos2 + this.state.triCentCol2 < this.state.axisStartCol) {\r\n      startPos2 = this.state.variance2 - 1;\r\n      col21 = 0;\r\n      col22 = this.state.len2 - 1;\r\n    }\r\n    else if (startPos2 + this.state.triCentCol2 > this.state.axisStartCol + this.state.axisEndCol) {\r\n      startPos2 = this.state.variance2 + this.state.axisEndCol - 1;\r\n      col21 = this.state.axisEndCol;\r\n      col22 = this.state.axisEndCol + this.state.len2 - 1;\r\n    }\r\n\r\n    this.changeJSON(\"startPos2\", Number(newPos), this.state.jsonData);\r\n\r\n    this.setState({\r\n      distancing2: startPos2 * this.state.distancing,\r\n      col21: col21,\r\n      col22: col22\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Manually alters the radius of circles on the curves\r\n   * @param  {[Number]} radius [new radius value]\r\n   * @return\r\n   */\r\n  updateRadius(radius) {\r\n    // console.log(\"updateRadius\", radius);\r\n    this.changeJSON(\"circle-radius\", parseInt(radius), this.state.jsonData);\r\n    let newData = this.state.jsonData;\r\n    newData[\"circle-radius\"] = parseInt(radius);\r\n    this.setState(this.establishStateData(newData));\r\n  }\r\n\r\n  /**\r\n   * Manually alters the number of ticks on the axis\r\n   * @param  {[Number]} newTickCount [new number of ticks on the axis]\r\n   * @return\r\n   */\r\n  updateTicks(newTickCount) {\r\n    this.changeJSON(\"tickNum\", parseInt(newTickCount), this.state.jsonData);\r\n    let newData = this.state.jsonData;\r\n    newData[\"tickNum\"] = parseInt(newTickCount);\r\n    this.setState(this.establishStateData(newData));\r\n  }\r\n\r\n  /**\r\n   * Manually alters the value of a given column (used in calculating length\r\n   * of the axis and tick values)\r\n   * @param  {[Number]} colVal [new column value]\r\n   * @return\r\n   */\r\n  updateColVal(colVal) {\r\n    this.changeJSON(\"colNumVal\", parseInt(colVal), this.state.jsonData);\r\n    let newData = this.state.jsonData;\r\n    newData[\"colNumVal\"] = parseInt(colVal);\r\n    this.setState(this.establishStateData(newData));\r\n    // this.changeJSON(\"colNumVal\", colVal);\r\n    // this.setState({ colNum: colVal });\r\n  }\r\n\r\n  /**\r\n   * Toggles 'edgeLim' value, or whether the curves stop at the edge\r\n   * @param  \r\n   * @return\r\n   */\r\n  checkChange() {\r\n    this.setState(prevState => {\r\n      this.changeJSON(\"edgeLim\", !Boolean(prevState.edgeLim), this.state.jsonData);\r\n      return {\r\n        edgeLim: Number(!Boolean(prevState.edgeLim))\r\n      }\r\n    })\r\n    // console.log(this.state.edgeLim);\r\n  }\r\n\r\n  /**\r\n   * Toggles whether curve 1 is moveable\r\n   * @param \r\n   * @return\r\n   */\r\n  toggleTri1() {\r\n    if (!this.state.fixCurve1) {\r\n      this.setState({startPos1 : this.state.distancing1})\r\n    }\r\n    this.setState(prevState => {\r\n      this.changeJSON(\"fixCurve1\", !prevState.fixCurve1, this.state.jsonData);\r\n      return {\r\n        fixCurve1 : !prevState.fixCurve1\r\n      }});\r\n  }\r\n\r\n  /**\r\n   * Toggles whether curve 2 is moveable\r\n   * @param  \r\n   * @return\r\n   */\r\n  toggleTri2() {\r\n    if (!this.state.fixCurve2) {\r\n      this.setState({startPos2 : this.state.distancing2})\r\n    }\r\n    this.setState(prevState => {\r\n      this.changeJSON(\"fixCurve2\", !prevState.fixCurve2, this.state.jsonData);\r\n      return {\r\n        fixCurve2 : !prevState.fixCurve2\r\n      }});\r\n  }\r\n\r\n  /**\r\n   * Updates color of curve 1 based on dropdown menu\r\n   * @param  \r\n   * @return\r\n   */\r\n  changeColor1() {\r\n    const newColor = this.color1Ref.current.value;\r\n    this.changeJSON(\"color1\", newColor, this.state.jsonData);\r\n    this.setState({ color1 : newColor });\r\n  }\r\n\r\n  /**\r\n   * Updates color of curve 2 based on dropdown menu\r\n   * @param  \r\n   * @return\r\n   */\r\n  changeColor2() {\r\n    const newColor = this.color2Ref.current.value;\r\n    this.changeJSON(\"color2\", newColor, this.state.jsonData);\r\n    this.setState({ color2 : newColor });\r\n  }\r\n\r\n  onUpdateShapes() {\r\n    const argArr = [\r\n      Number(this.arg0ref.current.value),\r\n      Number(this.arg1ref.current.value),\r\n      Number(this.arg2ref.current.value),\r\n      Number(this.arg3ref.current.value),\r\n      Number(this.arg4ref.current.value),\r\n      Number(this.arg5ref.current.value),\r\n      Number(this.arg6ref.current.value),\r\n    ];\r\n    // console.log(argArr);\r\n    axios\r\n      .post('https://test-api-615.herokuapp.com/normalCurve', \r\n        { argArr: argArr })\r\n      .then(res => {\r\n        const jsonData = JSON.parse(res.data.replace(/'/g, '\"'));\r\n        this.handleChange('FileContent', jsonData, this.props.count);\r\n        this.setState(this.establishStateData(jsonData));\r\n      })\r\n  }\r\n\r\n  onFinishShapes() {\r\n    var confirm = window.confirm(\"Are you sure these are the shapes you want?\"+\r\n      \" Once you click 'OK', you won't be able to change the shapes again\" + \r\n      \" for this question.\");\r\n    if (confirm) {\r\n      this.onUpdateShapes();\r\n      this.setState({ configuredShapes: true });\r\n    } else {\r\n      alert(\"Continue to configure shapes ... \");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const qNum = this.props.count + 1;\r\n\r\n    const defaultVal = (qType) => {\r\n      if (this.props.qToDisplay) {\r\n        return this.props.qToDisplay[qType]\r\n      } else {\r\n        return \"\"\r\n      }}\r\n    \r\n    const defaultCurveVal = (dataType) => {\r\n      if (this.props.qToDisplay) {\r\n        return this.props.qToDisplay[\"FileContent\"][dataType]\r\n      } else {\r\n        return \"\"\r\n      }\r\n    }\r\n\r\n    const defaultArg = (whichArg) => {\r\n      if (this.props.configArgs) {\r\n        return this.props.configArgs[whichArg];\r\n      } else {\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"boxed\">\r\n          {\r\n            this.state.configuredShapes\r\n            ?\r\n            <h4>You have already configured normal curve shapes for this question.</h4>\r\n            :\r\n            <div>\r\n              <h4>Configure Shapes</h4>\r\n              <div className=\"args-container\">\r\n                <div className=\"arg\">\r\n                  First Curve Height\r\n                  <br/>\r\n                  <input type=\"text\" ref={this.arg0ref} \r\n                    defaultValue={defaultArg(0)}/>\r\n                </div>\r\n                <div className=\"arg\">\r\n                  First Curve Width\r\n                  <br/>\r\n                  <input type=\"text\" ref={this.arg1ref}\r\n                    defaultValue={defaultArg(1)}/>\r\n                </div>\r\n                <div className=\"arg\">\r\n                  Second Curve Height\r\n                  <br/>\r\n                  <input type=\"text\" ref={this.arg2ref}\r\n                    defaultValue={defaultArg(2)}/>\r\n                </div>\r\n                <div className=\"arg\">\r\n                  Second Curve Width\r\n                  <br/>\r\n                  <input type=\"text\" ref={this.arg3ref}\r\n                    defaultValue={defaultArg(3)}/>\r\n                </div>\r\n              </div>\r\n              <div className=\"args-container\">\r\n                <div className=\"arg\">\r\n                  Circle Radius <br/> (2 ~ 5 inclusive)\r\n                  <br/>\r\n                  <input type=\"text\" ref={this.arg4ref}\r\n                    defaultValue={defaultArg(4)}/>\r\n                </div>\r\n                <div className=\"arg\">\r\n                  x-axis length <br/> (at least 1)\r\n                  <br/>\r\n                  <input type=\"text\" ref={this.arg5ref}\r\n                    defaultValue={defaultArg(5)}/>\r\n                </div>\r\n                <div className=\"arg\">\r\n                  x-axis lowest value <br/> (at least 0)\r\n                  <br/>\r\n                  <input type=\"text\" ref={this.arg6ref}\r\n                    defaultValue={defaultArg(6)}/>\r\n                </div>\r\n              </div>\r\n              <br/>\r\n              <button onClick={() => this.onUpdateShapes()}>\r\n                Update \r\n              </button> <br/>\r\n              <button onClick={() => this.onFinishShapes()}>\r\n                Proceed to Configure Experiment\r\n              </button>\r\n            </div>\r\n          }\r\n          \r\n          <div \r\n            onMouseMove={e => this.triDrag(e)}\r\n            onMouseUp={e => this.triUp(e)}>\r\n            <svg width={this.state.svgWidth} height={this.state.svgHeight + 10} ref={this.svgRef}>\r\n              {/* <rect opacity=\"0.2\" width=\"100%\" height=\"100%\" fill=\"red\"/> */}\r\n              {[...Array(this.state.len1).keys()].map(\r\n                (col) =>\r\n                  [...Array(this.state.colValHeiS[col]).keys()].map(\r\n                    (row) => this.dotReturn(col, row)\r\n                  )\r\n              )}\r\n              {[...Array(this.state.len2).keys()].map(\r\n                (col) =>\r\n                  [...Array(this.state.colValHeiS2[col]).keys()].map(\r\n                    (row) => this.dotReturn2(col, row)\r\n                  )\r\n              )}\r\n              <rect width={this.state.axisEnd}\r\n                height=\"2\"\r\n                fill=\"black\"\r\n                x={this.state.axisStartCol * this.state.distancing - 1}\r\n                y={this.state.ceilDist + 20} />\r\n              <rect width=\"2\"\r\n                height=\"20\"\r\n                fill=\"black\"\r\n                x={this.state.axisStartCol * this.state.distancing - 1}\r\n                y={this.state.ceilDist + 20} />\r\n              <rect width=\"2\"\r\n                height=\"20\"\r\n                fill=\"black\"\r\n                x={this.state.axisEnd + this.state.axisStartCol * this.state.distancing - 1}\r\n                y={this.state.ceilDist + 20} />\r\n              {[...Array(this.state.tickNum).keys()].map(\r\n                (tick) =>\r\n                  <rect\r\n                    width=\"2\"\r\n                    height=\"20\"\r\n                    fill=\"black\"\r\n                    x={this.state.axisStart + (this.state.tickDist * (tick + 1)) - 1} \r\n                    y={this.state.ceilDist + 20}\r\n                  />\r\n              )}\r\n              {[...Array(this.state.tickNum).keys()].map(\r\n                (tick) =>\r\n                <text \r\n                textAnchor=\"middle\" \r\n                x={this.state.axisStart + (this.state.tickDist * (tick + 1)) - 1} \r\n                y={this.state.ceilDist + 55}>\r\n                  {this.state.lowVal + (this.state.rangeVal * (tick + 1))}\r\n                </text>\r\n              )}\r\n              {/* triangle rendering below */}\r\n              {this.returnTri1()}\r\n              {this.returnTri2()}\r\n              <text textAnchor=\"middle\" x={this.state.axisStart} y={this.state.ceilDist + 55}>{this.state.lowVal}</text>\r\n              <text textAnchor=\"middle\" x={this.state.axisStart + this.state.axisEnd} y={this.state.ceilDist + 55}>{this.state.lowVal + this.state.colNum * this.state.colNumVal}</text>\r\n                        Sorry, please use a different browser.\r\n            </svg>\r\n            <br />\r\n            <h4>Area Under Curve: <span ref={this.areaRef}></span> | First x-coordinate: {this.state.col11} | Second x-coordinate: {this.state.col21} </h4>\r\n            {\r\n              !this.state.configuredShapes\r\n              ?\r\n              <div></div>\r\n              :\r\n              <div>\r\n                <div class=\"flex-container\">\r\n                  <div class=\"flex-child-one\">\r\n                    Question: <br/>\r\n                    <textarea class=\"normal-curve-text\" cols=\"60\" rows=\"11\" \r\n                        ref={this.qRef} \r\n                        defaultValue={defaultVal(\"Question\")}\r\n                      onInput={() => this.handleChange(\"Question\", this.qRef.current.value, this.props.count)}>\r\n                    </textarea>\r\n\r\n                    <br/><br/>\r\n                    <div class=\"color-box\" style={{ backgroundColor: this.state.color1 }}></div>\r\n                    <input type=\"text\" \r\n                      ref={this.graph1keyRef} \r\n                      defaultValue={defaultVal(\"graph1key\")}\r\n                      onInput={() => this.handleChange(\"graph1key\", this.graph1keyRef.current.value, this.props.count)}></input>\r\n                    <br />\r\n\r\n                    <div class=\"color-box\" style={{ backgroundColor: this.state.color2 }}></div>\r\n                    <input type=\"text\" \r\n                      ref={this.graph2keyRef} \r\n                      defaultValue={defaultVal(\"graph2key\")}\r\n                      onInput={() => this.handleChange(\"graph2key\", this.graph2keyRef.current.value, this.props.count)}></input>\r\n                  </div>\r\n\r\n                  <div class=\"flex-child-two\">\r\n                    <br/>\r\n                    What csv column name do you want to assign to this question?\r\n                    <br/>\r\n                    {\r\n                      this.props.editing\r\n                      ?\r\n                      <input type=\"text\" ref={this.questionKeyRef} \r\n                      defaultValue={this.props.qToDisplay[\"normal-curve-question-key\"]}\r\n                      onInput={() => this.handleChange(\"normal-curve-question-key\", this.questionKeyRef.current.value, this.props.count)}/>\r\n                      :\r\n                      <input type=\"text\" ref={this.questionKeyRef} \r\n                      onInput={() => this.handleChange(\"normal-curve-question-key\", this.questionKeyRef.current.value, this.props.count)}/>\r\n                    }\r\n                    <br/>\r\n                    <b>Use letters only, the name must be unique, leave no space between letters.</b> <br/>\r\n                    Recommedation: include your experiment name, this question number \r\n                    ({qNum}), and the question type (normalCurve)<br/>\r\n                    <br/>\r\n                    Please enter the csv column names for the graph key: <br/><br/>\r\n                    <div class=\"color-box\" style={{ backgroundColor: this.state.color1 }}></div>\r\n                    {\r\n                      this.props.editing\r\n                      ?\r\n                      <input type=\"text\" ref={this.legendKey1Ref}\r\n                      defaultValue={this.props.qToDisplay[\"normal-curve-legend-key1\"]}\r\n                      onInput={() => this.handleChange(\"normal-curve-legend-key1\", this.legendKey1Ref.current.value, this.props.count)}></input>\r\n                      :\r\n                      <input type=\"text\" ref={this.legendKey1Ref}\r\n                      onInput={() => this.handleChange(\"normal-curve-legend-key1\", this.legendKey1Ref.current.value, this.props.count)}></input>\r\n                    }\r\n                    <br/>\r\n                    <div class=\"color-box\" style={{ backgroundColor: this.state.color2 }}></div>\r\n                    {\r\n                      this.props.editing\r\n                      ?\r\n                      <input type=\"text\" ref={this.legendKey2Ref}\r\n                      defaultValue={this.props.qToDisplay[\"normal-curve-legend-key2\"]}\r\n                      onInput={() => this.handleChange(\"normal-curve-legend-key2\", this.legendKey2Ref.current.value, this.props.count)}></input>\r\n                      :\r\n                      <input type=\"text\" ref={this.legendKey2Ref}\r\n                      onInput={() => this.handleChange(\"normal-curve-legend-key2\", this.legendKey2Ref.current.value, this.props.count)}></input>\r\n                    }\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex-child-three\">\r\n                  <span>Enter the width of the graph (each point in the curves is \r\n                    equivalent to 1 unit of width) </span>\r\n                  <input ref={this.lengthRef} type=\"text\" \r\n                    defaultValue={defaultCurveVal(\"axis-length\")}\r\n                    // name=\"axisLength\" value={this.state.axisLength} \r\n                    // onChange={this.onChange}\r\n                    />\r\n                  <button onClick={() => {this.lengthSubmit(this.lengthRef.current.value)}}>\r\n                    Change Width\r\n                  </button>\r\n                  <br/>\r\n\r\n                  <span>Enter your preferred value for the width of each unit in the curve</span>\r\n                  <input type=\"text\" ref={this.colNumValRef}\r\n                    defaultValue={defaultCurveVal(\"colNumVal\")}></input>\r\n                  <button onClick={() => this.updateColVal(this.colNumValRef.current.value)}>Change Unit Value</button>\r\n                  <br />\r\n\r\n                  <span>Enter your preferred value for the radius of each unit in the curve (2 - 5, inclusive)</span>\r\n                  <input type=\"text\" ref={this.radiusRef}\r\n                    defaultValue={defaultCurveVal(\"circle-radius\")}></input>\r\n                  <button onClick={() => this.updateRadius(this.radiusRef.current.value)}>Change Radius</button>\r\n                  <br />\r\n\r\n                  <span>Enter your preferred number of ticks on the graph (equal parts must be divisible by x-axis width)</span>\r\n                  <input type=\"text\" ref={this.ticksRef}\r\n                    defaultValue={defaultCurveVal(\"tickNum\")}></input>\r\n                  <button onClick={() => this.updateTicks(this.ticksRef.current.value)}>Change Tick Count</button>\r\n                  <br />\r\n\r\n                  <span>Enter your preferred starting position for curve 1, \r\n                    if you want to change it </span>\r\n                  <input ref={this.startPos1Ref} type=\"text\" \r\n                    // name=\"startPos1\" value={this.state.startPos1} onChange={this.onChange}\r\n                    defaultValue={defaultCurveVal(\"startPos1\")}></input>\r\n                  <button onClick={() => this.alterStartPos1(this.startPos1Ref.current.value)}>\r\n                    Change Curve 1\r\n                  </button>\r\n                  <br/>\r\n\r\n                  <input \r\n                  type=\"checkbox\"\r\n                  ref={this.toggleTriRef1}\r\n                  onChange={this.toggleTri1} checked={this.state.fixCurve1}/>\r\n                  <label for=\"toggle1\"> Check to lock the position of the curve</label>\r\n                  <p> || </p>\r\n\r\n                  <label for=\"color1\">Choose a color for curve 1: </label>\r\n                  <select name=\"color1\" id=\"color1\" ref={this.color1Ref}\r\n                    defaultValue={this.state.color1}>\r\n                    <option value=\"CornflowerBlue\">Blue</option>\r\n                    <option value=\"Crimson\">Red</option>\r\n                    <option value=\"MediumSeaGreen\">Green</option>\r\n                    <option value=\"LightGray\">Gray</option>\r\n                  </select>\r\n                  <input onClick={() => this.changeColor1()} type=\"submit\" value=\"Submit\"></input>\r\n                  <br />\r\n\r\n                  <span>Enter your preferred starting position for curve 2, \r\n                    if you want to change it </span>\r\n                  <input ref={this.startPos2Ref} type=\"text\" \r\n                    // name=\"startPos2\" value={this.state.startPos2} onChange={this.onChange}\r\n                    defaultValue={defaultCurveVal(\"startPos2\")}></input>\r\n                  <button onClick={() => this.alterStartPos2(this.startPos2Ref.current.value)}>\r\n                    Change Curve 2\r\n                  </button>\r\n                  <br/>\r\n\r\n                  <input \r\n                  type=\"checkbox\"\r\n                  ref={this.toggleTriRef2}\r\n                  onChange={this.toggleTri2} checked={this.state.fixCurve2}/>\r\n                  <label for=\"toggle2\"> Check to lock the position of the curve</label>\r\n                  <p> || </p>\r\n\r\n                  <label for=\"color2\">Choose a color for curve 2: </label>\r\n                  <select name=\"color2\" id=\"color2\" ref={this.color2Ref}\r\n                    defaultValue={this.state.color2}>\r\n                    <option value=\"CornflowerBlue\">Blue</option>\r\n                    <option value=\"Crimson\">Red</option>\r\n                    <option value=\"MediumSeaGreen\">Green</option>\r\n                    <option value=\"LightGray\">Gray</option>\r\n                  </select>\r\n                  <input onClick={() => this.changeColor2()} type=\"submit\" value=\"Submit\"></input>\r\n                  <br />\r\n                  <div>\r\n                    <input \r\n                      type=\"checkbox\" \r\n                      id=\"vehicle1\" \r\n                      name=\"vehicle1\" \r\n                      value=\"Bike\" \r\n                      ref={this.checkBoxRef}\r\n                      onChange={this.checkChange} checked={this.state.edgeLim}/>\r\n                    <label for=\"vehicle1\">Turn edge limiting on/off</label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            }\r\n            <br/>\r\n            <button onClick={this.delete.bind(this)}>Delete</button>\r\n          </div>\r\n        </div>\r\n        <br/><br/><br/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NormalCurve;","import React, { Component } from 'react';\r\nimport Dropzone, { useDropzone } from \"react-dropzone\";\r\nimport NormalCurve from './NormalCurve';\r\nimport './NormalCurve.css';\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { \r\n  getColData\r\n} from '../../../actions/dataActions'\r\n\r\nimport sameSquare from './sameSquare.png';\r\nimport rlyDiff from './rlyDiff.png';\r\nimport bigSmall from './bigSmall.png';\r\nconst sameSquareData = require('./sameSquare.json');\r\nconst rlyDiffData = require('./rlyDiff.json');\r\nconst bigSmallData = require('./bigSmall.json');\r\n\r\nclass NormalCurveResearch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.rectRef = React.createRef();\r\n    this.svgRef = React.createRef();\r\n    this.areaRef = React.createRef();\r\n\r\n    this.arg1ref = React.createRef();\r\n    this.arg2ref = React.createRef();\r\n    this.arg3ref = React.createRef();\r\n    this.arg4ref = React.createRef();\r\n    this.arg5ref = React.createRef();\r\n    this.arg6ref = React.createRef();\r\n    this.arg7ref = React.createRef();\r\n\r\n    this.handleDrop = this.handleDrop.bind(this);\r\n    this.handleSelectedFile = this.handleSelectedFile.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.changeJSON = this.changeJSON.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.delete = this.delete.bind(this);\r\n    this.processJSON = this.processJSON.bind(this);\r\n    this.selectNC = this.selectNC.bind(this);\r\n\r\n    this.state = {\r\n      dataReceived: false,\r\n      fileNames: [],\r\n      setFileNames: [],\r\n      fileChosen: '',\r\n      key: this.props.key\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set this.state to display config data as graphs to the frontend\r\n   * @param {[Object]} jsonData [json data containing config info for normalCurve]\r\n   */\r\n  processJSON(jsonData) {\r\n    const unitHeight = jsonData[\"max-height\"];\r\n    const circRad = jsonData[\"circle-radius\"];\r\n    const distancing = circRad * 4 - 1;\r\n    const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\r\n    const ceilDist = height - 50;\r\n    const length = Math.ceil((distancing * jsonData[\"len1\"] * 2 + distancing * jsonData[\"len2\"] * 2) / 100) * 100;\r\n    const colNum = Math.round(length / distancing);\r\n    this.setState({\r\n      dataReceived: true,\r\n      // fileText: fileText,\r\n      jsonData: jsonData,\r\n      svgWidth: length,\r\n      svgHeight: height,\r\n      distancing: distancing,\r\n      dataReceived: true,\r\n      len1: jsonData[\"len1\"],\r\n      colValHeiS: jsonData[\"colValHeiS\"],\r\n      len2: jsonData[\"len2\"],\r\n      colValHeiS2: jsonData[\"colValHeiS2\"],\r\n      distancing1: (jsonData[\"len2\"] + 1) * distancing,\r\n      distancing2: (jsonData[\"len1\"] + jsonData[\"len2\"] + 4) * distancing,\r\n      triCent1: Math.round((0.5 * jsonData[\"len1\"]) * distancing) + distancing,\r\n      triCent2: Math.round((0.5 * jsonData[\"len2\"]) * distancing) + distancing,\r\n      col11: jsonData[\"len2\"] + 1,\r\n      col12: jsonData[\"len1\"] + jsonData[\"len2\"] + 1,\r\n      col21: jsonData[\"len1\"] + jsonData[\"len2\"] + 3,\r\n      col22: jsonData[\"len1\"] + 2 * jsonData[\"len2\"] + 3,\r\n      colLim1: Math.round((length - (jsonData[\"len1\"] * distancing)) / distancing),\r\n      colLim2: Math.round((length - (jsonData[\"len2\"] * distancing)) / distancing),\r\n      overlapVals: jsonData[\"overlapVals\"],\r\n      circRad: circRad,\r\n      ceilDist: ceilDist\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // importing component\r\n    // console.log(this.props);\r\n    if (this.props.imported) {\r\n      // if this normal curve component is imported, we need to append those \r\n      // associating files to final output with handleChange()\r\n      this.handleChange(\"FileName\", this.props.qToDisplay[\"FileName\"], this.props.count);\r\n      const jsonData = this.props.qToDisplay[\"FileContent\"];\r\n      this.handleChange(\"FileContent\", jsonData, this.props.count);\r\n      this.setState({ imported: true });\r\n      // this.processJSON(jsonData);\r\n    }\r\n    const username = this.props.auth.user.username;\r\n    this.props.getColData(username, \"itemData\");\r\n  }\r\n\r\n  // Inherited function from TabList.jsx\r\n  saveFile(type, name, content) {\r\n    this.props.saveFile(type, name, content);\r\n  }\r\n\r\n  /**\r\n   * DEPRECATED since we are not doing drag n drop anymore\r\n   * Set this.state based on file data and save file data to final output\r\n   * @param {[File]} acceptedFiles [a file in .json format]\r\n   */\r\n  handleDrop(acceptedFiles) {\r\n    console.log(acceptedFiles.map(file => {\r\n      acceptedFiles.forEach((file) => {\r\n\r\n        const normalCurveFiles = this.props.dataFlowColData.filter(\r\n          item => item.itemType == \"normal-curve\");\r\n        var fileNames = normalCurveFiles.map(item => item.fileName);\r\n        if (fileNames.includes(file.name)) {\r\n          alert(\"File name already exists. Please upload a file\" +  \r\n            \" with a unique name.\");\r\n          this.setState({ dataReceived: false });\r\n        } else {\r\n          this.handleChange(\"FileName\", file.name, this.props.count);\r\n\r\n          const reader = new FileReader()\r\n          reader.onabort = () => console.log('file reading was aborted')\r\n          reader.onerror = () => console.log('file reading has failed')\r\n          reader.onload = () => {\r\n            // Do whatever you want with the file contents\r\n            const fileText = reader.result;\r\n            const jsonData = JSON.parse(fileText);\r\n\r\n            this.handleChange(\"FileContent\", jsonData, this.props.count);\r\n            if (this.props.files.length == 0) {\r\n              this.saveFile(\"normal-curve\", file.name, jsonData);\r\n            } else {\r\n              const names = this.props.files.map(item => item.fileName);\r\n              if (!names.includes(file.name)) {\r\n                this.saveFile(\"normal-curve\", file.name, jsonData);\r\n              }\r\n            }\r\n\r\n            const unitHeight = jsonData[\"max-height\"];\r\n            const circRad = jsonData[\"circle-radius\"];\r\n            const distancing = circRad * 4 - 1;\r\n            const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\r\n            const ceilDist = height - 50;\r\n            const length = Math.ceil((distancing * jsonData[\"len1\"] * 2 + distancing * jsonData[\"len2\"] * 2) / 100) * 100;\r\n            const colNum = Math.round(length / distancing);\r\n            this.setState({\r\n              dataReceived: true,\r\n              fileText: fileText,\r\n              jsonData: jsonData, \r\n              svgWidth: length,\r\n              svgHeight: height,\r\n              distancing: distancing,\r\n              dataReceived: true,\r\n              len1: jsonData[\"len1\"],\r\n              colValHeiS: jsonData[\"colValHeiS\"],\r\n              len2: jsonData[\"len2\"],\r\n              colValHeiS2: jsonData[\"colValHeiS2\"],\r\n              distancing1: (jsonData[\"len2\"] + 1) * distancing,\r\n              distancing2: (jsonData[\"len1\"] + jsonData[\"len2\"] + 4) * distancing,\r\n              triCent1: Math.round((0.5 * jsonData[\"len1\"]) * distancing) + distancing,\r\n              triCent2: Math.round((0.5 * jsonData[\"len2\"]) * distancing) + distancing,\r\n              col11: jsonData[\"len2\"] + 1,\r\n              col12: jsonData[\"len1\"] + jsonData[\"len2\"] + 1,\r\n              col21: jsonData[\"len1\"] + jsonData[\"len2\"] + 3,\r\n              col22: jsonData[\"len1\"] + 2 * jsonData[\"len2\"] + 3,\r\n              colLim1: Math.round((length - (jsonData[\"len1\"] * distancing)) / distancing),\r\n              colLim2: Math.round((length - (jsonData[\"len2\"] * distancing)) / distancing),\r\n              overlapVals: jsonData[\"overlapVals\"],\r\n              circRad: circRad,\r\n              ceilDist: ceilDist\r\n            });\r\n          };\r\n          reader.readAsText(file);\r\n        };\r\n      });\r\n    }));\r\n    this.setState({ fileNames: acceptedFiles.map(file => file.name) })\r\n  }\r\n\r\n  /**\r\n   * DEPRECATED since we are not doing drag n drop anymore\r\n   * Triggered when researchers select a previously uploaded file\r\n   */\r\n  handleSelectedFile() {\r\n    console.log(this.props.count);\r\n    this.handleChange(\"FileName\", this.state.fileChosen, this.props.count);\r\n\r\n    const jsonData = this.props.dataFlowColData.filter(item => \r\n      item.fileName == this.state.fileChosen)[0].fileContent;\r\n\r\n    this.handleChange(\"FileContent\", jsonData, this.props.count);\r\n    \r\n    this.processJSON(jsonData);\r\n  }  \r\n\r\n  delete() {\r\n    this.props.delete(this.props.count);\r\n  }\r\n\r\n  getCount() {\r\n    this.props.getCount(this.props.count);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  // inherited from TabList.jsx\r\n  handleChange(key, value, count) {\r\n    this.props.handleChange(key, value, count);\r\n  }\r\n\r\n  /**\r\n   * Update @param data and save to final output\r\n   * @param {[String]} key [key of entry to update]\r\n   * @param {[Any]} value [value of entry to update]\r\n   * @param {[Object]} data [a json object to be updated]\r\n   */\r\n  changeJSON(key, value, data) {\r\n    // var data = this.state.jsonData;\r\n    data[key] = value;\r\n    this.handleChange(\"FileContent\", data, this.props.count);\r\n  }\r\n\r\n  /**\r\n   * Save researcher selection to final output and update this.state\r\n   * WARNING: do not try to import jsonData from directory because data\r\n   *          will be altered by researchers' configuration\r\n   * @param {[Event]} e [an event triggered by researchers clicking on one of \r\n   *                     the three normal curve options]\r\n   */\r\n  selectNC(e) {\r\n    const id = e.currentTarget.id;\r\n\r\n    var jsonData;\r\n    var configArgs;\r\n    switch (id) {\r\n      case \"sameSquare\":\r\n        jsonData = sameSquareData;\r\n        configArgs = [20, 20, 20, 20, 3, 30, 0];\r\n        console.log(\"sameSquare\");\r\n        break;\r\n      case \"rlyDiff\":\r\n        jsonData = rlyDiffData;\r\n        configArgs = [30, 10, 10, 30, 3, 30, 0];\r\n        console.log(\"rlyDiff\");\r\n        break;\r\n      case \"bigSmall\":\r\n        jsonData = bigSmallData;\r\n        configArgs = [30, 15, 20, 10, 3, 30, 0];\r\n        console.log(\"bigSmall\");\r\n        break;\r\n    };\r\n\r\n    this.handleChange(\"FileName\", id + \".json\", this.props.count);\r\n    this.handleChange(\"FileContent\", jsonData, this.props.count);\r\n    this.setState({ configArgs: configArgs });\r\n    this.processJSON(jsonData);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.dataReceived) {\r\n      // this case is triggered when researchers select one of the three options\r\n      // previously built for drag n drop file upload. \r\n      // Search 'dataReceived' in this file to learn more\r\n      return (\r\n        <div>\r\n          <NormalCurve \r\n            data={this.state.jsonData} count={this.props.count}\r\n            configArgs={this.state.configArgs}\r\n            changeJSON={this.changeJSON} \r\n            handleChange={this.handleChange} \r\n            delete={this.delete} />\r\n          <br/>\r\n        </div>\r\n      )\r\n    // importing component\r\n    } else if (this.state.imported) {\r\n      // a normal curve is imported in two possible ways:\r\n      // 1. when researchers import a question from another experiment in expt builder\r\n      // 2. when researchers use \"Edit Experiment\" feature from ConfigStudy\r\n      return (\r\n        <div>\r\n          <NormalCurve \r\n            imported={true}\r\n            editing={this.props.editing}\r\n            data={this.props.qToDisplay[\"FileContent\"]} \r\n            qToDisplay={this.props.qToDisplay}\r\n            count={this.props.count}\r\n            changeJSON={this.changeJSON} \r\n            handleChange={this.handleChange} \r\n            delete={this.delete} />\r\n        </div>\r\n      )\r\n    } else {\r\n      // provide researchers with three pre-built normal curve items\r\n      const normalCurveFiles = this.props.dataFlowColData.filter(\r\n        item => item.itemType == \"normal-curve\");\r\n      var fileNames = normalCurveFiles.map(item => item.fileName);\r\n      fileNames.unshift(\"Select File\");\r\n      const renderOption = item => <option value={item}>{item}</option>\r\n      const fileOptions = fileNames.map(renderOption);\r\n\r\n      return (\r\n        <div>\r\n          <div className=\"boxed\">\r\n            Select one of the following Normal Curve items to start with: <br/><br/>\r\n            <div className=\"container\">\r\n              <button>\r\n                <img src={sameSquare} alt=\"sameSquare\" id=\"sameSquare\"\r\n                  onClick={this.selectNC}\r\n                  style={{ height: \"10vw\", width: \"10vw\" }} /> \r\n              </button>\r\n              <p> </p>\r\n              <button>\r\n                <img src={rlyDiff} alt=\"rlyDiff\" id=\"rlyDiff\"\r\n                  onClick={this.selectNC}\r\n                  style={{ height: \"10vw\", width: \"10vw\" }} /> \r\n              </button>\r\n              <p> </p>\r\n              <button>\r\n                <img src={bigSmall} alt=\"bigSmall\" id=\"bigSmall\" \r\n                  onClick={this.selectNC}\r\n                  style={{ height: \"10vw\", width: \"10vw\" }} /> \r\n              </button>\r\n              <br/>\r\n            </div>\r\n            <br/><br/>\r\n            {/* Select previously uploaded files: \r\n            <br/>\r\n            <select name=\"fileChosen\" value={this.state.fileChosen} onChange={this.onChange}>\r\n              {fileOptions}\r\n            </select>\r\n            <button onClick={this.handleSelectedFile}>OK</button>\r\n            <br/><br/> */}\r\n            {/* <br/>\r\n            <Dropzone\r\n              onDrop={this.handleDrop}\r\n              accept=\"application/JSON, .json\"\r\n            >\r\n              {({ getRootProps, getInputProps }) => (\r\n                <div {...getRootProps({ className: \"dropzone\" })}>\r\n                  <input {...getInputProps()} />\r\n                  <p>Drag'n'drop files, or click to select files (must be valid JSON file)</p>\r\n                </div>\r\n              )}\r\n            </Dropzone>\r\n            <br/> */}\r\n            <button onClick={this.delete.bind(this)}>Delete Question</button>\r\n          </div>\r\n          <br/><br/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nNormalCurveResearch.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n  getColData: PropTypes.func.isRequired,\r\n  dataFlowColData: PropTypes.array.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  dataFlowColData: state.dataFlow.colData\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getColData }\r\n)(NormalCurveResearch);","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nimport './HistSlider.css';\r\n\r\nclass Histogram extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.sliderRef = React.createRef();\r\n    this.graphRef = React.createRef();\r\n    this.qRef = React.createRef();\r\n    this.minRef = React.createRef();\r\n    this.maxRef = React.createRef();\r\n    this.questionKeyRef = React.createRef();\r\n\r\n    this.state = {\r\n      checked: false,\r\n      minVal: Number,\r\n      maxVal: Number,\r\n      sliderPos: Number\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drawChart();\r\n  }\r\n\r\n  delete() {\r\n    this.props.delete(this.props.count);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  handleChange(type, q, count) {\r\n    this.props.handleChange(type, q, count);\r\n  }\r\n\r\n  drawChart() {\r\n    const data = this.props.data;\r\n\r\n    const svg = d3.select(this.graphRef.current).append(\"svg\")\r\n      .attr(\"width\", this.props.width)\r\n      .attr(\"height\", this.props.height)\r\n\r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * this.props.width / data.length)\r\n      .attr(\"y\", (d, i) => this.props.height - 10 * d)\r\n      .attr(\"width\", this.props.width / data.length - 10)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"#4CAF50\")\r\n      .attr(\"opacity\", 0.5)\r\n\r\n    svg.selectAll(\"text\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d)\r\n      .attr(\"x\", (d, i) => i * this.props.width / data.length)\r\n      .attr(\"y\", (d, i) => this.props.height - (10 * d) - 3)\r\n  }\r\n\r\n  render() {\r\n    const qNum = this.props.count + 1;\r\n    const vertAlign = this.props.height / 2;\r\n    // const step_size = this.props.width / this.props.data.length;\r\n    return (\r\n      <div>\r\n        <div ref={this.graphRef}\r\n          style={{ \r\n            position: \"relative\", \r\n            width: this.props.width, \r\n            margin: \"auto\" }}>\r\n          <div \r\n            style={{ \r\n              position: \"absolute\",\r\n              top: vertAlign}}>\r\n            <input type=\"range\" min={this.state.minVal} max={this.state.maxVal} \r\n              className=\"hist-slider\" onChange={this.onChange}\r\n              name=\"sliderPos\" value={this.state.sliderPos}\r\n              step={this.props.step} ref={this.sliderRef}\r\n              style={{ width: this.props.width }}/>\r\n          </div>\r\n        </div>\r\n        {this.state.minVal}\r\n        <input type=\"range\" class=\"dummy-slider\" \r\n          style={{ width: this.props.width }} onChange={this.onChange}\r\n          name=\"sliderPos\" value={this.state.sliderPos} step={this.props.step}\r\n          min={this.state.minVal} max={this.state.maxVal} />\r\n        {this.state.maxVal}\r\n        \r\n        <br/><br/>\r\n        <div className=\"boxed\">\r\n          Question #{qNum} <br/>\r\n          <textarea cols=\"60\" rows=\"10\" ref={this.qRef} \r\n            onInput={() => this.handleChange(\"Question\", this.qRef.current.value, this.props.count)}>\r\n          </textarea>\r\n\r\n          <br/>\r\n          <p>Minimum: \r\n            <input onInput={() => this.handleChange(\"lowRange\", this.minRef.current.value, this.props.count)} \r\n            ref={this.minRef} type=\"text\" \r\n            name=\"minVal\" value={this.state.minVal} onChange={this.onChange}/></p>\r\n          \r\n          <br/>\r\n          <p>Maximum: <input onInput={() => this.handleChange(\"highRange\", this.maxRef.current.value, this.props.count)} \r\n            ref={this.maxRef} type=\"text\" \r\n            name=\"maxVal\" value={this.state.maxVal} onChange={this.onChange}/></p>\r\n\r\n          <br/><br/>\r\n          What csv column name do you want to assign to this question? <br/>\r\n          <b>Please use letters only, the name must be unique, leave no space between letters.</b> <br/>\r\n          Recommedation: include your experiment name, this question number \r\n          ({qNum}), and the question type (threshold)\r\n          <br/>\r\n          <input type=\"text\" ref={this.questionKeyRef} \r\n            onInput={() => this.handleChange(\"threshold-key\", this.questionKeyRef.current.value, this.props.count)}/>\r\n          \r\n          <br/><br/>\r\n          <button onClick={this.delete.bind(this)}>Delete Question</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Histogram;","import React, { Component } from 'react';\r\nimport Dropzone, { useDropzone } from \"react-dropzone\";\r\nimport Histogram from './Histogram.js';\r\nimport './HistogramResearch.css';\r\nimport '../../../../src/App.css';\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { \r\n  getColData\r\n} from '../../../actions/dataActions'\r\n\r\nclass HistogramResearch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dataReceived: false,\r\n      fileChosen: ''\r\n    }\r\n\r\n    this.delete = this.delete.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.handleDrop = this.handleDrop.bind(this);\r\n    this.handleSelectedFile = this.handleSelectedFile.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const username = this.props.auth.user.username;\r\n    this.props.getColData(username, \"itemData\");\r\n  }\r\n\r\n  saveFile(type, name, content) {\r\n    this.props.saveFile(type, name, content);\r\n  }\r\n\r\n  handleChange(key, value, count) {\r\n    this.props.handleChange(key, value, count);\r\n  }\r\n\r\n  delete() {\r\n    this.props.delete(this.props.count);\r\n  }\r\n\r\n  getCount() {\r\n    this.props.getCount(this.props.count);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n    console.log(e.target.name);\r\n  }\r\n\r\n  handleDrop(acceptedFiles) {\r\n    console.log(acceptedFiles.map(file => {\r\n      acceptedFiles.forEach((file) => {\r\n\r\n        const normalCurveFiles = this.props.dataFlowColData.filter(\r\n          item => item.itemType == \"threshold\");\r\n        var fileNames = normalCurveFiles.map(item => item.fileName);\r\n        if (fileNames.includes(file.name)) {\r\n          alert(\"File name already exists. Please upload a file\" +  \r\n            \" with a unique name.\");\r\n          this.setState({ dataReceived: false });\r\n        } else {\r\n          this.handleChange(\"FileName\", file.name, this.props.count);\r\n\r\n          const reader = new FileReader()\r\n          reader.onabort = () => console.log('file reading was aborted')\r\n          reader.onerror = () => console.log('file reading has failed')\r\n          reader.onload = () => {\r\n            // Do whatever you want with the file contents\r\n            const fileText = reader.result;\r\n            const jsonData = JSON.parse(fileText);\r\n  \r\n            this.handleChange(\"FileContent\", jsonData, this.props.count);\r\n              if (this.props.files.length == 0) {\r\n                this.saveFile(\"threshold\", file.name, jsonData);\r\n              } else {\r\n                const names = this.props.files.map(item => item.fileName);\r\n                if (!names.includes(file.name)) {\r\n                  this.saveFile(\"threshold\", file.name, jsonData);\r\n                }\r\n              }\r\n  \r\n            this.setState({\r\n              data: jsonData[\"data\"],\r\n              width: jsonData[\"width\"],\r\n              height: jsonData[\"height\"],\r\n              id: HistogramResearch,\r\n              step: jsonData[\"step\"],\r\n              defaultValue: jsonData[\"defaultValue\"],\r\n              dataReceived: true,\r\n              fileText: fileText,\r\n              jsonData: jsonData[\"data\"]\r\n            });\r\n          };\r\n          reader.readAsText(file);\r\n        };\r\n      });\r\n    }));\r\n    this.setState({\r\n      fileNames: acceptedFiles.map(file => file.name)\r\n    });\r\n  }\r\n\r\n  handleSelectedFile() {\r\n    this.handleChange(\"FileName\", this.state.fileChosen, this.props.count);\r\n\r\n    const jsonData = this.props.dataFlowColData.filter(item => \r\n      item.fileName == this.state.fileChosen)[0].fileContent;\r\n\r\n    this.handleChange(\"FileContent\", jsonData, this.props.count);\r\n\r\n    this.setState({\r\n      data: jsonData[\"data\"],\r\n      width: jsonData[\"width\"],\r\n      height: jsonData[\"height\"],\r\n      id: HistogramResearch,\r\n      step: jsonData[\"step\"],\r\n      defaultValue: jsonData[\"defaultValue\"],\r\n      dataReceived: true,\r\n      jsonData: jsonData[\"data\"]\r\n    });\r\n  }  \r\n\r\n\r\n  render() {\r\n    if (this.state.dataReceived) {\r\n      return (\r\n        <div>\r\n          <Histogram\r\n            data={this.state.data}\r\n            width={this.state.width}\r\n            height={this.state.height}\r\n            step={this.state.step}\r\n            delete={this.delete}\r\n            handleChange={this.handleChange}\r\n            count={this.props.count}\r\n            class=\"center\" />\r\n          <br />\r\n        </div>\r\n      )\r\n    }\r\n    else {\r\n      const histogramFiles = this.props.dataFlowColData.filter(\r\n        item => item.itemType == \"threshold\");\r\n      console.log(histogramFiles);\r\n      var fileNames = histogramFiles.map(item => item.fileName);\r\n      fileNames.unshift(\"Select File\");\r\n      const renderOption = item => <option value={item}>{item}</option>\r\n      const fileOptions = fileNames.map(renderOption);\r\n\r\n      return (\r\n        <div className=\"boxed\">\r\n          Select previously uploaded files: \r\n          <br/>\r\n          <select name=\"fileChosen\" value={this.state.fileChosen} onChange={this.onChange}>\r\n            {fileOptions}\r\n          </select>\r\n          <button onClick={this.handleSelectedFile}>OK</button>\r\n          <br/>\r\n          <Dropzone\r\n            onDrop={this.handleDrop}\r\n            accept=\"application/JSON, .json\"\r\n          >\r\n            {({ getRootProps, getInputProps }) => (\r\n              <div {...getRootProps({ className: \"dropzone\" })}>\r\n                <input {...getInputProps()} />\r\n                <p>Drag'n'drop files, or click to select files (must be valid JSON file)</p>\r\n              </div>\r\n            )}\r\n          </Dropzone>\r\n          <br/>\r\n          <button onClick={this.delete.bind(this)}>Delete</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nHistogramResearch.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n  getColData: PropTypes.func.isRequired,\r\n  dataFlowColData: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  dataFlowColData: state.dataFlow.colData\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getColData }\r\n)(HistogramResearch);","import React, { Component } from 'react';\r\nimport './TabList.css';\r\nimport '../TabBuilder/TabBuilder'\r\nimport TabBuilder from '../TabBuilder/TabBuilder'\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// ###TODO###: import your component here\r\nimport SliderTab from '../items/Slider/SliderTab';\r\nimport StaticText from '../items/StaticText/StaticText';\r\nimport NormalCurve from '../items/NormalCurve/NormalCurve';\r\nimport NormalCurveResearch from '../items/NormalCurve/NormalCurveResearch';\r\nimport HistogramResearch from '../items/Threshold/HistogramResearch';\r\n\r\nimport { \r\n  sendFile,\r\n  getStudyInfo\r\n} from '../../actions/dataActions'\r\n\r\nconst axios = require('axios');\r\n\r\n// Allows Psych researchers to configure an experiment \r\nclass TabList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      children: [],\r\n      count: 0,\r\n      output: {},\r\n      deleted: [],\r\n      complete: false,\r\n      exptName: '',\r\n      files: [],\r\n      expt: {}\r\n    }\r\n    this.myRef = React.createRef();\r\n    this.submitRef = React.createRef();\r\n    this.nameRef = React.createRef();\r\n\r\n    this.builderFunction = this.builderFunction.bind(this);\r\n    this.importQuestion = this.importQuestion.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.delete = this.delete.bind(this);\r\n    this.getCount = this.getCount.bind(this);\r\n    this.outputCreate = this.outputCreate.bind(this);\r\n    this.checkOutput = this.checkOutput.bind(this);\r\n    this.configDataToItem = this.configDataToItem.bind(this);\r\n    this.saveFile = this.saveFile.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.appendToKeysArr = this.appendToKeysArr.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    this.props.getStudyInfo(username, studyName);\r\n    // console.log(this.props.location.state);\r\n    if (this.props.location.state != null) {\r\n      if (!this.props.location.state.newExpt) {\r\n        const thisExpt = this.props.location.state.exptName;\r\n        if (!this.props.experiments.length == 0) {\r\n          const exptObj =\r\n            this.props.experiments.find(item => item.exptName == thisExpt);\r\n          this.setState({ expt: exptObj });\r\n          const qKeys = Object.keys(exptObj).filter(key => key.charAt(0) == \"q\");\r\n          var qArr = [];\r\n          qKeys.forEach(key => qArr.push(exptObj[key]));\r\n          qArr.forEach(q => {\r\n            this.configDataToItem(q, true);\r\n            this.setState({ count: this.state.count += 1 });\r\n          });\r\n          console.log(\"finished rendering items\");\r\n        };\r\n      };\r\n    };\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  // ###TODO###: Add more cases here for TabList to display \r\n  //             Follow the format of the provided components below\r\n  /**\r\n   * Pushes more component to this.state so that render() can present\r\n   * individual components to the frontend\r\n   * @param {[String]} tabDefine [component name]\r\n   */\r\n  builderFunction = (tabDefine) => {\r\n    var arr = this.state.children;\r\n    switch (tabDefine) {\r\n      case \"slider\":\r\n        arr.push({ \r\n          id: this.state.count, \r\n          tab: <SliderTab getCount={this.getCount} \r\n                  delete={this.delete} count={this.state.count} \r\n                  handleChange={this.handleChange} \r\n                  key={this.state.count.toString()}\r\n                  appendToKeysArr={this.appendToKeysArr} /> \r\n        })\r\n        break;\r\n      case \"static-text\": \r\n        arr.push({\r\n          id: this.state.count,\r\n          tab: <StaticText getCount={this.getCount}\r\n                  delete={this.delete} count={this.state.count}\r\n                  handleChange={this.handleChange}\r\n                  key={this.state.count.toString()}/>\r\n        })\r\n        break;\r\n      case \"normal-curve\": \r\n        arr.push({\r\n          id: this.state.count,\r\n          tab: <NormalCurveResearch getCount={this.getCount} \r\n                  delete={this.delete} count={this.state.count} \r\n                  handleChange={this.handleChange} \r\n                  files={this.state.files} saveFile={this.saveFile}\r\n                  key={this.state.count.toString()}/> \r\n        })\r\n        break;  \r\n      case \"threshold\":\r\n        arr.push({\r\n          id: this.state.count,\r\n          tab: <HistogramResearch getCount={this.getCount} \r\n                  delete={this.delete} count={this.state.count}\r\n                  handleChange={this.handleChange} \r\n                  files={this.state.files} saveFile={this.saveFile}\r\n                  key={this.state.count.toString()}/>\r\n        })\r\n        break;\r\n      default:\r\n        arr = <div>Unknown Element</div>\r\n    }\r\n\r\n    var curOutput = this.state.output;\r\n    curOutput[this.state.count.toString()] = { \"Type\": tabDefine };\r\n    var newCount = this.state.count + 1;\r\n    this.setState({ children: arr, count: newCount, output: curOutput, complete: false });\r\n  }\r\n\r\n  /** ###TODO###: add more switch statements here when adding a new component\r\n   *  ###TODO###: the switch statement is not super necessary, pls improve\r\n   * Convert question type to its key in json\r\n   * @param {[String]} qType [question type]\r\n   */\r\n  mapQTypetoQKey(qType) {\r\n    switch(qType) {\r\n      case \"slider\":\r\n        return \"slider-question-key\"\r\n      case \"static-text\":\r\n        return \"static-text-key\"\r\n      case \"normal-curve\":\r\n        return \"normal-curve-question-key\"\r\n      case \"threshold\":\r\n        return \"threshold-key\"\r\n      default:\r\n        return \"\"\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Grab question data based on questionKey and call configDataToItem\r\n   * to push selected component to this.state to be displayed with \r\n   * default values based on latest user input\r\n   * @param {[String]} exptName [experiment name]\r\n   * @param {[String]} questionKey [question key labeled by users for csvColName]\r\n   */\r\n  importQuestion(exptName, questionKey) {\r\n    const thisExpt = this.props.experiments.filter(item => \r\n      item[\"exptName\"] == exptName)[0];\r\n    const thisExptQKeys = Object.keys(thisExpt).filter(k => \r\n      k.charAt(0) == \"q\");\r\n    // the question key (e.g. q1) that user has selected\r\n    const thisQKey = thisExptQKeys.filter(k => {\r\n      const key = this.mapQTypetoQKey(thisExpt[k][\"Type\"]);\r\n      return thisExpt[k][key] == questionKey;\r\n    })[0];\r\n    const questionToDisplay = thisExpt[thisQKey];\r\n    // console.log(questionToDisplay);\r\n\r\n    // questions will show up once an expt type is pushed to this.state.children\r\n    // by configDataToItem\r\n    this.configDataToItem(questionToDisplay, false);\r\n  }\r\n\r\n  // ###### TODO ######: Add your component here\r\n  /**\r\n   * Push selected react component to this.state.children to be displayed \r\n   * Used when importing or editing question. \r\n   * @param {[Object]} question [a json object containing a question's data]\r\n   * @param {[Boolean]} editing [whether the component is displayed for \r\n   *                             \"Edit Experiment\" feature]\r\n   */\r\n  configDataToItem(question, editing) {\r\n    var arr = this.state.children;\r\n    switch (question[\"Type\"]) {\r\n      case \"slider\":\r\n        arr.push({ \r\n          id: this.state.count, \r\n          tab: <SliderTab \r\n                  defaultQ={question[\"Question\"]}\r\n                  defaultMin={question[\"lowRange\"]}\r\n                  defaultMax={question[\"highRange\"]}\r\n                  imported={true}\r\n                  editing={editing}\r\n                  getCount={this.getCount} \r\n                  delete={this.delete} count={this.state.count} \r\n                  handleChange={this.handleChange} \r\n                  key={this.state.count.toString()}\r\n                  appendToKeysArr={this.appendToKeysArr} /> \r\n        })\r\n        break;\r\n      case \"static-text\": \r\n        arr.push({\r\n          id: this.state.count,\r\n          tab: <StaticText \r\n                  qToDisplay={question}\r\n                  imported={true}\r\n                  editing={editing}\r\n                  getCount={this.getCount}\r\n                  delete={this.delete} count={this.state.count}\r\n                  handleChange={this.handleChange}\r\n                  key={this.state.count.toString()}/>\r\n        })\r\n        break;\r\n      case \"normal-curve\": \r\n        arr.push({\r\n          id: this.state.count,\r\n          tab: <NormalCurveResearch \r\n                  qToDisplay={question}\r\n                  imported={true}\r\n                  editing={editing}\r\n                  getCount={this.getCount} \r\n                  delete={this.delete} count={this.state.count} \r\n                  handleChange={this.handleChange} \r\n                  files={this.state.files} saveFile={this.saveFile}\r\n                  key={this.state.count.toString()}/> \r\n        })\r\n        break;  \r\n      case \"threshold\":\r\n        arr.push({\r\n          id: this.state.count,\r\n          tab: <HistogramResearch getCount={this.getCount} \r\n                  delete={this.delete} count={this.state.count}\r\n                  handleChange={this.handleChange} \r\n                  files={this.state.files} saveFile={this.saveFile}\r\n                  key={this.state.count.toString()}/>\r\n        })\r\n        break;\r\n      default:\r\n        arr = <div>Unknown Element</div>\r\n    };\r\n\r\n    var curOutput = this.state.output;\r\n    curOutput[this.state.count.toString()] = { \"Type\": question[\"Type\"] };\r\n    var newCount = this.state.count + 1;\r\n    this.setState({ children: arr, count: newCount, output: curOutput, complete: false });    \r\n  }\r\n\r\n  /**\r\n   * Put / modify the key and value pair in the final output JSON object\r\n   * @param {[String]} key [key of json object to be updated]\r\n   * @param {[Any]} value [value to be added / modified]\r\n   * @param {[Number]} count [numerical order of the question json obj]\r\n   */\r\n  handleChange(key, value, count) {\r\n    var curOutput = this.state.output;\r\n    curOutput[count.toString()][key] = value;\r\n    this.setState({ output: curOutput });\r\n  }\r\n\r\n  // DEPRECATED method\r\n  // it's only applied to SliderTab which we don't use anymore\r\n  appendToKeysArr(objType, nameType, csvColName, count) {\r\n    var curOutput = this.state.output;\r\n    const objKeys = Object.keys(curOutput[count.toString()]);\r\n    // console.log(objKeys);\r\n    if (objKeys.includes(objType)) {\r\n      curOutput[count.toString()][objType][nameType] = csvColName;\r\n    } else {\r\n      curOutput[count.toString()][objType] = {};\r\n      curOutput[count.toString()][objType][nameType] = csvColName;\r\n    }\r\n    console.log(curOutput);\r\n    // curOutput[count.toString()][\"csvColNames\"]\r\n  }\r\n\r\n  /**\r\n   * Delete a question based on its numerical order\r\n   * @param {[Number]} id [ID of question to be deleted]\r\n   */\r\n  delete(id) {\r\n    var newDelete = this.state.deleted;\r\n    newDelete.push(id);\r\n    this.setState({ deleted: newDelete });\r\n  }\r\n\r\n  getCount(count) {\r\n    return count;\r\n  }\r\n\r\n  // Action: put newly uploaded files into this.state. \r\n  //         All newly uploaded files will be sent to database as JSON objs\r\n  saveFile(type, name, content) {\r\n    const newFile = {\r\n      \"itemType\": type,\r\n      \"fileName\": name,\r\n      \"fileContent\": content\r\n    };\r\n    this.setState({ files: this.state.files.concat(newFile) });\r\n  }\r\n\r\n  // validating input fields. \r\n  // ****** TODO ******\r\n  // improve this function such that it checks if user has entered valid inputs\r\n  checkOutput(obj) {\r\n    var int = 0;\r\n    var complete = true;\r\n    while ((int.toString()) in obj) {\r\n      var elem = obj[int.toString()];\r\n      switch (elem[\"Type\"]) {\r\n        case \"slider\":\r\n          var lowIs = \"lowRange\" in elem;\r\n          var highIs = \"highRange\" in elem;\r\n          var qIs = \"Question\" in elem;\r\n          if (lowIs && highIs && qIs) {\r\n            var lowNum = !isNaN(elem[\"lowRange\"]);\r\n            var highNum = !isNaN(elem[\"highRange\"]);\r\n            var highLow = parseInt(elem[\"highRange\"]) > parseInt(elem[\"lowRange\"]);\r\n            if (highLow && lowNum && highNum) {\r\n              complete = complete && true;\r\n            }\r\n            else {\r\n              complete = false;\r\n            }\r\n          }\r\n          else {\r\n            complete = false;\r\n          }\r\n          break;\r\n        default:\r\n          complete = false;\r\n      case \"normal-curve\":\r\n        complete = true;\r\n      }\r\n      int++;\r\n    }\r\n    return complete;\r\n  }\r\n\r\n  /**\r\n   * Create a final json object containing an experiment's config data\r\n   * and send the object to database\r\n   * @param {[Boolean]} newExpt [whether the experiment is new]\r\n   */\r\n  outputCreate(newExpt) {\r\n    var obj = {};\r\n    var index = {};\r\n    // the following block adds the mapping of cvs columns to question fields\r\n    this.state.children\r\n      .filter(item => this.state.deleted.indexOf(item.id) === -1)\r\n      .map((item) => { \r\n        obj[item.id.toString()] = this.state.output[item.id.toString()];\r\n        const exptItem = this.state.output[item.id.toString()];\r\n        switch (exptItem[\"Type\"]) {\r\n          case \"static-text\":\r\n            index[exptItem[\"static-text-key\"]] = exptItem[\"Static Text\"];\r\n          case \"normal-curve\":\r\n            index[exptItem[\"normal-curve-question-key\"]] = exptItem[\"Question\"];\r\n            index[exptItem[\"normal-curve-question-key\"] + \".\" + exptItem[\"normal-curve-legend-key1\"]] = exptItem[\"graph1key\"];\r\n            index[exptItem[\"normal-curve-question-key\"] + \".\" + exptItem[\"normal-curve-legend-key2\"]] = exptItem[\"graph2key\"];\r\n          case \"threshold\":\r\n            index[exptItem[\"threshold-key\"]] = exptItem[\"Question\"];\r\n        }\r\n      });\r\n    // var validName = this.nameRef.current.value.length > 0;\r\n    // if (!(0 in obj) || !this.checkOutput(obj) || !validName) {\r\n    // if (!validName) {\r\n    if (false) {\r\n      alert(\"You have not filled out all fields, or have entered an invalid value!\");\r\n    }\r\n    else {\r\n      var finalObj = {};\r\n      finalObj[\"exptName\"] = this.nameRef.current.value;\r\n      var int = 0;\r\n      while (int < this.state.count) {\r\n        if ((int.toString()) in obj) {\r\n          finalObj[\"q\" + int.toString()] = obj[int.toString()];\r\n        }\r\n        int++;\r\n      }\r\n      finalObj[\"count\"] = int;\r\n      delete index[\"undefined\"];\r\n      finalObj[\"index\"] = index;\r\n\r\n      console.log(finalObj);\r\n\r\n      const username = this.props.auth.user.username;\r\n      const studyName = this.props.match.params.studyName;\r\n\r\n      if (!this.state.files.length == 0) {\r\n        this.state.files.map(item => this.props.sendFile(username, item))\r\n      };\r\n\r\n      // If this experiment is new, PUT request to append to the \"experiments\"\r\n      // array associated with studyName in the studyName's file in \"/info\"\r\n      if (newExpt) {\r\n        axios\r\n        .put(\r\n          'https://test-api-615.herokuapp.com/api/feedback/' + username +\r\n          '/info/studyName-' + studyName + '/experiments',\r\n          finalObj\r\n        )\r\n        .then(res => {\r\n          console.log(res)\r\n        })\r\n        .then(function (response) {\r\n          alert(\"Your experiment has been successfully created\");\r\n          window.location.reload(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      } else {\r\n        // the experiment is not new -> the experiment is in \"Edit Experiment\"\r\n        // mode, so we need to query the specific exptName and update that \r\n        // element by deleting the old one and appending the new expt json obj\r\n        // to the \"experiments\" array associated with studyName\r\n        if (this.props.location.state != null) {\r\n          const exptName = this.props.location.state.exptName;\r\n          axios\r\n          .delete('https://test-api-615.herokuapp.com/api/feedback/' + \r\n            username + '/info/studyName-' + studyName + '/experiments/exptName-' +\r\n            exptName)\r\n          .then(res => {\r\n            axios\r\n            .put(\r\n              'https://test-api-615.herokuapp.com/api/feedback/' + username +\r\n              '/info/studyName-' + studyName + '/experiments',\r\n              finalObj\r\n            )\r\n            .then(res => {\r\n              console.log(res)\r\n            })\r\n            .then(function (response) {\r\n              alert(\"Your experiment has been successfully updated\");\r\n              window.location.reload(false);\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n          });\r\n        }\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    const studyLink = \"/\" + username + \"/\" + studyName;\r\n\r\n    var obj = {};\r\n    this.state.children\r\n      .filter(item => this.state.deleted.indexOf(item.id) === -1)\r\n      .map((item) => { obj[item.id.toString()] = this.state.output[item.id.toString()] });\r\n    var finalObj = {};\r\n    // finalObj[\"exptName\"] = this.nameRef.current.value;\r\n    var int = 0;\r\n    while (int < this.state.count) {\r\n      if ((int.toString()) in obj) {\r\n        finalObj[\"q\" + int.toString()] = obj[int.toString()];\r\n      }\r\n      int++;\r\n    }\r\n    finalObj[\"count\"] = int;\r\n    return (\r\n      <div ref={this.myRef}>\r\n        <h2>Experiment Builder</h2>\r\n        Back to <p> </p>\r\n        <Link to={studyLink}>\r\n          {studyName}\r\n        </Link>\r\n        <div>\r\n          {/* <button onClick={() => console.log(this.state.children)}>see children</button> */}\r\n          <form action=\"/submit\" method=\"POST\" className=\"unit\">\r\n            <p>Enter a name for this experiment </p>\r\n            <input ref={this.nameRef}\r\n              // value={this.state.exptName}\r\n              // onChange={this.onChange}\r\n              defaultValue={this.state.expt.exptName}\r\n              type=\"text\" id=\"userid\" name=\"exptName\" /><br />\r\n            <b>all experiments in a study must have unique names</b>\r\n          </form>\r\n          {/* Display components in this.state.children */}\r\n          {\r\n            this.state.children\r\n              .filter(item => this.state.deleted.indexOf(item.id) === -1)\r\n              .map((item) => {\r\n                return item.tab;\r\n              })\r\n          }\r\n          <TabBuilder \r\n            build={this.builderFunction} \r\n            importQuestion={this.importQuestion}\r\n            username={this.props.match.params.username}\r\n            studyName={this.props.match.params.studyName} />\r\n          <br/>\r\n          {/* Add condition here. Submit / Update Experiment */}\r\n          {\r\n            this.props.location.state != null \r\n            ?\r\n            // based on whether researchers are creating a new experiment or\r\n            // editing an experiment, we show different buttons\r\n            <div>\r\n              {\r\n                this.props.location.state.newExpt\r\n                ?\r\n                <div className=\"extraPad\">\r\n                  <button onClick={() => this.outputCreate(true)} ref={this.submitRef} type=\"submit\" value=\"Submit\" className=\"btn\">Submit</button>\r\n                </div>\r\n                :\r\n                <div className=\"extraPad\">\r\n                  <button onClick={() => this.outputCreate(false)} ref={this.submitRef} type=\"submit\" value=\"Submit\" className=\"btn\">Update Experiment</button>\r\n                  <p style={{ opacity: 0 }}> place holder </p> \r\n                  <button className=\"btn\" onClick={() => this.props.history.push(studyLink)}>\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              }\r\n            </div>\r\n            :\r\n            <div className=\"extraPad\">\r\n              <button onClick={() => this.outputCreate(true)} ref={this.submitRef} type=\"submit\" value=\"Submit\" className=\"btn\">Submit</button>\r\n            </div>\r\n          }\r\n        </div>\r\n        <br/>\r\n        {/* <button onClick={() => console.log(finalObj)}>Show finalObj</button><br/>\r\n        <button onClick={() => console.log(this.state.files)}>Show files</button> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTabList.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n  dataFlowDBInfo: PropTypes.array.isRequired,\r\n  sendFile: PropTypes.func.isRequired,\r\n  dataFlowFileName: PropTypes.string.isRequired,\r\n  getStudyInfo: PropTypes.func.isRequired,\r\n  experiments: PropTypes.array.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  dataFlowDBInfo: state.dataFlow.dbInfo,\r\n  dataFlowFileName: state.dataFlow.fileName,\r\n  experiments: state.dataFlow.studyInfo\r\n});\r\n\r\n// export default TabList;\r\nexport default connect(\r\n  mapStateToProps,\r\n  { sendFile, getStudyInfo }\r\n)(TabList);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/**\r\n * Navigation bar\r\n */\r\nclass Navbar extends Component {\r\n  render() {\r\n    const userIsLoggedIn = this.props.auth.isAuthenticated;\r\n    return (\r\n      <div className=\"navbar-fixed\">\r\n        <nav className=\"z-depth-0\">\r\n          <div className=\"nav-wrapper white\">\r\n            <Link to=\"/\">\r\n              Home\r\n            </Link>\r\n            <br/>\r\n            {userIsLoggedIn ? '' : \r\n              <Link to=\"/register\">Register</Link>}\r\n            <br/>\r\n            {userIsLoggedIn ? \r\n              <Link to=\"/dashboard\"> Dashboard </Link> \r\n              : \r\n              <Link to=\"/login\">Login</Link>}\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// export default Navbar;\r\nNavbar.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/**\r\n * Display researcher name on top of webpage\r\n */\r\nclass Landing extends Component {\r\n  componentWillMount() {\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.auth.isAuthenticated) {\r\n      return (\r\n        <div className=\"container\">\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"container\">\r\n          Scientist: <b>{this.props.auth.user.username}</b>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nLanding.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {}\r\n)(Landing);\r\n\r\n// export default Landing;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>\r\n          Welcome to Psych Researcher App!\r\n          </h1>\r\n          Please click on this <p></p>\r\n        <a target=\"_blank\" href=\"https://github.com/statistical-perceptions/statistical-perceptions.github.io\">link</a> <p></p>\r\n          to view researcher user guide.\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nHomePage.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {}\r\n)(HomePage);\r\n\r\n// export default Landing;","import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport classnames from \"classnames\";\r\n\r\nimport { registerUser } from \"../../actions/authActions\";\r\n\r\n/**\r\n * Register user\r\n */\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {}\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page,\r\n    // should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Change entries in this.state\r\n   * @param {[Event]} e [An event that's subject to change]\r\n   */\r\n  onChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  /**\r\n   * Register user\r\n   * @param {[Event]} e [An event]\r\n   */\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const newUser = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n      password2: this.state.password2\r\n    };\r\n    this.props.registerUser(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    const errors = this.state.errors;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Register below</h1>\r\n        <p className=\"grey-text text-darken-1\">\r\n          Already have an account?\r\n        <Link to=\"/login\">Log in</Link>\r\n        </p>\r\n        <form noValidate onSubmit={this.onSubmit}>\r\n          Username:\r\n          <input\r\n            onChange={this.onChange}\r\n            value={this.state.username}\r\n            error={errors.username}\r\n            id=\"username\"\r\n            type=\"text\"\r\n            className={classnames(\"\", {\r\n              // userExists comes from res json message in API\r\n              invalid: errors.userExists\r\n            })} />\r\n          <span className=\"red-text\">{errors.userExists}</span>\r\n          <br />\r\n          <br />\r\n            Password:\r\n            <input\r\n              onChange={this.onChange}\r\n              value={this.state.password}\r\n              error={errors.password}\r\n              id=\"password\"\r\n              type=\"password\"\r\n              className={classnames(\"\", {\r\n              invalid: errors.password})} />\r\n          <span className=\"red-text\">{errors.password}</span>\r\n          <br />\r\n          <br />\r\n            Confirm Password:\r\n            <input\r\n              onChange={this.onChange}\r\n              value={this.state.password2}\r\n              error={errors.password2}\r\n              id=\"password2\"\r\n              type=\"password\"\r\n              className={classnames(\"\", {\r\n                invalid: errors.password2})} />\r\n          <span className=\"red-text\">{errors.password2}</span>\r\n          <br />\r\n          <br />\r\n          <button type=\"submit\" className=\"btn\">\r\n            Register\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\n// map state from redux props to use inside components\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\n\r\n// linking redux to Register component\r\n// withRouter makes it easy to redirect within a component\r\nexport default connect(\r\n  mapStateToProps,\r\n  { registerUser }\r\n)(withRouter(Register));","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\n/**\r\n * Login a user\r\n */\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      errors: {}\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page,\r\n    // should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      // push user to dashboard when they login\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change entries in this.state\r\n   * @param {[Event]} e [An event that's subject to change]\r\n   */\r\n  onChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  /**\r\n   * Login user\r\n   * @param {[Event]} e [An event]\r\n   */\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const userData = {\r\n      username: this.state.username,\r\n      password: this.state.password\r\n    };\r\n    // we are redirecting wthin a component, so we don't need to\r\n    // pass in this.props.history\r\n    this.props.loginUser(userData);\r\n  };\r\n\r\n  render() {\r\n    const errors = this.state.errors;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Log in</h1>\r\n        <form noValidate onSubmit={this.onSubmit}>\r\n          Username:\r\n          <input\r\n            onChange={this.onChange}\r\n            value={this.state.username}\r\n            error={errors.username}\r\n            id=\"username\"\r\n            type=\"text\"\r\n            className={classnames(\"\", {\r\n              invalid: errors.userNotFound\r\n              // || USERNAME NOT FOUND\r\n            })} />\r\n          <span className=\"red-text\">{errors.userNotFound}</span>\r\n          <br />\r\n          <br />\r\n          Password:\r\n          <input\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            id=\"password\"\r\n            type=\"password\"\r\n            className={classnames(\"\", {\r\n              invalid: errors.pwdIncorrect\r\n            })} />\r\n          <span className=\"red-text\">{errors.pwdIncorrect}</span>\r\n          <br />\r\n          <br />\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Log in\"\r\n            className=\"btn\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loginUser }\r\n)(Login);","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport { logoutUser } from \"../../actions/authActions\";\r\n\r\nimport {\r\n  addStudyName,\r\n  getDBInfo\r\n} from \"../../actions/dataActions\";\r\n\r\nimport './Dashboard.css';\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      studyName: ''\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onAddStudy = this.onAddStudy.bind(this);\r\n    this.onDeleteStudy = this.onDeleteStudy.bind(this);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  /**\r\n   * load experiment names when the page loads\r\n   */\r\n  componentWillMount() {\r\n    const username = this.props.auth.user.username;\r\n    this.props.getDBInfo(username); // dbInfo will be in the store now\r\n  }\r\n\r\n  /**\r\n   * Return names of studies created by user\r\n   */\r\n  getStudyNames() {\r\n    const allInfo = this.props.dataFlowDBInfo;\r\n    return allInfo.map(item => {\r\n      const allKeys = Object.keys(item);\r\n      if (allKeys.includes(\"studyName\")) {\r\n        const username = this.props.auth.user.username;\r\n        const link = \"/\" + username + \"/\" + item.studyName;\r\n        return (\r\n          <div className=\"container\">\r\n            <p id={item.studyName}>\r\n              {item.studyName} <p> </p> \r\n              <Link to={link}>\r\n                View\r\n              </Link> <p> </p>\r\n              <button id={item.studyName} onClick={this.onDeleteStudy}>\r\n                Delete\r\n              </button>\r\n            </p>\r\n          </div>\r\n        )\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Call addStudyName from redux actions\r\n   */\r\n  onAddStudy() {\r\n    const username = this.props.auth.user.username;\r\n    this.props.addStudyName(username, this.state.studyName);\r\n  };\r\n\r\n  /**\r\n   * DELETE request to remove collection named [studyName] and all other \r\n   * collections associated with [studyName]\r\n   * @param {[Event]} e [an event triggered by deleting a study]\r\n   */\r\n  onDeleteStudy(e) {\r\n    const username = this.props.auth.user.username;\r\n    const studyName = e.target.id;\r\n    var confirm = window.confirm(\"Are you sure you want to delete this\" + \r\n      \" study [\" + studyName + \"] and all its experiment data?\");\r\n    if (confirm) {\r\n      // delete the study doc in /info collection\r\n      axios\r\n        .delete('https://test-api-615.herokuapp.com/api/feedback/' + \r\n          username + '/info/studyName-' + studyName);\r\n      // delete all deployed experiment collections in user's database\r\n      axios\r\n        .delete('https://test-api-615.herokuapp.com/api/feedback/' + \r\n          username + \"/all\", { data: { studyName: studyName }})\r\n        .then(res => {\r\n          alert(\"You have succesfully deleted [\" + studyName + \"] and all\" + \r\n            \" its experiment data!\");\r\n          window.location.reload(true);\r\n        })\r\n    } else {\r\n      alert(\"Deletion cancelled!\");\r\n      window.location.reload(true);\r\n    }\r\n  }\r\n\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n\r\n  render() {\r\n    const username = this.props.auth.user.username;\r\n    return (\r\n      <div className=\"container\">\r\n        <h2>Dashboard</h2>\r\n\r\n        {/* Deprecated, used to direct researchers to configure normal curve items on google colab */}\r\n        {/* <div className=\"boxed\" style={{ width: \"60%\", margin: \"auto\" }}>\r\n          <br/>\r\n          <b>Configure Experiment Types:</b> <br/>\r\n          <a href=\"https://colab.research.google.com/drive/1yleVQB_CrNJ5Z3v-YPatW2XqAD7yS8yp?usp=sharing\" target=\"_blank\">Normal Curves</a>\r\n          <div><br/></div>\r\n        </div> */}\r\n\r\n        <h3>Add a Study</h3>\r\n        Enter a name for your study: <br/>\r\n        <input type=\"text\" name=\"studyName\"\r\n          value={this.state.studyName} onChange={this.onChange} />\r\n        <button onClick={this.onAddStudy}>Add Study</button>\r\n        <br/>\r\n        Please do <b>not</b> use \"-\" in the name\r\n\r\n        <br/><br/>\r\n        <div className=\"boxed\" style={{ width: \"60%\", margin: \"auto\" }}>\r\n          <br />\r\n          {this.getStudyNames()}\r\n          <br />\r\n        </div>\r\n\r\n        <br/><br/>\r\n        <button\r\n          onClick={this.onLogoutClick}\r\n          className=\"btn\">\r\n          Logout\r\n        </button>\r\n        <div><br/><br/></div>\r\n      </div>\r\n    )\r\n  };\r\n};\r\n\r\nDashboard.propTypes = {\r\n  // Proptype.type, the type here must match initialState of reducer\r\n  logoutUser: PropTypes.func.isRequired,\r\n  addStudyName: PropTypes.func.isRequired,\r\n  getDBInfo: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  dataFlowDBInfo: PropTypes.array.isRequired\r\n};\r\n\r\n// interaction between reducer and store (state), connect to props \r\n// for components to use\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  dataFlowDBInfo: state.dataFlow.dbInfo\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser, addStudyName, getDBInfo }\r\n)(Dashboard);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\n\r\nimport {\r\n  getStudyInfo,\r\n  createExptCol,\r\n  getColNames,\r\n  saveAddInfo\r\n} from \"../../actions/dataActions\"\r\n\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * Create, Edit, Manage experiments in a study\r\n */\r\nclass ConfigStudy extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checked: true,\r\n      deployed: Boolean\r\n    };\r\n\r\n    this.deployExpts = this.deployExpts.bind(this);\r\n    this.changeState = this.changeState.bind(this);\r\n    this.onDeploy = this.onDeploy.bind(this);\r\n    this.onChecked = this.onChecked.bind(this);\r\n    this.onDeleteExperiment = this.onDeleteExperiment.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const username = this.props.auth.user.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    // Get whether studies in this experiment are randomized. \r\n    // variable is stored in the file containing studyName\r\n    axios\r\n      .get('https://test-api-615.herokuapp.com/api/feedback/' + username +\r\n        '/info/studyName-' + studyName)\r\n      .then(res => {\r\n        const dataToPut = {\r\n          \"randomize\": true\r\n        };\r\n        console.log(res.data);\r\n        // Deal with studies created by researchers before I implemented \r\n        // this randomize indicator\r\n        if (!Object.keys(res.data).includes(\"randomize\")) {\r\n          this.putRandomize(username, studyName, dataToPut);\r\n        } else {\r\n          this.setState({ checked: res.data.randomize });\r\n        };\r\n      });\r\n    this.props.getStudyInfo(username, studyName);\r\n    this.props.getColNames(username);\r\n    // if there are more than 1 experiment collections associated with the \r\n    // study, we mark the state of this experiment as { deployed : true }\r\n    // once deployed, researchers cannot turn on/off randomization\r\n    axios\r\n      .get('https://test-api-615.herokuapp.com/api/' + username + \"/collections\")\r\n      .then(res => {\r\n        const thisSudyDeployedExpt = res.data.filter(name => \r\n          name.split(\"-\")[0] == studyName);\r\n        this.setState({ deployed: thisSudyDeployedExpt.length >= 1 });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get names of collections that are already deployed\r\n   */\r\n  processColNames() {\r\n    const studyName = this.props.match.params.studyName;\r\n    // const processedArr = this.props.colNames.filter(name => name !== \"info\");\r\n    // const currentStudyExpts = processedArr.filter(name =>\r\n    //   name.split('-')[0] == studyName);\r\n    const currentStudyExpts = this.props.colNames.filter(name =>\r\n      name.split('-')[0] == studyName);\r\n    const deployedExpts = currentStudyExpts.map(name => name.split('-')[1]);\r\n    return deployedExpts;\r\n  }\r\n\r\n  /**\r\n   * PUT request to update document w info\r\n   * @param {[String]} database_name [name of database to query]\r\n   * @param {[String]} study_name [study name to query]\r\n   * @param {[Object]} data [a json object that will be added to the document\r\n   *                         queried by study_name]\r\n   */\r\n  putRandomize(database_name, study_name, data) {\r\n    axios.put('https://test-api-615.herokuapp.com/api/feedback/' + \r\n      database_name + '/info/studyName-' + study_name, data);\r\n  }\r\n\r\n  /**\r\n   * Update document in database when users turn on/off randomization\r\n   */\r\n  onChecked() {\r\n    const nowState = !this.state.checked;\r\n    this.setState({ checked: !this.state.checked });\r\n    const username = this.props.auth.user.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    const dataToPut = {\r\n      \"randomize\": nowState\r\n    }\r\n    this.putRandomize(username, studyName, dataToPut);\r\n  }\r\n\r\n  /**\r\n   * Return experiments in a study\r\n   */\r\n  getExpts() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n\r\n    const deployed = this.processColNames();\r\n    // check if the experiments are deployed \r\n    return this.props.experiments.map(expt => {\r\n      const exptName = expt.exptName;\r\n      const surveyLink = expt.link;\r\n\r\n      var condition;\r\n      if (expt.condition == null) {\r\n        condition = \"N/A\";\r\n      } else {\r\n        condition = expt.condition;\r\n      }\r\n\r\n      const exptDataLink = \"/\" + username + \"/\" + studyName + \"/\" +\r\n        exptName + \"/configs\";\r\n      const partExptDataLink = \"/\" + username + \"/\" + studyName + \"/\" +\r\n        exptName + \"/participantsExptData\";\r\n      const exptPartLink = \"https://statistical-perceptions.github.io/\" + \r\n        \"participant-app/#/participant-app/expt/\" + username + \r\n          \"/\" + studyName + \"-\" + exptName\r\n      const previewLink = \"https://statistical-perceptions.github.io/\" + \r\n      \"participant-app/#/participant-app/preview/\" + username + \r\n        \"/\" + studyName + \"-\" + exptName\r\n      const dbLink = \"https://test-api-615.herokuapp.com/api/feedback/\" + \r\n        username + \"/\" + studyName + \"-\" + exptName\r\n      const exptBuilderLink = \"/\" + username + \"/\" +\r\n        studyName + \"/exptBuilder\";\r\n\r\n      if (deployed.includes(exptName)) {\r\n        return (\r\n          <div className=\"container\">\r\n            <div className=\"boxed\">\r\n              <b>{expt.exptName}</b> <br/>\r\n              <a target=\"_blank\" href={previewLink}>\r\n                Preview Experiment\r\n              </a> <br/><br/>\r\n              <Link to={exptDataLink}>\r\n                <button type=\"button\">\r\n                  Experiment Configs\r\n                </button>\r\n              </Link> <p> </p>\r\n              <Link to={partExptDataLink}>\r\n                <button type=\"button\">\r\n                  View Participants Data\r\n                </button>\r\n              </Link> <p> </p> \r\n              <br/><br/>\r\n              <button id={expt.exptName} onClick={this.onDeleteExperiment}>\r\n              Delete this Experiment\r\n              </button>\r\n              <br/><br/>\r\n              Condition: <b>{condition}</b>\r\n              <br/><br/>\r\n              <b>Database Link:</b><br/>\r\n              {dbLink} <br/>\r\n              <CopyToClipboard text={dbLink}>\r\n                <button \r\n                  onClick={() => \r\n                    alert(\"Database link has been copied to clipboard. \" + \r\n                      \"Paste it into your Qualtrics survey :)\")}>\r\n                  Copy experiment link to clipboard\r\n                </button>\r\n              </CopyToClipboard>\r\n              <br/><br/>\r\n              <b>Experiment Link:</b> <br/>\r\n              {exptPartLink} <br/>\r\n              <CopyToClipboard text={exptPartLink}>\r\n                <button \r\n                  onClick={() => \r\n                    alert(\"Experiment link has been copied to clipboard. \" + \r\n                      \"Paste it into your Qualtrics survey :)\")}>\r\n                  Copy experiment link to clipboard\r\n                </button>\r\n              </CopyToClipboard>\r\n              <br/><br/>\r\n              <b>Qualtrics Demographics Survey Link:</b> <br/>\r\n              {surveyLink} <br/>\r\n              <CopyToClipboard text={surveyLink}>\r\n                <button \r\n                  onClick={() => \r\n                    alert(\"Qualtrics Survey link has been copied to clipboard. \" + \r\n                      \"Paste it into your Qualtrics survey :)\")}>\r\n                  Copy experiment link to clipboard\r\n                </button>\r\n              </CopyToClipboard>\r\n            </div>\r\n          </div>\r\n        )\r\n      } else {\r\n        return (\r\n          <div>\r\n            <div className=\"boxed\">\r\n            Experiment: <b>{expt.exptName}</b><br/><br/>\r\n            <Link to={exptDataLink}>\r\n              <button type=\"button\">\r\n                Configurations\r\n              </button>\r\n            </Link> <p> </p>\r\n            {/* We are passing info to the link so that TabList.js knows */}\r\n            {/* that we are in editing mode */}\r\n            <Link to={{\r\n                pathname: exptBuilderLink,\r\n                state: {\r\n                  newExpt: false,\r\n                  exptName: exptName  \r\n                }\r\n              }}>\r\n              <button type=\"button\">\r\n                Edit Experiment\r\n              </button>\r\n            </Link>\r\n            <br/><br/>\r\n            <button id={expt.exptName} onClick={this.onDeleteExperiment}>\r\n            Delete this Experiment\r\n            </button>\r\n            <br/><br/>\r\n            <b>Experiment Link:</b><br/>\r\n            {exptPartLink} <br/>\r\n            <CopyToClipboard text={exptPartLink}>\r\n              <button \r\n                onClick={() => \r\n                  alert(\"Experiment link has been copied to clipboard. \" + \r\n                    \"Paste it into your Qualtrics survey :)\")}>\r\n                Copy experiment link to clipboard\r\n              </button>\r\n            </CopyToClipboard>\r\n            <br/><br/>\r\n            <b>Database Link:</b><br/>\r\n            {dbLink} <br/>\r\n            <CopyToClipboard text={dbLink}>\r\n              <button \r\n                onClick={() => \r\n                  alert(\"Database link has been copied to clipboard. \" + \r\n                    \"Paste it into your Qualtrics survey :)\")}>\r\n                Copy experiment link to clipboard\r\n              </button>\r\n            </CopyToClipboard>\r\n            <br/><br/>\r\n            <b>TODO</b> <br/>\r\n            Paste the link to demographics qualtrics survey below: <br/>\r\n            <textarea cols=\"60\" rows=\"1\" id={exptName + \"link\"}\r\n              onInput={this.changeState} value={this.state.exptName}></textarea>\r\n            <br/><br/>\r\n            {\r\n              this.state.checked\r\n              ? <div>\r\n                <b>TODO</b> <br/>\r\n                Name the condition of this experiment: <br/>\r\n                <textarea cols=\"60\" rows=\"1\" id={exptName + \"condition\"}\r\n                  onInput={this.changeState} value={this.state.condition}></textarea>\r\n                <br/>\r\n              </div>\r\n              : <div></div>\r\n            }\r\n            <br/>\r\n            {/* <button onClick={() => console.log(this.state)}>Show State</button><br/> */}\r\n            <button id={exptName} onClick={this.onDeploy}> \r\n              <b>DEPLOY</b>\r\n            </button>\r\n            <br/>\r\n          </div>\r\n          </div>\r\n        )\r\n      };\r\n    })\r\n  }\r\n\r\n  changeState(e) {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  }\r\n\r\n  /**\r\n   * Delte both expt data stored in /info and expt collection that stores \r\n   * participant data\r\n   * @param {[Event]} e [an event triggered by users to delete an expt]\r\n   */\r\n  onDeleteExperiment(e) {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    const exptName = e.target.id;\r\n    var confirm = window.confirm(\"Are you sure you want to delete this\" +\r\n      \" experiment [\" + exptName + \"] (and all its participant data)?\");\r\n    if (confirm) {\r\n      // first delete expt config from /info\r\n      axios\r\n      .delete('https://test-api-615.herokuapp.com/api/feedback/' + \r\n        username + '/info/studyName-' + studyName + '/experiments/exptName-' +\r\n        exptName)\r\n      .then(res => {\r\n        // then delete participant data collection\r\n        axios\r\n          .delete('https://test-api-615.herokuapp.com/api/feedback/' + \r\n            username + \"/one\", {data: {colName: studyName + \"-\" + exptName}})\r\n          .then(res => {\r\n            alert(\"You have successfully deleted [\" + exptName + \r\n              \"] and all its data!\");\r\n            window.location.reload(true);\r\n          })\r\n      });\r\n    } else {\r\n      alert(\"Deletion cancelled!\");\r\n      window.location.reload(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Modify expt data associated with studyName file stored in /info \r\n   * and create a new collectino to store participant data\r\n   * @param {[Event]} e [an event triggered by user deploying an expt]\r\n   */\r\n  onDeploy(e) {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n\r\n    var exptName;\r\n    if (e.currentTarget != null) {\r\n      exptName = e.currentTarget.id;\r\n    } else {\r\n      exptName = e;\r\n    };\r\n    console.log(exptName);\r\n\r\n    const link = this.state[exptName + \"link\"];\r\n    const condition = this.state[exptName + \"condition\"];\r\n\r\n    // process condition first\r\n    var conditionInfo;\r\n    if (condition == null) {\r\n      conditionInfo = { \"condition\": \"N/A\" };\r\n    } else {\r\n      conditionInfo = { \"condition\": condition };\r\n    }\r\n    // this.props.saveAddInfo(username, studyName, exptName, \"condition\", conditionInfo);\r\n\r\n    // NEED TO CLEAN THIS UP \r\n    // i only used axios here for debugging\r\n    // PUT requests to add condition and link data to a specific experiment in \r\n    // the \"experiments array\" associated with studyName\r\n    axios\r\n      .put('https://test-api-615.herokuapp.com/api/feedback/' + username + \r\n           '/info/studyName-' + studyName + '/experiments/exptName-' + exptName + '/' + 'condition',\r\n           conditionInfo)\r\n      .then(res => {\r\n        var linkToSend;\r\n        if (this.state.checked) {\r\n          linkToSend = link + \"?condition=\" + condition\r\n        } else {\r\n          linkToSend = link;\r\n        }\r\n        const linkInfo = { \"link\": linkToSend };\r\n        axios\r\n          .put('https://test-api-615.herokuapp.com/api/feedback/' + username + \r\n               '/info/studyName-' + studyName + '/experiments/exptName-' + exptName + '/' + 'link',\r\n               linkInfo)\r\n          .then(res => {\r\n            // create a new collection in user's database\r\n            this.props.createExptCol(username, studyName + \"-\" + exptName, exptName);\r\n          })\r\n      })\r\n  }\r\n\r\n  // for now deployment simply creates a collection for each experiment \r\n  // that would later store participants data\r\n  deployExpts() {\r\n    const username = this.props.auth.user.username;\r\n    const studyName = this.props.match.params.studyName;\r\n\r\n    const deployed = this.processColNames();\r\n    const exptNames = this.props.experiments.map(item => item.exptName);\r\n    const difference = exptNames.filter(name => !deployed.includes(name));\r\n    difference.forEach(expt_name => {\r\n      this.props.createExptCol(username, studyName + \"-\" + expt_name, expt_name);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Footer to show different deployment buttons based on deployment status\r\n   */\r\n  deploy() {\r\n    const deployed = this.processColNames();\r\n    const exptNames = this.props.experiments.map(item => item.exptName);\r\n    const difference = exptNames.filter(name => !deployed.includes(name));\r\n    if (exptNames.length == 0) {\r\n      return (\r\n        <div className=\"container\">\r\n          <p style={{ color: \"grey\" }}>\r\n            No experiments.\r\n          </p>\r\n        </div>\r\n      )\r\n    } else if (difference.length == 0) {\r\n      return (\r\n        <div className=\"container\">\r\n          <p style={{ color: \"grey\" }}>\r\n            All experiments are deployed.\r\n          </p>\r\n        </div>\r\n      )\r\n    } else if (difference.length >= 0) {\r\n      return (\r\n        <div className=\"container\">\r\n          <button style={{ padding: \"12px 28px\" }}\r\n          onClick={() => difference.forEach(name => this.onDeploy(name))}>\r\n            <b>Deploy All Experiments</b>\r\n          </button>\r\n          <br/>\r\n          <br/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    const exptBuilderLink = \"/\" + username + \"/\" +\r\n      studyName + \"/exptBuilder\";\r\n\r\n    const deployed = this.processColNames();\r\n    const exptNames = this.props.experiments.map(item => item.exptName);\r\n\r\n    const partStudyDataLink = \"/\" + username + \"/\" + studyName + \"/participantsStudyData\";\r\n    return (\r\n      <div className=\"container\">\r\n        <h2>Study: {this.props.match.params.studyName}</h2>\r\n        <Link to={{\r\n          pathname: exptBuilderLink,\r\n          state: {\r\n              newExpt: true\r\n            }\r\n          }}>\r\n          <button>\r\n            Build an Experiment\r\n          </button>\r\n        </Link>\r\n        <p> </p>\r\n        <Link to={partStudyDataLink}>\r\n          <button>\r\n            View All Participant Data\r\n          </button>\r\n        </Link>\r\n        <h3>\r\n          Your Experiments\r\n        </h3>\r\n        {\r\n          this.state.deployed\r\n          ? <div></div>\r\n          : <div>\r\n              <input type=\"checkbox\" onChange={this.onChecked} checked={this.state.checked}/>\r\n                I want to randomize experiments in this study\r\n              <br/>\r\n          </div>\r\n        }\r\n        {\r\n          this.state.checked \r\n          ? <div>\r\n            You have chosen to randomize experiments in this study.\r\n          </div>\r\n          : <div>\r\n            You have chosen not to randomize experiments in this study. \r\n            <br/>\r\n          </div>\r\n        }\r\n        <br/>\r\n        {this.getExpts()}\r\n        <br /><br />\r\n        {this.deploy()}\r\n        <br />\r\n        {/* <button onClick={() => console.log(this.props.experiments)}>show state</button> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nConfigStudy.propTypes = {\r\n  // Proptype.type, the type here must match initialState of reducer\r\n  auth: PropTypes.object.isRequired,\r\n  getStudyInfo: PropTypes.func.isRequired,\r\n  experiments: PropTypes.array.isRequired,\r\n  createExptCol: PropTypes.func.isRequired,\r\n  getColNames: PropTypes.func.isRequired,\r\n  colNames: PropTypes.array.isRequired,\r\n  saveAddInfo: PropTypes.func.isRequired\r\n};\r\n\r\n// interaction between reducer and store (state), connect to props \r\n// for components to use\r\n// props: state\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  // experiments refer to the experiment configurations \r\n  // stored in collection [info] under the user's database\r\n  experiments: state.dataFlow.studyInfo,\r\n  colNames: state.dataFlow.colNames\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getStudyInfo, createExptCol, getColNames, saveAddInfo }\r\n)(ConfigStudy);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getStudyInfo\r\n} from \"../../actions/dataActions\"\r\n\r\n/**\r\n * Shows experiment configurations\r\n * TODO: Improve this component so that data presentation looks better\r\n */\r\nclass ExptConfigs extends Component {\r\n\r\n  componentDidMount() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    this.props.getStudyInfo(username, studyName);\r\n  }\r\n\r\n  /**\r\n   * Get experiment config data (obj) from redux store and show it as a string\r\n   */\r\n  showExptData() {\r\n    const thisExpt = this.props.match.params.exptName;\r\n    if (!this.props.experiments.length == 0) {\r\n      const exptObj =\r\n        this.props.experiments.find(item => item.exptName == thisExpt);\r\n      const JSONString = JSON.stringify(exptObj);\r\n      return (\r\n        <div>\r\n          {JSONString}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    const studyLink = \"/\" + username + \"/\" + studyName;\r\n    return (\r\n      <div className=\"container\">\r\n        <h2>Experiment: {this.props.match.params.exptName}</h2>\r\n        Back to <p> </p>\r\n        <Link to={studyLink}>\r\n          {studyName}\r\n        </Link>\r\n        <br /><br />\r\n        <b>Configuration data: </b>\r\n        <br /><br />\r\n        {this.showExptData()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nExptConfigs.propTypes = {\r\n  // Proptype.type, the type here must match initialState of reducer\r\n  getStudyInfo: PropTypes.func.isRequired,\r\n  experiments: PropTypes.array.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\n// interaction between reducer and store (state), connect to props \r\n// for components to use\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  experiments: state.dataFlow.studyInfo\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getStudyInfo }\r\n)(ExptConfigs);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n  getColNames,\r\n  getColsData,\r\n  getStudyInfo\r\n} from \"../../actions/dataActions\"\r\n\r\nimport \"./PartData.css\";\r\n\r\n/**\r\n * Shows participant data for a specific study\r\n */\r\nclass PartStudyData extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.makeArr = this.makeArr.bind(this);\r\n    this.showJSONData = this.showJSONData.bind(this);\r\n    this.getIndex = this.getIndex.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Get participant data from all collections associated with this study\r\n   */\r\n  componentWillMount() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    axios\r\n      .get('https://test-api-615.herokuapp.com/api/' + username + \"/collections\")\r\n      .then(res => {\r\n        const nameArr = res.data;\r\n        // ****** TODO ******\r\n        // improve this query method so it's safer than .includes\r\n        const partColNames = nameArr.filter(name => \r\n          name != \"info\" && name != \"itemData\" && name.includes(studyName));\r\n        console.log(partColNames);\r\n        partColNames.map(colName => this.props.getColsData(username, colName));\r\n        this.props.getStudyInfo(username, studyName);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Flatten the object such that all data lives \"flat\" on the first level\r\n   * @param {[Object]} obj [a json object containing an indivual participant's\r\n   *                        experiment data]\r\n   */\r\n  flattenObj(obj) {\r\n    var flattendObj = {};\r\n    const flattenObject = (obj, keyName) => {\r\n      Object.keys(obj).forEach(key => {\r\n        var newKey = `${keyName}.${key}` \r\n        if (typeof obj[key] === \"object\") {\r\n          // calling the function again\r\n          flattenObject(obj[key], newKey);\r\n        } else {\r\n          flattendObj[newKey] = obj[key];\r\n        }\r\n      });\r\n    };\r\n    flattenObject(obj, \"\");\r\n\r\n    function renameKey (obj, oldKey, newKey) {\r\n      obj[newKey] = obj[oldKey];\r\n      delete obj[oldKey];\r\n    }\r\n\r\n    const allKeys = Object.keys(flattendObj);\r\n    allKeys.map(k => {\r\n      const oldKey = k;\r\n      const newKey = oldKey.substr(1, oldKey.length);\r\n      renameKey(flattendObj, oldKey, newKey)\r\n    })\r\n\r\n    return flattendObj;\r\n  } \r\n\r\n  /**\r\n   * Make an array where each entry is a flat json Object containing an \r\n   * individual participant's experiment data\r\n   */\r\n  makeArr() {\r\n    if (!Object.keys(this.props.colsData).length == 0) {\r\n      // console.log(this.props.colData);\r\n      var arr = [];\r\n      var ids = [];\r\n      const arrToProcess = this.props.colsData;\r\n      // console.log(arrToProcess);\r\n      arrToProcess.forEach(item => {\r\n        const id = item.participantID;\r\n        const keysInItem = Object.keys(item);\r\n        const qKeys = \r\n          keysInItem.filter(k => k != \"participantID\" && k != \"_id\");\r\n        \r\n        if (ids.includes(id)) {\r\n          // find that id in arr and update the item\r\n          arr.forEach(ele => {\r\n            if (ele.participantID == id) {\r\n              const prevData = ele;\r\n              qKeys.forEach(k => prevData[k] = item[k]);\r\n              ele = prevData;\r\n            }\r\n          })\r\n        } else {\r\n          // make a new item, put it in arr, and put id in ids \r\n          const doc = {};\r\n          doc[\"participantID\"] = id;\r\n          qKeys.forEach(k => doc[k] = item[k]);\r\n          arr.push(doc);\r\n          ids.push(id);\r\n          // console.log(doc);\r\n        }\r\n      })\r\n      // arr.map(ele => ele = this.flattenObj(ele));\r\n      arr.map(ele => {\r\n        const newEle = this.flattenObj(ele);\r\n        const i = arr.indexOf(ele);\r\n        arr[i] = newEle;\r\n      });\r\n      return arr;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert json objects to string and present them\r\n   */\r\n  showJSONData() {\r\n    const arr = this.makeArr();\r\n    if (arr != null) {\r\n      return arr.map(ele => {\r\n        const line = JSON.stringify(ele);\r\n        return (\r\n          <div>\r\n            <br/>\r\n            {line}\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to export csv file containing participant data for this study\r\n   */\r\n  getIndex() {\r\n    const studyName = this.props.match.params.studyName;\r\n    if (!this.props.experiments.length == 0) {\r\n      var allIndex = [];\r\n      this.props.experiments.map(item => {\r\n        allIndex.push(item[\"index\"]);\r\n      });\r\n\r\n      let str = \"\";\r\n      allIndex.map(item => {\r\n        const objKeys = Object.keys(item);\r\n        objKeys.map(key => {\r\n          const line = key.toString() + \": \" + item[key].toString() + \"\\n\"\r\n          str += line;\r\n        });\r\n      });\r\n\r\n      const element = document.createElement(\"a\");\r\n      const file = new Blob([str], {type: 'text/plain'});\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = studyName + \"Legend.txt\";\r\n      document.body.appendChild(element); \r\n      element.click();\r\n      console.log(file);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    const studyLink = \"/\" + username + \"/\" + studyName;\r\n    const file_name = username + \"_\" + studyName + \"_data.csv\";\r\n    const arr = this.makeArr();\r\n    if (arr != null) {\r\n      return (\r\n        <div>\r\n          <h2>All Participant Data from Study: {studyName}</h2>\r\n          Back to <p> </p>\r\n          <Link to={studyLink}>\r\n            {studyName}\r\n          </Link>\r\n          <br /><br />\r\n          <button>\r\n            <CSVLink data={arr} filename={file_name}>\r\n              Download Data as CSV\r\n            </CSVLink>\r\n          </button>\r\n          <br/><br/>\r\n          <button onClick={this.getIndex}>Download Legend</button>\r\n          {this.showJSONData()}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h2>All Participant Data from Study: {studyName}</h2>\r\n          Back to <p> </p>\r\n          <Link to={studyLink}>\r\n            {studyName}\r\n          </Link>\r\n          <br /><br />\r\n          It seems like there's no participant data yet... \r\n        </div>\r\n      )\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nPartStudyData.propTypes = {\r\n  // Proptype.type, the type here must match initialState of reducer\r\n  getColsData: PropTypes.func.isRequired,\r\n  getColNames: PropTypes.func.isRequired,\r\n  colsData: PropTypes.array.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  colNames: PropTypes.array.isRequired,\r\n  getStudyInfo: PropTypes.func.isRequired,\r\n  experiments: PropTypes.array.isRequired\r\n};\r\n\r\n// interaction between reducer and store (state), connect to props \r\n// for components to use\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  colsData: state.dataFlow.colsData,\r\n  colNames: state.dataFlow.colNames,\r\n  experiments: state.dataFlow.studyInfo\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getColNames, getColsData, getStudyInfo }\r\n)(PartStudyData);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport {\r\n  getColData,\r\n  getStudyInfo\r\n} from \"../../actions/dataActions\"\r\n\r\nimport \"./PartData.css\";\r\n\r\n/**\r\n * Shows participant data for a specific experiment\r\n */\r\nclass PartExptData extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // finalObj: {}\r\n    };\r\n\r\n    this.makeArr = this.makeArr.bind(this);\r\n    this.showJSONData = this.showJSONData.bind(this);\r\n    this.getIndex = this.getIndex.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    const exptName = this.props.match.params.exptName;\r\n    const colName = studyName + \"-\" + exptName;\r\n    this.props.getColData(username, colName);\r\n    this.props.getStudyInfo(username, studyName);\r\n  }\r\n\r\n  /**\r\n   * Flatten the object such that all data lives \"flat\" on the first level\r\n   * @param {[Object]} obj [a json object containing an indivual participant's\r\n   *                        experiment data]\r\n   */\r\n  flattenObj(obj) {\r\n    var flattendObj = {};\r\n    const flattenObject = (obj, keyName) => {\r\n      Object.keys(obj).forEach(key => {\r\n        var newKey = `${keyName}.${key}` \r\n        if (typeof obj[key] === \"object\") {\r\n          // recursive call\r\n          flattenObject(obj[key], newKey);\r\n        } else {\r\n          flattendObj[newKey] = obj[key];\r\n        }\r\n      });\r\n    };\r\n    flattenObject(obj, \"\");\r\n\r\n    function renameKey (obj, oldKey, newKey) {\r\n      obj[newKey] = obj[oldKey];\r\n      delete obj[oldKey];\r\n    }\r\n\r\n    const allKeys = Object.keys(flattendObj);\r\n    allKeys.map(k => {\r\n      const oldKey = k;\r\n      const newKey = oldKey.substr(1, oldKey.length);\r\n      renameKey(flattendObj, oldKey, newKey)\r\n    })\r\n\r\n    return flattendObj;\r\n  } \r\n\r\n  /**\r\n   * Make an array where each entry is a flat json Object containing an \r\n   * individual participant's experiment data\r\n   */\r\n  makeArr() {\r\n    if (!Object.keys(this.props.colData).length == 0) {\r\n      var arr = [];\r\n      var ids = [];\r\n      const arrToProcess = this.props.colData;\r\n      arrToProcess.forEach(item => {\r\n        const id = item.participantID;\r\n        const keysInItem = Object.keys(item);\r\n        // switch statement here\r\n        const qKeys = \r\n          keysInItem.filter(k => k != \"participantID\" && k != \"_id\");\r\n        \r\n        if (ids.includes(id)) {\r\n          // find that id in arr and update the item\r\n          arr.forEach(ele => {\r\n            if (ele.participantID == id) {\r\n              const prevData = ele;\r\n              qKeys.forEach(k => prevData[k] = item[k]);\r\n              ele = prevData;\r\n            }\r\n          })\r\n        } else {\r\n          // make a new item, put it in arr, and put id in ids \r\n          const doc = {};\r\n          doc[\"participantID\"] = id;\r\n          qKeys.forEach(k => doc[k] = item[k]);\r\n          arr.push(doc);\r\n          ids.push(id);\r\n          // console.log(doc);\r\n        }\r\n      })\r\n      // arr.map(ele => ele = this.flattenObj(ele));\r\n      arr.map(ele => {\r\n        const newEle = this.flattenObj(ele);\r\n        const i = arr.indexOf(ele);\r\n        arr[i] = newEle;\r\n      });\r\n      return arr;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert json objects to string and present them\r\n   */\r\n  showJSONData() {\r\n    const arr = this.makeArr();\r\n    if (arr != null) {\r\n      return arr.map(ele => {\r\n        const line = JSON.stringify(ele);\r\n        return (\r\n          <div>\r\n            <br/>\r\n            {line}\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to export csv file containing participant data for this expt\r\n   */\r\n  getIndex() {\r\n    const exptName = this.props.match.params.exptName;\r\n    if (!this.props.experiments.length == 0) {\r\n      const thisExpt = \r\n      this.props.experiments\r\n        .filter(item => item[\"exptName\"] == this.props.match.params.exptName)[0]\r\n      const index = thisExpt[\"index\"];\r\n\r\n      let str = \"\"\r\n      const objKeys = Object.keys(index);\r\n      objKeys.map(key => {\r\n        const line = key.toString() + \": \" + index[key].toString() + \"\\n\"\r\n        str += line;\r\n      });\r\n\r\n      const element = document.createElement(\"a\");\r\n      const file = new Blob([str], {type: 'text/plain'});\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = exptName + \"Legend.txt\";\r\n      document.body.appendChild(element); \r\n      element.click();\r\n      console.log(file);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.studyName;\r\n    const exptName = this.props.match.params.exptName;\r\n    const studyLink = \"/\" + username + \"/\" + studyName;\r\n    const file_name = username + \"_\" + studyName + \"_\" + exptName + \"_data.csv\";\r\n    const arr = this.makeArr();\r\n    if (arr != null) {\r\n      console.log(arr);\r\n      return (\r\n        <div>\r\n          <h2>Experiment: {exptName}</h2>\r\n          Back to <p> </p>\r\n          <Link to={studyLink}>\r\n            {studyName}\r\n          </Link>\r\n          <br/>\r\n          <h4>Participants data: </h4> \r\n          <button>\r\n            <CSVLink data={arr} filename={file_name}>\r\n              Download Data as CSV\r\n            </CSVLink>\r\n          </button>\r\n          <br/><br/>\r\n          <button onClick={this.getIndex}>Download Legend</button><br/>\r\n          \r\n          <div>\r\n            {this.showJSONData()}\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h2>Experiment: {this.props.match.params.exptName}</h2>\r\n          Back to <p> </p>\r\n          <Link to={studyLink}>\r\n            {studyName}\r\n          </Link>\r\n          <br/><br/>\r\n          It seems like there's no participant data yet...\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nPartExptData.propTypes = {\r\n  // Proptype.type, the type here must match initialState of reducer\r\n  getColData: PropTypes.func.isRequired,\r\n  colData: PropTypes.array.isRequired,\r\n\r\n  getStudyInfo: PropTypes.array.isRequired,\r\n  experiments: PropTypes.array.isRequired,\r\n\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\n// interaction between reducer and store (state), connect to props \r\n// for components to use\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  colData: state.dataFlow.colData,\r\n  experiments: state.dataFlow.studyInfo\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getColData, getStudyInfo }\r\n)(PartExptData);","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch, BrowserRouter, HashRouter } from \"react-router-dom\";\r\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport TabList from './components/TabList/TabList';\r\n\r\nimport NavBar from './components/layout/NavBar';\r\nimport Landing from './components/layout/Landing';\r\nimport HomePage from './components/layout/HomePage';\r\n\r\nimport Register from './components/auth/Register';\r\nimport Login from './components/auth/Login'\r\n\r\nimport Dashboard from \"./components/dashboard/Dashboard\";\r\nimport ConfigStudy from './components/Study/ConfigStudy';\r\nimport ExptConfigs from './components/Study/ExptConfigs';\r\nimport PartStudyData from './components/Study/PartStudyData';\r\nimport PartExptData from './components/Study/PartExptData';\r\n\r\n// Check for token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n  // Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    // Logout user\r\n    store.dispatch(logoutUser());\r\n    // Redirect to login\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <HashRouter basename=\"/survey-builder/\">\r\n        <div className=\"App\">\r\n          < NavBar />\r\n          <br/>\r\n          < Landing />\r\n          < Route exact path=\"/\" component={HomePage} />\r\n          < Route exact path=\"/register\" component={Register} />\r\n          < Route exact path=\"/login\" component={Login} />\r\n          <Switch>\r\n            <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\r\n            <PrivateRoute exact path=\"/:username/:studyName\"\r\n              component={ConfigStudy} />\r\n            <PrivateRoute exact path=\"/:username/:studyName/exptBuilder\"\r\n              component={TabList} />\r\n            <PrivateRoute exact path=\"/:username/:studyName/:exptName/configs\"\r\n              component={ExptConfigs}/>\r\n            <PrivateRoute exact path=\"/:username/:studyName/participantsStudyData\"\r\n              component={PartStudyData}/>\r\n            <PrivateRoute exact path=\"/:username/:studyName/:exptName/participantsExptData\"\r\n              component={PartExptData}/>\r\n          </Switch>\r\n        </div>\r\n      </HashRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/sameSquare.8c0ac2fb.png\";","module.exports = __webpack_public_path__ + \"static/media/rlyDiff.06e96a79.png\";","module.exports = __webpack_public_path__ + \"static/media/bigSmall.29f3b573.png\";"],"sourceRoot":""}