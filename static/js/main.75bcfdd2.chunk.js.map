{"version":3,"sources":["components/TabBuilder/TabBuilder.jsx","components/SliderTab/SliderTab.jsx","components/TabList/TabList.jsx","App.js","serviceWorker.js","index.js"],"names":["TabBuilder","props","selectRef","React","createRef","className","name","id","ref","this","value","onClick","build","current","Component","SliderTab","sliderRef","outputRef","qRef","minRef","maxRef","state","min","max","checked","handleChange","bind","delete","count","getCount","type","q","onInput","defaultValue","axios","require","TabList","builderFunction","tabDefine","arr","children","push","tab","key","toString","curOutput","output","newCount","setState","complete","console","log","deleted","myRef","submitRef","nameRef","outputCreate","checkOutput","getTest","pos","newVal","newDelete","indexOf","obj","int","elem","lowNum","isNaN","highNum","parseInt","filter","item","map","validName","length","finalObj","Date","url","data","async","crossDomain","dataType","contentType","then","response","alert","get","resp","action","method","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.75bcfdd2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TabBuilder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.selectRef = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"unit\">\r\n                <span>Choose what element to add next</span><br />\r\n                <select name=\"tabType\" id=\"tabType\" ref={this.selectRef}>\r\n                    <option value=\"slider\">Slider</option>\r\n                </select>\r\n                <button onClick={() => this.props.build(this.selectRef.current.value)}>+</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TabBuilder;","import React, { Component } from 'react';\r\nimport './SliderTab.css';\r\n\r\nclass SliderTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.sliderRef = React.createRef();\r\n        this.outputRef = React.createRef();\r\n        this.qRef = React.createRef();\r\n        this.minRef = React.createRef();\r\n        this.maxRef = React.createRef();\r\n        this.state = {min : 1, max : 100}\r\n\r\n        // console.log(this.props);\r\n\r\n        this.state = {\r\n            checked : false\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    delete(){\r\n        this.props.delete(this.props.count);\r\n    }\r\n\r\n    getCount() {\r\n        this.props.getCount(this.props.count);\r\n    }\r\n\r\n    handleChange(type, q, count) {\r\n        // if (this.qRef.current.value.length === 0 || this.minRef.current.value.length === 0 || this.maxRef.current.value.length === 0 || isNaN(this.minRef.current.value) || isNaN(this.maxRef.current.value)) {\r\n        //     this.setState({checked : false});\r\n        // }\r\n        // else {\r\n        //     this.setState({checked : true});\r\n        // }\r\n        // console.log(this.qRef.current.value.length === 0);\r\n        // console.log(this.minRef.current.value.length === 0);\r\n        // console.log(this.maxRef.current.value.length === 0);\r\n        // console.log(isNaN(this.minRef.current.value));\r\n        // console.log(isNaN(this.maxRef.current.value));\r\n        // console.log(this.state.checked);\r\n        this.props.handleChange(type, q, count);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // var slider = this.sliderRef.current;\r\n        // var output = this.outputRef.current;\r\n        // output.innerHTML = slider.value;\r\n\r\n        // slider.oninput = function () {\r\n        //     output.innerHTML = this.value;\r\n        // }\r\n        // var minNode = this.minRef.current;\r\n        // var maxNode = this.maxRef.current;\r\n\r\n        // minNode.oninput = function () {\r\n        //     this.props.handleChange(\"lowRange\", minNode.value);\r\n        // }\r\n\r\n        // maxNode.oninput = function () {\r\n        //     this.props.handleChange(\"highRange\", maxNode.value);\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <form className=\"unit\">\r\n                <p>Drag the slider and click confirm</p>\r\n                <p>Question: <input onInput={() => this.handleChange(\"Question\", this.qRef.current.value, this.props.count)} ref={this.qRef} type=\"text\" /></p>\r\n                <input type=\"range\" min=\"1\" max=\"100\" defaultValue=\"50\" className=\"slider\" name=\"myRange\" id=\"myRange\" ref={this.sliderRef} />\r\n                <p>Minimum: <input onInput={() => this.handleChange(\"lowRange\", this.minRef.current.value, this.props.count)} ref={this.minRef} type=\"text\" /></p>\r\n                {/* <p>Value: <span id=\"slider1\" ref={this.outputRef}></span></p> */}\r\n                <p>Maximum: <input onInput={() => this.handleChange(\"highRange\", this.maxRef.current.value, this.props.count)} ref={this.maxRef} type=\"text\" /></p>\r\n                <p onClick={this.delete.bind(this)}>Delete</p>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SliderTab;","import React, { Component } from 'react';\r\nimport './TabList.css';\r\nimport '../TabBuilder/TabBuilder'\r\nimport TabBuilder from '../TabBuilder/TabBuilder';\r\nimport SliderTab from '../SliderTab/SliderTab';\r\n\r\nconst axios = require('axios');\r\n\r\nclass TabList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            children : [],\r\n            count : 0,\r\n            output : {},\r\n            deleted : [],\r\n            complete : false\r\n        }\r\n        this.myRef = React.createRef();\r\n        this.submitRef = React.createRef();\r\n        this.nameRef = React.createRef();\r\n\r\n        this.builderFunction = this.builderFunction.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n        this.getCount = this.getCount.bind(this);\r\n        this.outputCreate = this.outputCreate.bind(this);\r\n        this.checkOutput = this.checkOutput.bind(this);\r\n        this.getTest = this.getTest.bind(this);\r\n    }\r\n\r\n    builderFunction = (tabDefine) => {\r\n        var arr = this.state.children;\r\n\r\n        switch (tabDefine) {\r\n            case \"slider\":\r\n            arr.push({id : this.state.count, tab : <SliderTab getCount={this.getCount} delete={this.delete} count={this.state.count} handleChange={this.handleChange} key={this.state.count.toString()} />})\r\n                break;\r\n            default:\r\n                arr = <div>Unknown Element</div>\r\n        }\r\n\r\n        var curOutput = this.state.output;\r\n        curOutput[this.state.count.toString()] = {\"Type\" : tabDefine};\r\n        var newCount = this.state.count + 1;\r\n        this.setState({children : arr, count : newCount, output : curOutput, complete : false});\r\n        console.log(this.state.output);\r\n    }\r\n\r\n    // handleSubmit() {\r\n    //     var listElem = this.props.children;\r\n    //     console.log(listElem);\r\n    // }\r\n\r\n    handleChange(pos, newVal, count) {\r\n        console.log(count);\r\n        var curOutput = this.state.output;\r\n        curOutput[count.toString()][pos] = newVal;\r\n        this.setState({output : curOutput});\r\n\r\n        console.log(this.state.output);\r\n    }\r\n\r\n    delete(id){\r\n        // this.state.children.map(el => console.log(el.count));\r\n        // this.setState(prevState => ({\r\n        //     output: prevState.children.filter(el => el.count !== id )\r\n        // }));\r\n        var newDelete = this.state.deleted;\r\n        newDelete.push(id);\r\n        this.setState({ deleted: newDelete });\r\n        console.log(this.state.deleted);\r\n        console.log(this.state.deleted.indexOf(id));\r\n    }\r\n\r\n    getCount(count) {\r\n        return count;\r\n    }\r\n\r\n    checkOutput(obj) {\r\n        var int = 0;\r\n        var complete = true;\r\n        while ((int.toString()) in obj) {\r\n            var elem = obj[int.toString()];\r\n            switch (elem[\"Type\"]) {\r\n                case \"slider\":\r\n                    var lowIs = \"lowRange\" in elem;\r\n                    var highIs = \"highRange\" in elem;\r\n                    var qIs = \"Question\" in elem;\r\n                    if (lowIs && highIs && qIs){\r\n                        var lowNum = !isNaN(elem[\"lowRange\"]);\r\n                        var highNum = !isNaN(elem[\"highRange\"]);\r\n                        var highLow = parseInt(elem[\"highRange\"]) > parseInt(elem[\"lowRange\"]);\r\n                        if (highLow && lowNum && highNum) {\r\n                            complete = complete && true;\r\n                        }\r\n                        else {\r\n                            complete = false;\r\n                        }\r\n                        // console.log(\"Within\", complete);\r\n                        // console.log(int);\r\n                        // console.log(lowIs, highIs, qIs, lowNum, highNum, highLow);\r\n                    }\r\n                    else {\r\n                        complete = false;\r\n                    }\r\n                    break;\r\n                default:\r\n                    complete = false;\r\n            }\r\n\r\n            int++;\r\n        }\r\n        console.log(complete);\r\n        return complete;\r\n    }\r\n\r\n    outputCreate() {\r\n        var obj = {};\r\n        this.state.children\r\n        .filter(item => this.state.deleted.indexOf(item.id) === -1)\r\n        .map((item) => {obj[item.id.toString()] = this.state.output[item.id.toString()]});\r\n        console.log(typeof(obj));\r\n        var validName = this.nameRef.current.value.length > 0;\r\n        if (!(0 in obj) || !this.checkOutput(obj) || !validName) {\r\n            console.log(!(0 in obj), !this.checkOutput(obj));\r\n            alert(\"You have not filled out all fields, or have entered an invalid value!\");\r\n        }\r\n        else {\r\n            var finalObj = {\"userID\" : new Date().toString()};\r\n            finalObj[\"name\"] = this.nameRef.current.value;\r\n            var int = 0;\r\n            while ((int.toString()) in obj) {\r\n                finalObj[\"q\" + int.toString()] = obj[int.toString()];\r\n                int++;\r\n            }\r\n            finalObj[\"count\"] = int;\r\n            axios({\r\n                type: \"POST\",\r\n                url: 'https://test-api-615.herokuapp.com/api/feedback/surveys/',\r\n                data:finalObj,\r\n                async:true,\r\n                crossDomain:true,\r\n                dataType : 'json',\r\n                contentType: 'application/json'\r\n            }).then(response => {console.log(response)});\r\n            console.log(finalObj);\r\n        }\r\n    }\r\n\r\n    getTest() {\r\n        \r\n        axios.get('https://test-api-615.herokuapp.com/api/feedback/surveys').then(resp => {\r\n\r\n            console.log(resp.data);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"list\" ref={this.myRef}>\r\n                <form action=\"/submit\" method=\"POST\" className=\"unit\">\r\n                    <p>Enter a name for this survey</p>\r\n                    <input ref={this.nameRef} type=\"text\" id=\"userid\" name=\"userid\" /><br /><br />\r\n                </form>\r\n                {\r\n                    this.state.children\r\n                    .filter(item => this.state.deleted.indexOf(item.id) === -1)\r\n                    .map((item) => {\r\n                        return item.tab;\r\n                    })\r\n                }\r\n                <TabBuilder build={this.builderFunction} />\r\n                <div className=\"extraPad\">\r\n                    <button onClick={this.outputCreate} ref={this.submitRef} type=\"submit\" value=\"Submit\" className=\"btn\">Submit</button>\r\n                    <button onClick={this.getTest}>GET Test</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TabList;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport TabList from './components/TabList/TabList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <TabList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}