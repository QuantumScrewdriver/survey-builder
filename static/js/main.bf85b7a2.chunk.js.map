{"version":3,"sources":["components/private-route/PrivateRoute.js","utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/dataReducers.js","reducers/index.js","store.js","actions/dataActions.js","components/TabBuilder/TabBuilder.jsx","components/items/Slider/SliderTab.jsx","components/items/StaticText/StaticText.js","components/items/NormalCurve/NormalCurve.jsx","components/items/NormalCurve/NormalCurveResearch.jsx","components/items/ThresholdSlider/threshold.jsx","components/items/ThresholdSlider/thresholdReasearch.jsx","components/TabList/TabList.jsx","components/layout/NavBar.js","components/layout/Landing.js","components/layout/HomePage.js","components/auth/Register.js","components/auth/Login.js","components/dashboard/Dashboard.js","components/Study/ConfigStudy.js","components/Study/ExptConfigs.js","components/Study/PartStudyData.js","components/Study/PartExptData.js","App.js","serviceWorker.js","index.js","components/items/NormalCurve/sameSquare.png","components/items/NormalCurve/rlyDiff.png","components/items/NormalCurve/bigSmall.png"],"names":["connect","state","auth","Component","component","rest","render","props","isAuthenticated","to","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","user","loading","studyName","dbInfo","studyInfo","colData","colsData","colNames","fileName","combineReducers","action","errors","dataFlow","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","getStudyInfo","which_database","which_study","get","then","res","data","experiments","getColData","col_name","getColNames","TabBuilder","selectRef","React","createRef","importQRef","username","this","qType","allGroups","qSelectedToExptname","length","allExpts","renderOption","item","value","map","qKeys","Object","keys","filter","k","charAt","qArr","forEach","question","csvColName","mapQTypetoQKey","push","q","exptName","qOptions","label","className","name","id","ref","onClick","build","current","importQuestion","SliderTab","sliderRef","outputRef","qRef","minRef","maxRef","min","max","keyRef","checked","minVal","Number","maxVal","handleChange","bind","onChange","appendToKeysArr","delete","count","getCount","e","setState","target","imported","defaultQ","defaultMin","defaultMax","objType","nameType","qNum","onInput","defaultValue","thumbsContainer","justifyContent","display","flexDirection","flexWrap","marginTop","thumbWithDelete","alignItems","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","StaticText","imageRef","images","names","onDeleteImage","handleImageURL","arrRemovedImg","imag","rawURl","match_arr","match","alert","imageID","parsedURL","console","log","qToDisplay","includes","previousCount","arrayLength","editing","Images","sth","src","style","key","parsedLink","cols","rows","placeholder","NormalCurve","rectRef","svgRef","areaRef","lengthRef","startPos1Ref","startPos2Ref","graph1keyRef","graph2keyRef","colNumValRef","radiusRef","ticksRef","checkBoxRef","toggleTriRef1","toggleTriRef2","questionKeyRef","legendKey1Ref","legendKey2Ref","color1Ref","color2Ref","arg0ref","arg1ref","arg2ref","arg3ref","arg4ref","arg5ref","arg6ref","dotReturn","curveArea","triMouseDown","triDrag","triUp","lengthSubmit","alterStartPos1","alterStartPos2","svgColReturn","establishStateData","updateRadius","updateTicks","checkChange","toggleTri1","toggleTri2","returnTri1","returnTri2","changeColor1","changeColor2","changeJSON","onUpdateShapes","onFinishShapes","edgeLim","unitHeight","circRad","len1","len2","distancing","Math","ceil","colNumInit","internalLength","edgeCol","edgeLength","ceilDist","axisStart","axisStartCol","axisWidth","axisEndCol","axisEnd","triCent1","triCent2","triCentCol1","triCentCol2","variance1","abs","variance2","startPos1","distancing1","col11","col12","variance","endCol","colNumVal","tickNum","tickDist","rangeVal","startPos2","distancing2","col21","col22","fixCurve1","fixCurve2","axisLength","parseInt","color1","color2","maxLength","jsonData","x","y","isDown","rectX","down","svgWidth","svgHeight","svgX","colValHeiS","colValHeiS2","mousePointerRange","triDown","colLim1","round","colLim2","overlapVals","colNum","lowVal","showCoors","xPos","yPos","xPosOrig","CX","CY","stroke","fill","fillOpacity","strokeOpacity","cx","cy","r","points","onMouseDown","num","dragger","distFromCent","svg","pt","createSVGPoint","clientX","svgP","matrixTransform","getScreenCTM","inverse","preventDefault","col","colRelative","svgPre","ptPre","svgPPre","prevState","svgColPlacement","innerHTML","newLength","newData","newPos","radius","newTickCount","colVal","Boolean","newColor","configuredShapes","argArr","post","JSON","parse","replace","window","confirm","defaultVal","defaultCurveVal","dataType","defaultArg","whichArg","configArgs","onMouseMove","onMouseUp","Array","row","dotReturn2","tick","textAnchor","class","backgroundColor","updateColVal","for","sameSquareData","rlyDiffData","bigSmallData","NormalCurveResearch","arg7ref","handleDrop","handleSelectedFile","processJSON","selectNC","dataReceived","fileNames","setFileNames","fileChosen","content","saveFile","acceptedFiles","file","dataFlowColData","itemType","reader","FileReader","onabort","onerror","onload","fileText","result","files","readAsText","fileContent","currentTarget","unshift","sameSquare","alt","rlyDiff","bigSmall","ThresholdCurve","slider2Ref","radRef","stroke1Ref","stroke2Ref","stroke3Ref","stroke4Ref","fill1Ref","fill2Ref","fill3Ref","fill4Ref","distancing3","colWidth","displayVal1","displayVal2","rect1Width","rectHeight","rect2Width","onChange1","line1","line2","onChange2","onChange4","dotReturn1","dotReturn3","dotReturn4","rectReturn1","rectReturn2","rectReturn3","rectReturn4","rectReturn5","rectReturn6","rectReturn7","rectReturn8","textReturn","rect3Width","displayArr1","displayArr2","rect4Width","displayArr4","displayArr3","xPos1","xPos2","yPos1","yPos2","x1","x2","y1","y2","dottedLine","i","hard","stroke3","stroke4","fill4","stroke1","stroke2","fill2","xPos3","yPos3","xPos4","yPos4","fill1","fill3","rad","sliderPos","sliderPos2","legendKey","displayArr5","refArr5","indicesXPos","thumbDown","topSliderX","topSliderY","bottomSliderX","bottomSliderY","dragger1Pos","dragger2Pos","tedxt","index","b","left","changeStroke1","ThresholdCurveResearch","onDrop","accept","getRootProps","getInputProps","TabList","builderFunction","tabDefine","arr","children","tab","toString","curOutput","output","newCount","complete","deleted","expt","myRef","submitRef","nameRef","outputCreate","checkOutput","configDataToItem","checkValidInput","params","location","newExpt","thisExpt","exptObj","find","questionKey","thisQKey","questionToDisplay","newDelete","newFile","concat","obj","int","elem","lowNum","isNaN","highNum","indexOf","exptItem","finalObj","sendFile","put","response","reload","catch","error","studyLink","method","opacity","history","dataFlowDBInfo","dataFlowFileName","Navbar","userIsLoggedIn","Landing","HomePage","href","Register","onSubmit","newUser","password","password2","registerUser","nextProps","noValidate","classnames","invalid","userExists","userData","err","withRouter","Login","loginUser","userNotFound","pwdIncorrect","setItem","jwt_decode","Dashboard","onLogoutClick","onAddStudy","onDeleteStudy","getDBInfo","link","addStudyName","margin","getStudyNames","study_name","dataToPost","entry","ConfigStudy","deployed","deployExpts","changeState","onDeploy","onChecked","onDeleteExperiment","randomize","putRandomize","thisSudyDeployedExpt","split","database_name","nowState","dataToPut","processColNames","condition","surveyLink","exptDataLink","partExptDataLink","exptPartLink","previewLink","dbLink","exptBuilderLink","text","pathname","colName","conditionInfo","linkInfo","createExptCol","expt_name","exptNames","difference","color","partStudyDataLink","getExpts","deploy","which_expt","saveAddInfo","infoType","info","ExptConfigs","JSONString","stringify","showExptData","PartStudyData","makeArr","showJSONData","getIndex","partColNames","getColsData","flattendObj","flattenObject","keyName","newKey","oldKey","substr","renameKey","ids","participantID","ele","prevData","doc","newEle","flattenObj","line","allIndex","str","element","document","createElement","Blob","URL","createObjectURL","download","body","appendChild","click","file_name","filename","PartExptData","jwtToken","currentTime","Date","now","exp","App","basename","NavBar","exact","path","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.bf85b7a2.chunk.js","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Set up private routes so that only logged in users can see configuration components\n * @param {[Object]} param0 [Object containing component, authorization, and else]\n */\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      auth.isAuthenticated === true ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/login\" />\n      )}\n  />\n);\n\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);","// this will delete the Authorization header for axios requests \n// if the user is already logged in \n\nimport axios from \"axios\";\n\nconst setAuthToken = token => {\n    if (token) {\n        // Apply authorization token to every request if logged in\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else {\n        // Delete auth header\n        delete axios.defaults.headers.common[\"Authorization\"];\n    }\n};\n\nexport default setAuthToken;","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n\n/**\n * POST request to api to create a collection with user's login name\n * @param {[Object]} userData [json object contains username and password]\n * @param {[Object]} history [json object contains React history]\n */\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    // set up proxy in package.json later\n    .post(\"https://test-api-615.herokuapp.com/api/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n/**\n * POST request to api to grant jwtToken and login user\n * @param {[Object]} userData [json object contains username and password]\n */\nexport const loginUser = userData => dispatch => {\n  axios\n    // set up proxy in package.json later\n    .post(\"https://test-api-615.herokuapp.com/api/login\", userData)\n    .then(res => {\n      // Save to localStorage\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n/**\n * Set logged in user\n * @param {[Boolean]} decoded [whether the user is logged in]\n */\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n/**\n * Load user\n */\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n/**\n * Logout user\n */\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};","// reducers use types to put data into Redux store\n\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\n\nexport const ADD_STUDY_NAME = \"ADD_STUDY_NAME\";\nexport const GET_DB_INFO = \"GET_DB_INFO\";\nexport const GET_STUDY_INFO = \"GET_STUDY_INFO\";\nexport const GET_COL_DATA = \"GET_COL_DATA\";\nexport const GET_COLS_DATA = \"GET_COLS_DATA\";\nexport const GET_COL_NAMES = \"GET_COL_NAMES\";\n\nexport const STORE_FILENAME = \"STORE_FILENAME\";\nexport const DELETE_FILE = \"DELETE_FILE\";\nexport const SEND_FILE = \"SEND_FILE\";","import {\n    SET_CURRENT_USER,\n    USER_LOADING\n  } from \"../actions/types\";\n\nconst isEmpty = require(\"is-empty\"); \n\nconst initialState = {\n    isAuthenticated: false,\n    user: {},\n    loading: false\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            };\n        case USER_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        default: return state;\n    }\n}","import { GET_ERRORS } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS: return action.payload;\n        default: return state;\n    }\n}","import {\n  ADD_STUDY_NAME,\n  GET_DB_INFO,\n  GET_STUDY_INFO,\n  GET_COL_DATA,\n  GET_COLS_DATA,\n  GET_COL_NAMES,\n  STORE_FILENAME\n} from \"../actions/types\";\n\nconst initialState = {\n  studyName: '',\n  dbInfo: [],\n  studyInfo: [],\n  colData: [],\n  colsData: [],\n  colNames: [],\n  // files: []\n  fileName: ''\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_STUDY_NAME:\n      return {\n        ...state,\n        studyName: action.payload\n      };\n    case GET_DB_INFO:\n      return {\n        ...state,\n        dbInfo: action.payload\n      };\n    case GET_STUDY_INFO:\n      return {\n        ...state,\n        studyInfo: action.payload\n      };\n    case GET_COL_DATA:\n      return {\n        ...state,\n        colData: action.payload\n      };\n    case GET_COLS_DATA:\n      return {\n        ...state,\n        colsData: [...state.colsData, action.payload]\n      };\n    case GET_COL_NAMES:\n      return {\n        ...state,\n        colNames: action.payload\n      };\n    case STORE_FILENAME:\n      return {\n        ...state,\n        fileName: action.payload\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducers\";\nimport errorReducer from \"./errorReducers\";\nimport dataReducer from \"./dataReducers\";\n\nexport default combineReducers({\n  auth: authReducer,\n  errors: errorReducer,\n  dataFlow: dataReducer\n});","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\nconst middleware = [thunk];\n\n// ****** IMPORTANT ******\n// uncomment the line including __REDUX_DEVTOOLS_EXTENSION__ when developing\n// comment the line including __REDUX_DEVTOOLS_EXTENSION__ before \n// deploying to gh pages \n// (the line tells the browser to require devtools, but users don't have devtools)\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware)\n    // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;","import axios from \"axios\";\nimport {\n  ADD_STUDY_NAME,\n  GET_DB_INFO,\n  GET_STUDY_INFO,\n  GET_COL_DATA,\n  GET_COLS_DATA,\n  GET_COL_NAMES,\n  STORE_FILENAME\n} from \"./types\";\n\n/**\n * POST request to add a document containing study_name \n * @param {[String]} which_database [name of the database we are sending the document to]\n * @param {[String]} study_name [name of the study (user input)]\n */\nexport const addStudyName = (which_database, study_name) => dispatch => {\n  const dataToPost = {\n    studyName: study_name,\n    experiments: []\n  };\n  // We are adding the document to /info collection\n  axios\n    .post('https://test-api-615.herokuapp.com/api/feedback/' + which_database + '/info',\n      dataToPost)\n    .then(entry => {\n      // console.log(entry);\n      dispatch({\n        type: ADD_STUDY_NAME,\n        payload: entry.data.studyName\n      });\n      alert(\"Study [\" + study_name + \"] is created.\");\n      window.location.reload(true);\n    })\n}\n\n/**\n * Get all documents from the /info collection of which_database\n * @param {[String]} which_database [name of the database we want to query]\n */\nexport const getDBInfo = (which_database) => dispatch => {\n  axios\n    .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database + '/info')\n    .then(res => {\n      dispatch({\n        type: GET_DB_INFO,\n        payload: res.data\n      })\n    })\n}\n\n/**\n * Get all experiments associated with which_study\n * @param {[String]} which_database [name of the database we want to query]\n * @param {[String]} which_study [name of the study we want to query]\n */\nexport const getStudyInfo = (which_database, which_study) => dispatch => {\n  axios\n    .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database +\n      '/info/studyName-' + which_study)\n    .then(res => {\n      dispatch({\n        type: GET_STUDY_INFO,\n        // note we are grabbing the experiments object from res.data\n        payload: res.data.experiments\n      });\n    })\n}\n\n/**\n * PUT request to add additional information to a specific element of the \n * experiments array in a stufy document\n * @param {[String]} which_database [name of the database we want to query]\n * @param {[String]} study_name [name of the study we want to query]\n * @param {[String]} expt_name [experiment name]\n * @param {[String]} infoType [either 'link' or 'condition']\n * @param {[Object]} info [a JSON object in the format {infoType: \"some_data\"}]\n */\nexport const saveAddInfo = (which_database, study_name, expt_name, infoType, info) => dispatch => {\n  axios\n    .put('https://test-api-615.herokuapp.com/api/feedback/' + which_database + \n      '/info/studyName-' + study_name + '/experiments/exptName-' + expt_name + '/' + infoType,\n      info)\n    .then(res => {\n      // Note we don't need to save any data to Redux store\n      console.log(res.data);\n    })\n} \n\n/**\n * POST request to create a collection to store participant data for which_expt\n * @param {[String]} which_database [database name]\n * @param {[String]} col_name [name of the collection to be created]\n * @param {[String]} which_expt [name of the experiment to be deployed]\n */\nexport const createExptCol = (which_database, col_name, which_expt) => dispatch => {\n  axios\n    .post('https://test-api-615.herokuapp.com/api/' + which_database +\n      \"/createCol/\" + col_name)\n    .then(res => {\n      // we can potentially improve the alert box\n      alert(\"Experiment [\" + which_expt + \"] is deployed.\");\n      window.location.reload(true);\n    })\n}\n\n/**\n * Get participant data from col_name \n * @param {[String]} which_database [name of the database we want to query]\n * @param {[String]} col_name [name of the collection we want to query]\n */\nexport const getColData = (which_database, col_name) => dispatch => {\n  axios\n    .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database +\n      \"/\" + col_name)\n    .then(res => {\n      // set collection data in redux store\n      dispatch({\n        type: GET_COL_DATA,\n        payload: res.data\n      })\n    })\n}\n\n/**\n * Get participant data from col_name then append data to Redux store\n * ( Look at reducers to see the different between getColData and getColsData )\n * @param {[String]} which_database [database name]\n * @param {[String]} col_name [collection name]\n */\nexport const getColsData = (which_database, col_name) => dispatch => {\n  axios\n  .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database +\n    \"/\" + col_name)\n  .then(res => {\n    res.data.forEach(doc => {\n      // append collection data to redux store\n      dispatch({\n        type: GET_COLS_DATA,\n        payload: doc\n      })\n    })\n  })\n}\n\n/**\n * Get all collection names from which_database\n * @param {[String]} which_database [database name]\n */\nexport const getColNames = (which_database) => dispatch => {\n  axios\n    .get('https://test-api-615.herokuapp.com/api/' + which_database + \"/collections\")\n    .then(res => {\n      dispatch({\n        type: GET_COL_NAMES,\n        payload: res.data\n      })\n    })\n}\n\n// forgot if this function is useful\n// export const storeFileName = (fileName) => dispatch => {\n//   dispatch({\n//     type: STORE_FILENAME,\n//     payload: fileName\n//   })\n// }\n\n/**\n * DEPRECATED method: POST request to send user uploaded data to database\n * under the \"itemData\" collection\n * @param {[String]} which_database [database name]\n * @param {[Object]} file [a json object containing experiment item config data]\n */\nexport const sendFile = (which_database, file) => dispatch => {\n  axios\n    .post('https://test-api-615.herokuapp.com/api/feedback/' + which_database + \n      \"/itemData\", file)\n    .then(res => {\n      console.log(\"Data sent to DB\");\n    })\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  getStudyInfo\n} from \"../../actions/dataActions\"\n\nclass TabBuilder extends Component {\n  constructor(props) {\n    super(props);\n    this.selectRef = React.createRef();\n    this.importQRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // username and studyName are passed from TabList.jsx\n    const username = this.props.username;\n    const studyName = this.props.studyName;\n    this.props.getStudyInfo(username, studyName);\n  }\n\n  // ###TODO###: add more switch statements here when adding a new component\n  // ###TODO###: the switch statement is not super necessary, pls improve\n  /**\n   * Convert question type to its key in json\n   * @param {[String]} qType [question type]\n   */\n  mapQTypetoQKey(qType) {\n    switch(qType) {\n      case \"slider\":\n        return \"slider-question-key\"\n      case \"static-text\":\n        return \"static-text-key\"\n      case \"normal-curve\":\n        return \"normal-curve-question-key\"\n      case \"threshold\":\n        return \"threshold-key\"\n      default:\n        return \"\"\n    }\n  }\n\n  render() {\n    var allGroups;\n    // this object contains the mapping from questions to their experiment\n    var qSelectedToExptname = {};\n    // the following block of code generates the content of a dropdown menu\n    // for researchers to select which question them want to import \n    if (!this.props.experiments.length == 0) {\n      const allExpts = this.props.experiments;\n      const renderOption = item => <option value={item}>{item}</option>\n      // per experiment\n      // input: item represents a JSON object containing the configuration data\n      //        of a specific experiment \n      const renderGroup = item => {\n        const qKeys = Object.keys(item).filter(\n          k => k.charAt(0) == \"q\");\n        // qArr contains all csvColNames of all questions in an experiment\n        var qArr = [];\n        qKeys.forEach(k => {\n          const question = item[k]; \n          const qKey = this.mapQTypetoQKey(question[\"Type\"]);\n          const csvColName = question[qKey];\n          qArr.push(csvColName);\n        })\n        qArr.map(q => qSelectedToExptname[q] = item.exptName);\n        const qOptions = qArr.map(renderOption);\n        return (\n          <optgroup label={item.exptName}>\n            {qOptions}\n          </optgroup>\n        )\n      }\n      allGroups = allExpts.map(renderGroup);\n    }\n\n    return (\n      <div>\n        <br/>\n        <div className=\"boxed\"> \n          <span>Choose what element to add next</span><br />\n          <select name=\"tabType\" id=\"tabType\" ref={this.selectRef}>\n            {/* <option value=\"slider\">Slider</option> */}\n            <option value=\"static-text\">Static Text</option>\n            <option value=\"normal-curve\">Normal Curve</option>\n            <option value=\"threshold\">Threshold</option>\n          </select>\n          <button onClick={() => this.props.build(this.selectRef.current.value)}>+</button>\n          <br/><br/>\n          OR\n          <br/><br/>\n          {\n            this.props.experiments.length == 0 \n            ? \n            <div>\n              Cannot import question from another experiment because there are no \n              experiments in this study yet.\n            </div>\n            :\n            <div>\n              <span>Import a question from another experiment in this study</span><br/>\n              <select name=\"importQue\" id=\"importQue\" ref={this.importQRef}>\n                {allGroups}\n              </select>\n              <button onClick={() => \n                // importQuestion lives in TabList.jsx\n                this.props.importQuestion(\n                  qSelectedToExptname[this.importQRef.current.value], \n                  this.importQRef.current.value)}>\n                +\n              </button>\n            </div>\n          }\n        </div>\n      </div>\n    ) \n  }\n}\n\nTabBuilder.propTypes = {\n  getStudyInfo: PropTypes.func.isRequired,\n  experiments: PropTypes.array.isRequired\n}\n\nconst mapStateToProps = state => ({\n  experiments: state.dataFlow.studyInfo\n})\n\nexport default connect(\n  mapStateToProps,\n  { getStudyInfo }\n)(TabBuilder);","import React, { Component } from 'react';\nimport './SliderTab.css';\n\nclass SliderTab extends Component {\n  constructor(props) {\n    super(props);\n    this.sliderRef = React.createRef();\n    this.outputRef = React.createRef();\n    this.qRef = React.createRef();\n    this.minRef = React.createRef();\n    this.maxRef = React.createRef();\n    this.state = { min: 1, max: 100 }\n    this.keyRef = React.createRef();\n\n    // console.log(this.props);\n\n    this.state = {\n      checked: false,\n      minVal: Number,\n      maxVal: Number\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.appendToKeysArr = this.appendToKeysArr.bind(this);\n  }\n\n  delete() {\n    this.props.delete(this.props.count);\n  }\n\n  getCount() {\n    this.props.getCount(this.props.count);\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleChange(type, q, count) {\n    this.props.handleChange(type, q, count);\n  }\n\n  componentDidMount() {\n    if (this.props.imported) {\n      this.handleChange(\"Question\", this.props.defaultQ, this.props.count);\n      this.handleChange(\"lowRange\", this.props.defaultMin, this.props.count);\n      this.handleChange(\"highRange\", this.props.defaultMax, this.props.count);\n    }\n  }\n\n  appendToKeysArr(objType, nameType, csvColName, count) {\n    this.props.appendToKeysArr(objType, nameType, csvColName, count);\n  }\n\n  render() {\n    const qNum = this.props.count + 1;\n    return (\n      <form className=\"unit\">\n        <br/>\n        Question #{qNum} \n        <br/><br/>\n        <p>Enter your question below:\n        <br/>\n        <input onInput={() => this.handleChange(\"Question\", this.qRef.current.value, this.props.count)} \n          ref={this.qRef} type=\"text\" defaultValue={this.props.defaultQ}/></p><br/>\n        {/* { this.qRef.current.value == null ? this.props.min : this.qRef.current.value } */}\n        <input type=\"range\" min=\"1\" max=\"100\" defaultValue=\"50\" className=\"slider\" name=\"myRange\" id=\"myRange\" ref={this.sliderRef} />\n        {this.state.maxVal} <br/>\n        <p>Minimum: \n          <input onInput={() => this.handleChange(\"lowRange\", this.minRef.current.value, this.props.count)} \n          ref={this.minRef} type=\"text\" \n          defaultValue={this.props.defaultMin}\n          // name=\"minVal\" value={this.state.minVal} onChange={this.onChange}\n          /></p><br/>\n        {/* <p>Value: <span id=\"slider1\" ref={this.outputRef}></span></p> */}\n        <p>Maximum: <input onInput={() => this.handleChange(\"highRange\", this.maxRef.current.value, this.props.count)} \n          ref={this.maxRef} type=\"text\" \n          defaultValue={this.props.defaultMax}\n          // name=\"maxVal\" value={this.state.maxVal} onChange={this.onChange}\n          /></p>\n        <br/><br/>\n        What csv column name do you want to assign to this question? <br/>\n        <b>Please use letters only, and the name must be unique.</b> <br/>\n        Recommedation: include your experiment name, this question number \n        ({qNum}), and the question type (slider)\n        <br/>\n        <input type=\"text\" ref={this.keyRef} \n          onInput={() => {\n            // this.appendToKeysArr(\n            //   \"csvColNames\", \n            //   \"slider-question-key\", \n            //   this.keyRef.current.value, \n            //   this.props.count);\n            this.handleChange(\"slider-question-key\", this.keyRef.current.value, this.props.count)\n            // this.appendToKeysArr(\n            //   \"keyValuePairs\",\n              \n            // )\n          }}/>\n        <br/><br/>\n        <button onClick={this.delete.bind(this)}>Delete</button>\n      </form>\n    )\n  }\n}\n\nexport default SliderTab;","import React, { Component, useCallback } from 'react';\nimport Dropzone, { useDropzone } from \"react-dropzone\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { \n  getColData\n} from '../../../actions/dataActions'\n\nconst thumbsContainer = {\n  justifyContent: 'center',\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16\n};\n\nconst thumbWithDelete = {\n  display: 'inline-block',\n  justifyContent: 'center',\n  alignItems: 'center'\n}\n\nconst thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: 'border-box'\n};\n\nconst thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden'\n};\n\nclass StaticText extends Component {\n  constructor(props) {\n    super(props);\n    this.qRef = React.createRef();\n    this.keyRef = React.createRef();\n    this.imageRef = React.createRef();\n\n    this.state = {\n      images: [],\n      names: [],\n      count: 0\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onDeleteImage = this.onDeleteImage.bind(this);\n    this.handleImageURL = this.handleImageURL.bind(this);\n  }\n\n  /**\n   * Deletes this element in the parent element if called\n   * @param  \n   * @return \n   */\n  delete() {\n    this.props.delete(this.props.count);\n  }\n\n  /**\n   * Change the state within the normal curve component\n   * @param {Event} e some event\n   */\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  /**\n   * Calls props function handleChange to update parent element\n   * This function is inherited from TabList.jsx\n   * !!! This function updates the final obj to send to the database !!!\n   * @param  {[String]} key [key in parent that must be updated]\n   * @param  {[Any]} value [new value for key]\n   * @param  {[Number]} count [count of current element in parent list]\n   * @return \n   */\n  handleChange(type, q, count) {\n    this.props.handleChange(type, q, count);\n  }\n\n  /**\n   * Deletes the selected \n   * @param {Event} e an event to delete an image\n   */\n  onDeleteImage(e) {\n    // update both state and finalObj\n    const arrRemovedImg = this.state.images.filter(imag => imag.name != e.target.id);\n    this.setState({ images: arrRemovedImg });\n    this.handleChange(\"Images\", arrRemovedImg, this.props.count);\n  }\n\n  /**\n   * Parses the original URL into a URL that's accessible via HTML\n   * @param {String} rawURl the URL to an image on google drive\n   * \n   * Example: \n   * https://drive.google.com/file/d/1EfTINoAi0YUfR_3rECe_vDT9CtfGTlO-/view?usp=sharing\n   * to \n   * https://drive.google.com/uc?export=view&id=1EfTINoAi0YUfR_3rECe_vDT9CtfGTlO-\n   */\n  async handleImageURL(rawURl) {\n    if (rawURl != '') {\n      this.state.count += 1;\n      const reg = 'file/d/(.*)/view?';\n      const match_arr = rawURl.match(reg);\n      if (match_arr == null) {\n        alert(\"Please make sure you have copied a valid URL\");\n      } else {\n        // the actual id is the second element in the array because \n        // the first element includes file/d/ and /view?\n        const imageID = match_arr[1];\n        const parsedURL = \"https://drive.google.com/uc?export=view&id=\" + imageID\n        console.log(parsedURL);\n        // this.getBase64Image(parsedURL);\n        const imag = {\n          'name': this.state.count,\n          'parsedLink': parsedURL,\n          'originalLink': rawURl\n        }\n        await this.setState({ images: [...this.state.images, imag] });\n        this.handleChange(\"Images\", this.state.images, this.props.count);\n        this.imageRef.current.value = '';\n      }\n    }\n  }\n\n  componentDidMount() {\n    // NOTE: this.props.import includes both situations:\n    // - \"import question from another experiment\" \n    //    - (you'll see this when u have at least one experiment in your study)\n    // - \"Edit experiment\"\n    if (this.props.imported) {\n      // we only want to show the actual content because the question is imported \n      // (researchers may want to use different csv column names)\n      this.handleChange(\"Static Text\", this.props.qToDisplay[\"Static Text\"], this.props.count);\n      this.handleChange(\"Images\", this.props.qToDisplay[\"Images\"], this.props.count);\n      if (Object.keys(this.props.qToDisplay).includes(\"Images\")) {\n        this.setState({ images: this.props.qToDisplay[\"Images\"] });\n        var previousCount = 0;\n        const arrayLength = this.props.qToDisplay[\"Images\"].length;\n        if (arrayLength != 0) {\n          const lastElement = this.props.qToDisplay[\"Images\"][arrayLength - 1];\n          previousCount = lastElement.name;\n        }\n        this.setState({ count: previousCount });\n      }\n    }; \n    // Note: this.props.editing only includes \"Edit Experiment\" situation\n    if (this.props.editing) {\n      // we want to show previous csv column names because researchers want to make edits\n      this.handleChange(\"static-text-key\", this.props.qToDisplay[\"static-text-key\"], this.props.count);\n    }; \n  }\n\n  render() {\n    const qNum = this.props.count + 1;\n    // show preview thumbnails\n    var Images = ({sth}) => <img src={''} />\n    if (this.state.images.length != 0) {\n      Images = ({sth}) => (\n        this.state.images.map(imag => (\n          <div style={thumbWithDelete}>\n            <div style={thumb} key={imag.name}>\n              <div style={thumbInner}>\n                <img src={imag.parsedLink} style={{ height: \"100%\", width: \"100%\" }}/>\n              </div>\n            </div>\n            <br/>\n            <button id={imag.name} onClick={this.onDeleteImage}>\n              Delete\n            </button>\n          </div>\n        ))\n      );\n    }\n    return (\n      <div>\n        <div className=\"boxed\">\n          <br/>\n          Question #{qNum} \n          <br/>\n          Enter your static text below: <br/>\n          {\n            this.props.imported\n            ?\n            <textarea cols=\"60\" rows=\"10\" ref={this.qRef} \n            defaultValue={this.props.qToDisplay[\"Static Text\"]}\n            onInput={() => this.handleChange(\"Static Text\", this.qRef.current.value, this.props.count)}>\n            </textarea>\n            :\n            <textarea cols=\"60\" rows=\"10\" ref={this.qRef} \n            onInput={() => this.handleChange(\"Static Text\", this.qRef.current.value, this.props.count)}>\n            </textarea>\n          }\n          <br/><br/>\n          Add image(s) by pasting shared Google Drive link below:\n          <br/>\n          <textarea cols=\"60\" rows=\"3\" ref={this.imageRef} \n            onInput={() => this.handleImageURL(this.imageRef.current.value)}\n            placeholder=\"Paste a new link here\">\n          </textarea>\n          <div style={thumbsContainer}>\n            <Images data={''} />\n          </div>\n          <br/>\n          What csv column name do you want to assign to this question? <br/>\n          <b>Please use letters only, the name must be unique, leave no space between letters.</b> <br/>\n          Recommedation: include your experiment name, this question number \n          ({qNum}), and the question type (staticText)\n          <br/>\n          {\n            this.props.editing \n            ? \n            <input type=\"text\" ref={this.keyRef} \n            defaultValue={this.props.qToDisplay[\"static-text-key\"]}\n            onInput={() => this.handleChange(\"static-text-key\", this.keyRef.current.value, this.props.count)}/>\n            :\n            <input type=\"text\" ref={this.keyRef} \n            onInput={() => this.handleChange(\"static-text-key\", this.keyRef.current.value, this.props.count)}/>\n          }\n          <br/><br/>\n          <button onClick={this.delete.bind(this)}>Delete</button>\n        </div>\n        <br/><br/><br/><br/>\n      </div>\n    )\n  }\n}\n\nexport default StaticText;","import React, { Component } from 'react';\nimport './NormalCurve.css';\nimport axios from 'axios';\nimport { json } from 'd3';\n\nclass NormalCurve extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sliderRef = React.createRef();\n    this.rectRef = React.createRef();\n    this.svgRef = React.createRef();\n    this.areaRef = React.createRef();\n    this.lengthRef = React.createRef();\n    this.startPos1Ref = React.createRef();\n    this.startPos2Ref = React.createRef();\n    this.graph1keyRef = React.createRef();\n    this.graph2keyRef = React.createRef();\n    this.qRef = React.createRef();\n    this.colNumValRef = React.createRef();\n    this.radiusRef = React.createRef();\n    this.ticksRef = React.createRef();\n    this.checkBoxRef = React.createRef();\n    this.toggleTriRef1 = React.createRef();\n    this.toggleTriRef2 = React.createRef();\n    this.questionKeyRef = React.createRef();\n    this.legendKey1Ref = React.createRef();\n    this.legendKey2Ref = React.createRef();\n    this.color1Ref = React.createRef();\n    this.color2Ref = React.createRef();\n\n    this.arg0ref = React.createRef();\n    this.arg1ref = React.createRef();\n    this.arg2ref = React.createRef();\n    this.arg3ref = React.createRef();\n    this.arg4ref = React.createRef();\n    this.arg5ref = React.createRef();\n    this.arg6ref = React.createRef();\n\n    this.dotReturn = this.dotReturn.bind(this);\n    this.curveArea = this.curveArea.bind(this);\n    this.triMouseDown = this.triMouseDown.bind(this);\n    this.triDrag = this.triDrag.bind(this);\n    this.triUp = this.triUp.bind(this);\n    this.curveArea = this.curveArea.bind(this);\n    this.lengthSubmit = this.lengthSubmit.bind(this);\n    // this.toggleXVals = this.toggleXVals.bind(this);\n    this.alterStartPos1 = this.alterStartPos1.bind(this);\n    this.alterStartPos2 = this.alterStartPos2.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.svgColReturn = this.svgColReturn.bind(this);\n    this.svgColReturn = this.svgColReturn.bind(this);\n    this.establishStateData = this.establishStateData.bind(this);\n    this.updateRadius = this.updateRadius.bind(this);\n    this.updateTicks = this.updateTicks.bind(this);\n    this.checkChange = this.checkChange.bind(this);\n    this.toggleTri1 = this.toggleTri1.bind(this);\n    this.toggleTri2 = this.toggleTri2.bind(this);\n    this.returnTri1 = this.returnTri1.bind(this);\n    this.returnTri2 = this.returnTri2.bind(this);\n    this.changeColor1 = this.changeColor1.bind(this);\n    this.changeColor2 = this.changeColor2.bind(this);\n    this.changeJSON = this.changeJSON.bind(this);\n    this.onUpdateShapes = this.onUpdateShapes.bind(this);\n    this.onFinishShapes = this.onFinishShapes.bind(this);\n\n    this.state = this.establishStateData(this.props.data);\n  }\n\n  /**\n   * Sets the shared area upon loading\n   * @param\n   * @return\n   */\n  componentDidMount() {\n    this.curveArea();\n  }\n\n  /**\n   * Creates data for state upon loading the element\n   * @param  {[Object]} data [JSON file data for element]\n   * @return {[type]}     [JSON data for setting state]\n   */\n  establishStateData(data) {\n    // console.log(\"establishStateData()\", new Date());\n    const unitHeight = data[\"max-height\"];\n    const circRad = data[\"circle-radius\"];\n    const len1 = data[\"len1\"];\n    const len2 = data[\"len2\"];\n    const distancing = circRad * 4 - 1;\n    const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\n\n    const colNumInit = data[\"axis-length\"];\n    const internalLength = colNumInit * distancing;\n    const edgeCol = Math.ceil(Math.max(len1, len2) / 2);\n    const edgeLength = Math.max(len1, len2) * distancing;\n\n    const ceilDist = height - 50;\n    const length = edgeLength + internalLength;\n    const colNum = Math.ceil(length / distancing);\n\n    const axisStart = Math.ceil(edgeLength / 2);\n    const axisStartCol = edgeCol;\n    const axisWidth = length - ((len1 / 2 + 1) * distancing + (len2 / 2 + 1) * distancing - 1);\n    const axisEndCol = internalLength / distancing;\n    const axisEnd = axisEndCol * distancing;\n\n    const triCent1 = Math.ceil(0.5 * len1) * distancing;\n    const triCent2 = Math.ceil(0.5 * len2) * distancing;\n    const triCentCol1 = Math.ceil(triCent1 / distancing);\n    const triCentCol2 = Math.ceil(triCent2 / distancing);\n\n    const variance1 = Math.abs(Math.ceil(len1 / 2) - axisStartCol);\n    const variance2 = Math.abs(Math.ceil(len2 / 2) - axisStartCol);\n\n    let edgeLim;\n    if (\"edgeLim\" in data) {\n      edgeLim = data[\"edgeLim\"];\n    }\n    else {\n      edgeLim = false;\n    }\n\n    const startPos1 = data[\"startPos1\"];\n    let distancing1 = startPos1 + variance1 - 1;\n    let col11 = startPos1 + variance1;\n    let col12 = startPos1 + len1 - 1;\n    let col11Rel = startPos1;\n\n    let variance = axisStartCol - variance1;\n    if (edgeLim) {\n      if (col11 < axisStartCol - 1) {\n        distancing1 = (axisStartCol - 1) * distancing;\n        col11 = 0;\n        col12 = len1 - 1;\n      }\n      else if (col11 + len1 + 1 > axisStartCol + axisEndCol) {\n        const endCol = axisEndCol - len1;\n        distancing1 = distancing * (axisStartCol + endCol - 1);\n        col11 = endCol;\n        col12 = endCol + len2 - 1;\n      }\n      else {\n        distancing1 = distancing * col11;\n        col11 = col11Rel - variance;\n        col12 = col11Rel - variance + len1 - 1;\n      }\n    }\n    else {\n      // col11 = col11 - 1;\n      if (col11 + triCentCol1 < axisStartCol) {\n        distancing1 = (variance1) * distancing;\n        col11 = 0;\n        col12 = len1 - 1;\n      }\n      else if (col11 + triCentCol1 > axisStartCol + axisEndCol) {\n        distancing1 = distancing * (variance1 + axisEndCol);\n        col11 = axisEndCol;\n        col12 = axisEndCol + len1 - 1;\n      }\n      else {\n        distancing1 = distancing * (col11);\n        col11 = col11Rel;\n        col12 = col11Rel + len1 - 1;\n      }\n    }\n\n    const startPos2 = data[\"startPos2\"];\n    let distancing2 = startPos2 + variance2 - 1;\n    let col21 = startPos2 + variance2;\n    let col22 = startPos2 + len2 - 1;\n    let col21Rel = startPos2;\n\n    variance = axisStartCol - variance2;\n    if (edgeLim) {\n      if (col21 < axisStartCol - 1) {\n        distancing2 = (axisStartCol - 1) * distancing;\n        col21 = 0;\n        col22 = len2 - 1;\n      }\n      else if (col21 + len2 + 1 > axisStartCol + axisEndCol) {\n        const endCol = axisEndCol - len2;\n        distancing2 = distancing * (axisStartCol + endCol);\n        col21 = endCol;\n        col22 = endCol + len2 - 1;\n      }\n      else {\n        distancing2 = distancing * col21;\n        col21 = col21Rel - variance;\n        col22 = col21Rel - variance + len2 - 1;\n      }\n    }\n    else {\n      // col21 = col21 - 1;\n      if (col21 + triCentCol2 < axisStartCol) {\n        distancing2 = (variance2) * distancing;\n        col21 = 0;\n        col22 = len2 - 1;\n      }\n      else if (col21 + triCentCol2 > axisStartCol + axisEndCol) {\n        distancing2 = distancing * (variance2 + axisEndCol - 1);\n        col21 = axisEndCol;\n        col22 = axisEndCol + len2 - 1;\n      }\n      else {\n        distancing2 = distancing * (col21);\n        col21 = col21Rel;\n        col22 = col21Rel + len2 - 1;\n      }\n    }\n\n    let colNumVal;\n    if (\"colNumVal\" in data) {\n      colNumVal = this.props.data[\"colNumVal\"];\n    }\n    else {\n      colNumVal = 1;\n    }\n\n    let tickNum;\n    let tickDist;\n    let rangeVal;\n    const axisLength = colNumInit * colNumVal;\n    if (\"tickNum\" in data && axisLength % (parseInt(data[\"tickNum\"]) + 1) === 0) {\n      tickNum = parseInt(data[\"tickNum\"]);\n      tickDist = colNumInit * distancing / (tickNum + 1);\n      rangeVal = axisLength / (tickNum + 1);\n    }\n    else {\n      tickNum = 0;\n      tickDist = axisLength;\n      rangeVal = axisLength;\n    }\n\n    let fixCurve1;\n    if (\"fixCurve1\" in data) {\n      fixCurve1 = data[\"fixCurve1\"];\n    }\n    else {\n      fixCurve1 = false;\n    }\n\n    let fixCurve2;\n    if (\"fixCurve2\" in data) {\n      fixCurve2 = data[\"fixCurve2\"];\n    }\n    else {\n      fixCurve2 = false;\n    }\n\n    let maxLength = len1;\n    if (len2 > len1) {\n      maxLength = len2;\n    }\n\n    let color1;\n    if (\"color1\" in data) {\n      color1 = data[\"color1\"];\n    }\n    else {\n      color1 = \"CornflowerBlue\";\n    }\n\n    let color2;\n    if (\"color2\" in data) {\n      color2 = data[\"color2\"];\n    }\n    else {\n      color2 = \"Crimson\";\n    }\n\n    return {\n      jsonData: data,\n      axisLength: data[\"axis-length\"],\n      startPos1: data[\"startPos1\"],\n      startPos2: data[\"startPos2\"],\n      x: 0, y: 0, isDown: false,\n      rectX: 12.5,\n      down: false,\n      svgWidth: length,\n      svgHeight: height,\n      svgX: 6,\n      len1: len1,\n      colValHeiS: data[\"colValHeiS\"],\n      len2: len2,\n      colValHeiS2: data[\"colValHeiS2\"],\n      distancing: distancing,\n      distancing1 : distancing1,\n      distancing2: distancing2,\n      triCent1: triCentCol1 * distancing,\n      triCentCol1: triCentCol1,\n      triCent2: triCentCol2 * distancing,\n      triCentCol2: triCentCol2,\n      mousePointerRange: 0,\n      triDown: false,\n      col11: col11,\n      col12: col12,\n      col21: col21,\n      col22: col22,\n      colLim1: Math.round((length - (len1 * distancing)) / distancing),\n      colLim2: Math.round((length - (len2 * distancing)) / distancing),\n      overlapVals: data[\"overlapVals\"],\n      circRad: circRad,\n      ceilDist: ceilDist,\n      axisStart: axisStart,\n      axisStartCol: axisStartCol,\n      axisWidth: axisWidth,\n      axisEnd: axisEnd,\n      axisEndCol: axisEndCol,\n      edgeCol: edgeCol,\n      edgeLength: edgeLength,\n      colNum: colNumInit,\n      variance1: variance1,\n      variance2: variance2,\n      lowVal: this.props.data[\"lowVal\"],\n      showCoors: true,\n      colNumVal: colNumVal,\n      tickNum: tickNum,\n      tickDist: tickDist,\n      rangeVal: rangeVal,\n      edgeLim: edgeLim,\n      fixCurve1: fixCurve1,\n      fixCurve2: fixCurve2,\n      maxLength: maxLength,\n      color1: color1,\n      color2: color2\n    };\n  }\n\n  /**\n   * Returns the <circle> for a given point on the first curve\n   * @param  {[Number]} xPos [X coordinate of circle]\n   * @param  {[Number]} yPos [Y coordinate of circle]\n   * @return {[JSX Object]}  [SVG Circle element]\n   */\n  dotReturn(xPos, yPos) {\n    const xPosOrig = xPos;\n\n    const CX = this.state.distancing1 + this.state.distancing * (xPosOrig + 1) + this.state.circRad - this.state.maxLength + 10;\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\n\n    var hard = \n    <circle \n    // onMouseEnter={e => this.displayTag1(e)}\n    // onMouseLeave={e => this.hideTag1(e)}\n    // onMouseMove={e => this.updateTag1(e)} \n    className=\"icon\" \n    stroke={this.state.color1} \n    fill={this.state.color1}\n    fillOpacity=\"0.3\" \n    strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}>\n    </circle>;\n\n    return hard;\n  }\n\n  /**\n   * Returns the <circle> for a given point on the second curve\n   * @param  {[Number]} xPos [X coordinate of circle]\n   * @param  {[Number]} yPos [Y coordinate of circle]\n   * @return {[JSX Object]}  [SVG Circle element]\n   */\n  dotReturn2(xPos, yPos) {\n    const xPosOrig = xPos;\n\n    const CX = this.state.distancing2 + this.state.distancing * (xPosOrig + 1) + this.state.circRad - this.state.maxLength + 10;\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\n\n    var hard = \n    <circle \n    // onMouseEnter={e => this.displayTag2(e)}\n    // onMouseLeave={e => this.hideTag2(e)}\n    // onMouseMove={e => this.updateTag2(e)} \n    className=\"icon\" \n    stroke={this.state.color2}\n    fill={this.state.color2}\n    fillOpacity=\"0.3\" \n    strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}>\n\n    </circle>;\n\n    return hard;\n  }\n\n  /**\n   * Returns the <polygon> for the triangle of the first curve\n   * @param  \n   * @return {[JSX Object]}  [SVG Polygon element]\n   */\n  returnTri1() {\n    if (this.state.fixCurve1) {\n      return (null);\n    }\n    else {\n      return (\n        <polygon\n            points={\n              [\n                [this.state.triCent1 + this.state.distancing1 - 15, this.state.ceilDist + 35],\n                [this.state.triCent1 + this.state.distancing1 + 15, this.state.ceilDist + 35],\n                [this.state.triCent1 + this.state.distancing1, this.state.ceilDist + 20]\n              ]\n            }\n            onMouseDown={(e, num) => this.triMouseDown(e, 1)}\n          />\n      )\n    }\n  }\n\n  /**\n   * Returns the <polygon> for the triangle of the second curve\n   * @param  \n   * @return {[JSX Object]}  [SVG Polygon element]\n   */\n  returnTri2() {\n    if (this.state.fixCurve2) {\n      return (null);\n    }\n    else {\n      return (\n        <polygon\n            points={\n              [\n                [this.state.triCent2 + this.state.distancing2 - 15, this.state.ceilDist + 35],\n                [this.state.triCent2 + this.state.distancing2 + 15, this.state.ceilDist + 35],\n                [this.state.triCent2 + this.state.distancing2, this.state.ceilDist + 20]\n              ]\n            }\n            onMouseDown={(e, num) => this.triMouseDown(e, 2)}\n          />\n      )\n    }\n  }\n\n  /**\n   * Returns the position of the triangle being dragged as a column relative to the\n   * absolute position and relative to the given starting value\n   * @param  {[Event]} e [Standard event sent when mouse movement occurs in javascript]\n   * @param  {[Number]} Dragger [1 for the first curve, 2 for the second]\n   * @return {[Number, Number]}  [Column position of triangle relative to absolute axis width,\n   * relative to starting position]\n   */\n  svgColReturn(e, dragger) {\n    let distFromCent;\n    let variance;\n    if (dragger === 1) {\n      distFromCent = this.state.triCentCol1;\n      variance = this.state.variance1;\n    }\n    else if (dragger === 2) {\n      distFromCent = this.state.triCentCol2;\n      variance = this.state.variance2;\n    }\n    var svg = this.svgRef.current;\n    var pt = svg.createSVGPoint();\n    pt.x = e.clientX;\n    var svgP = pt.matrixTransform(svg.getScreenCTM().inverse());\n    e.preventDefault();\n    var x = svgP.x - distFromCent + this.state.mousePointerRange;\n    var col = Math.round((x - this.state.axisStart) / this.state.distancing) + variance;\n    var colRelative = Math.round((x - this.state.axisStart) / this.state.distancing) - 1;\n    // console.log(col, colRelative, variance);\n    return [col, colRelative];\n  }\n\n  /**\n   * Updates state to reflect changes in curve position after mouse movement\n   * @param  {[Number]} col [Position of the curve in the SVG element]\n   * @param  {[Number]} colRelative [Position of the curve on the axis relative to the starting value]\n   * @param  {[Number]} dragger [1 for first curve, 2 for second curve]\n   * @return \n   */\n  svgColPlacement(col, colRelative, dragger) {\n    // console.log(col);\n    // console.log(this.state.axisStartCol);\n    // console.log(this.state.axisStart);\n    if (this.state.edgeLim) {\n      if (dragger === 2) {\n        const variance = this.state.axisStartCol - this.state.variance2;\n        if (col < this.state.axisStartCol - 1) {\n          // console.log(\"edge\");\n          this.setState({ distancing2: (this.state.axisStartCol - 1) * this.state.distancing, col21: 0, col22: this.state.len2 - 1 });\n        }\n        else if (col + this.state.len2 + 1 > this.state.axisStartCol + this.state.axisEndCol) {\n          const endCol = this.state.axisEndCol - this.state.len2;\n          this.setState({ distancing2: this.state.distancing * (this.state.axisStartCol + endCol - 1), col21: endCol, col22: endCol + this.state.len2 - 1 })\n        }\n        else {\n          this.setState({ distancing2: this.state.distancing * col, col21: colRelative - variance, col22: colRelative - variance + this.state.len2 - 1 });\n        }\n        this.curveArea();\n      }\n      else if (dragger === 1) {\n        const variance = this.state.axisStartCol - this.state.variance1;\n        if (col < this.state.axisStartCol - 1) {\n          this.setState({ distancing1: (this.state.axisStartCol - 1) * this.state.distancing, col11: 0, col12: this.state.len1 - 1 });\n        }\n        else if (col + this.state.len1 + 1 > this.state.axisStartCol + this.state.axisEndCol) {\n          const endCol = this.state.axisEndCol - this.state.len1;\n          this.setState({ distancing1: this.state.distancing * (this.state.axisStartCol + endCol - 1), col11: endCol, col12: endCol + this.state.len1 - 1 })\n        }\n        else {\n          this.setState({ distancing1: this.state.distancing * col, col11: colRelative - variance, col12: colRelative - variance + this.state.len1 - 1 });\n        }\n        // this.setState({ distancing2 : x })\n      }\n    }\n    else {\n      col = col - 1;\n      if (dragger === 2) {\n        // colRelative = colRelative - this.state.axisStartCol + this.state.variance2;\n        if (col + this.state.triCentCol2 < this.state.axisStartCol) {\n          this.setState({ distancing2: (this.state.variance2) * this.state.distancing, col21: 0, col22: this.state.len2 - 1 });\n        }\n        else if (col + this.state.triCentCol2 > this.state.axisStartCol + this.state.axisEndCol) {\n          this.setState({ distancing2: this.state.distancing * (this.state.variance2 + this.state.axisEndCol), col21: this.state.axisEndCol, col22: this.state.axisEndCol + this.state.len2 - 1 })\n        }\n        else {\n          this.setState({ distancing2: this.state.distancing * col, col21: colRelative, col22: colRelative + this.state.len2 - 1 });\n        }\n        this.curveArea();\n      }\n      else if (dragger === 1) {\n        // colRelative = colRelative - this.state.axisStartCol + this.state.variance1;\n        if (col + this.state.triCentCol1 < this.state.axisStartCol) {\n          this.setState({ distancing1: (this.state.variance1) * this.state.distancing, col11: 0, col12: this.state.len1 - 1 });\n        }\n        else if (col + this.state.triCentCol1 > this.state.axisStartCol + this.state.axisEndCol) {\n          this.setState({ distancing1: this.state.distancing * (this.state.variance1 + this.state.axisEndCol), col11: this.state.axisEndCol, col12: this.state.axisEndCol + this.state.len1 - 1 })\n        }\n        else {\n          this.setState({ distancing1: this.state.distancing * col, col11: colRelative, col12: colRelative + this.state.len1 - 1 });\n        }\n        this.curveArea();\n      }\n    }\n  }\n\n  /**\n   * Updates state to reflect movement of trianlges and distance from mouse point to triangle center\n   * @param  {[Event]} e [Event called by javascript upon mouse action]\n   * @param  {[Number]} num [1 for first curve, 2 for second curve]\n   * @return \n   */\n  triMouseDown(e, num) {\n    if (e.type === \"mousedown\") {\n      // console.log(\"MOUSEDOWN\");\n      e.preventDefault();\n      var svgPre = this.svgRef.current;\n      // Set mousePointerRange so that we know the distance\n      // from the mouse tip to the x-value of the triangle\n      // tip\n      var ptPre = svgPre.createSVGPoint();\n      ptPre.x = e.clientX;\n      var svgPPre = ptPre.matrixTransform(svgPre.getScreenCTM().inverse());\n      if (num === 1) {\n        this.setState(prevState => ({\n          // rectX : svgP.x,\n          triDown: num,\n          mousePointerRange: prevState.triCent1 + this.state.distancing1 - svgPPre.x\n        }));\n      }\n      else if (num === 2) {\n        this.setState(prevState => ({\n          // rectX : svgP.x,\n          triDown: num,\n          mousePointerRange: prevState.triCent2 + this.state.distancing2 - svgPPre.x\n        }));\n      }\n      // console.log(this.state);\n    }\n  }\n\n  /**\n   * Called upon mouse being dragged, calls functions for moving curves\n   * @param  {[Event]} e [Event called by javascript upon mouse action]\n   * @return \n   */\n  triDrag(e) {\n      e.preventDefault();\n      var dragger = this.state.triDown;\n      var cols = this.svgColReturn(e, dragger);\n      var col = cols[0];\n      var colRelative = cols[1]\n      // console.log(col);\n      this.setState(this.svgColPlacement(col, colRelative, dragger));\n      this.curveArea();\n  }\n\n  /**\n   * Informs state the mouse is no longer holding down on a triangle\n   * @param  {[Event]} e [Event called by javascript upon mouse action]\n   * @return \n   */\n  triUp(e) {\n    // console.log(\"UP\");\n    if (this.state.triDown) {\n      this.setState({ triDown: false });\n    }\n  }\n\n  /**\n   * Calculates area of the curve and updates the element that carries area value using ref\n   * @param  \n   * @return \n   */\n  curveArea() {\n    let col11;\n    let col12;\n    let col21;\n    let col22;\n\n    if (this.state.edgeLim) {\n      col11 = this.state.col11;\n      col12 = this.state.col12;\n      col21 = this.state.col21;\n      col22 = this.state.col22;\n    }\n    else {\n      col11 = this.state.col11 + this.state.variance1;\n      col12 = this.state.col12 + this.state.variance1;\n      col21 = this.state.col21 + this.state.variance2;\n      col22 = this.state.col22 + this.state.variance2;\n    }\n\n    if (col11 > col22 || col12 < col21) {\n      this.areaRef.current.innerHTML = 0;\n    }\n    else {\n      // console.log(this.state.col22, this.state.col11, Math.abs(this.state.col22 - this.state.col11));\n      this.areaRef.current.innerHTML = this.state.overlapVals[Math.abs(col22 - col11)];\n    }\n  }\n\n  /**\n   * Reloads the curve upon a new axis length being entered with new length recorded\n   * @param  {[Number]} newLength [The new length set by the researcher]\n   * @return \n   */\n  lengthSubmit() {\n    const newLength = this.lengthRef.current.value;\n    const internalLength = newLength * this.state.distancing;\n    const length = this.state.edgeLength + internalLength;\n\n    const axisEndCol = internalLength / this.state.distancing;\n    const axisEnd = axisEndCol * this.state.distancing;\n    // console.log(axisEndCol);\n\n    this.changeJSON(\"axis-length\", Number(newLength), this.state.jsonData);\n\n    // this.setState({\n    //   colNum: newLength,\n    //   svgWidth: length,\n    //   axisEndCol: axisEndCol,\n    //   axisEnd: axisEnd\n    // });\n\n    // const col1 = this.state.col11 - 1 + this.state.variance1;\n    // this.svgColPlacement(col1, this.state.col11, 1);\n\n    // const col2 = this.state.col21 - 1 + this.state.variance2;\n    // this.svgColPlacement(col2, this.state.col21, 2);\n    \n    const newData = this.props.data;\n    newData[\"axis-length\"] = newLength;\n    this.setState(this.establishStateData(newData));\n  }\n\n  // toggleXVals() {\n  //   this.setState(prevState => {\n  //     return {\n  //       showCoors: !prevState.showCoors\n  //     }\n  //   })\n  // }\n\n  /**\n   * Manually alters the start position of the first curve when presented\n   * Accounts for possibility of going beyond the axis\n   * @param  {[Number]} newPos [new column position on the axis]\n   * @return\n   */\n  alterStartPos1(newPos) {\n    let startPos1 = parseInt(this.startPos1Ref.current.value) + this.state.variance1;\n    let col11 = startPos1 - this.state.variance1 + 1;\n    let col12 = col11 + this.state.len1 - 1;\n    if (startPos1 + this.state.triCentCol1 < this.state.axisStartCol) {\n      startPos1 = this.state.variance1 - 1;\n      col11 = 0;\n      col12 = this.state.len1 - 1;\n    }\n    else if (startPos1 + this.state.triCentCol1 > this.state.axisStartCol + this.state.axisEndCol) {\n      startPos1 = this.state.variance1 + this.state.axisEndCol - 1;\n      col11 = this.state.axisEndCol;\n      col12 = this.state.axisEndCol + this.state.len1 - 1;\n    }\n\n    this.changeJSON(\"startPos1\", Number(newPos), this.state.jsonData);\n\n    this.setState({\n      distancing1: startPos1 * this.state.distancing,\n      col11: col11,\n      col12: col12\n    });\n  }\n\n  \n  /**\n   * Manually alters the start position of the second curve when presented\n   * Accounts for possibility of going beyond the axis\n   * @param  {[Number]} newPos [new column position on the axis]\n   * @return\n   */\n  alterStartPos2(newPos) {\n    let startPos2 = parseInt(this.startPos2Ref.current.value) + this.state.variance2;\n    let col21 = startPos2 - this.state.variance2 + 1;\n    let col22 = col21 + this.state.len2 - 1;\n    if (startPos2 + this.state.triCentCol2 < this.state.axisStartCol) {\n      startPos2 = this.state.variance2 - 1;\n      col21 = 0;\n      col22 = this.state.len2 - 1;\n    }\n    else if (startPos2 + this.state.triCentCol2 > this.state.axisStartCol + this.state.axisEndCol) {\n      startPos2 = this.state.variance2 + this.state.axisEndCol - 1;\n      col21 = this.state.axisEndCol;\n      col22 = this.state.axisEndCol + this.state.len2 - 1;\n    }\n\n    this.changeJSON(\"startPos2\", Number(newPos), this.state.jsonData);\n\n    this.setState({\n      distancing2: startPos2 * this.state.distancing,\n      col21: col21,\n      col22: col22\n    });\n  }\n  \n  /**\n   * Manually alters the radius of circles on the curves\n   * @param  {[Number]} radius [new radius value]\n   * @return\n   */\n  updateRadius(radius) {\n    // console.log(\"updateRadius\", radius);\n    this.changeJSON(\"circle-radius\", parseInt(radius), this.state.jsonData);\n    let newData = this.state.jsonData;\n    newData[\"circle-radius\"] = parseInt(radius);\n    this.setState(this.establishStateData(newData));\n  }\n\n  /**\n   * Manually alters the number of ticks on the axis\n   * @param  {[Number]} newTickCount [new number of ticks on the axis]\n   * @return\n   */\n  updateTicks(newTickCount) {\n    this.changeJSON(\"tickNum\", parseInt(newTickCount), this.state.jsonData);\n    let newData = this.state.jsonData;\n    newData[\"tickNum\"] = parseInt(newTickCount);\n    this.setState(this.establishStateData(newData));\n  }\n\n  /**\n   * Manually alters the value of a given column (used in calculating length\n   * of the axis and tick values)\n   * @param  {[Number]} colVal [new column value]\n   * @return\n   */\n  updateColVal(colVal) {\n    this.changeJSON(\"colNumVal\", parseInt(colVal), this.state.jsonData);\n    let newData = this.state.jsonData;\n    newData[\"colNumVal\"] = parseInt(colVal);\n    this.setState(this.establishStateData(newData));\n    // this.changeJSON(\"colNumVal\", colVal);\n    // this.setState({ colNum: colVal });\n  }\n\n  /**\n   * Toggles 'edgeLim' value, or whether the curves stop at the edge\n   * @param  \n   * @return\n   */\n  checkChange() {\n    this.setState(prevState => {\n      this.changeJSON(\"edgeLim\", !Boolean(prevState.edgeLim), this.state.jsonData);\n      return {\n        edgeLim: Number(!Boolean(prevState.edgeLim))\n      }\n    })\n    // console.log(this.state.edgeLim);\n  }\n\n  /**\n   * Toggles whether curve 1 is moveable\n   * @param \n   * @return\n   */\n  toggleTri1() {\n    if (!this.state.fixCurve1) {\n      this.setState({startPos1 : this.state.distancing1})\n    }\n    this.setState(prevState => {\n      this.changeJSON(\"fixCurve1\", !prevState.fixCurve1, this.state.jsonData);\n      return {\n        fixCurve1 : !prevState.fixCurve1\n      }});\n  }\n\n  /**\n   * Toggles whether curve 2 is moveable\n   * @param  \n   * @return\n   */\n  toggleTri2() {\n    if (!this.state.fixCurve2) {\n      this.setState({startPos2 : this.state.distancing2})\n    }\n    this.setState(prevState => {\n      this.changeJSON(\"fixCurve2\", !prevState.fixCurve2, this.state.jsonData);\n      return {\n        fixCurve2 : !prevState.fixCurve2\n      }});\n  }\n\n  /**\n   * Updates color of curve 1 based on dropdown menu\n   * @param  \n   * @return\n   */\n  changeColor1() {\n    const newColor = this.color1Ref.current.value;\n    this.changeJSON(\"color1\", newColor, this.state.jsonData);\n    this.setState({ color1 : newColor });\n  }\n\n  /**\n   * Updates color of curve 2 based on dropdown menu\n   * @param  \n   * @return\n   */\n  changeColor2() {\n    const newColor = this.color2Ref.current.value;\n    this.changeJSON(\"color2\", newColor, this.state.jsonData);\n    this.setState({ color2 : newColor });\n  }\n\n  /**\n   * Deletes this element in the parent element if called\n   * @param  \n   * @return \n   */\n  delete() {\n    this.props.delete(this.props.count);\n  }\n  \n  /**\n   * Change the state within the normal curve component\n   * @param {Event} e some event\n   */\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  /**\n   * Calls props function changeJSON when change is made to experiment JSON\n   * that must be recorded\n   * This function is inherited from NormalCurveResearch.jsx\n   * This function is specifically designed to change the shape ocnfiguration\n   * data for the normal curve component. \n   * @param  {[String]} key [key in JSON that must be updated]\n   * @param  {[]} value [New value for key in JSON]\n   * @param  {[]} data XXXXX\n   * @return \n   */\n  changeJSON(key, value, data) {\n    this.props.changeJSON(key, value, data);\n  }\n\n  /**\n   * Calls props function handleChange to update parent element\n   * This function is inherited from TabList.jsx\n   * !!! This function updates the final obj to send to the database !!!\n   * @param  {[String]} key [key in parent that must be updated]\n   * @param  {[Any]} value [new value for key]\n   * @param  {[Number]} count [count of current element in parent list]\n   * @return \n   */\n  handleChange(key, value, count) {\n    this.props.handleChange(key, value, count);\n  }\n\n  /**\n   * Basic setup functions on component creation\n   * @param  \n   * @return \n   */\n  componentDidMount() {\n    // importing component, save imported data\n    if (this.props.imported) {\n      this.handleChange(\"Question\", this.props.qToDisplay[\"Question\"], this.props.count);\n      this.handleChange(\"graph1key\", this.props.qToDisplay[\"graph1key\"], this.props.count);\n      this.handleChange(\"graph2key\", this.props.qToDisplay[\"graph2key\"], this.props.count);\n      this.setState({ configuredShapes: true });\n    } else {\n      this.setState({ configuredShapes: false });\n    }\n    if (this.props.editing) {\n      this.handleChange(\"normal-curve-question-key\", this.props.qToDisplay[\"normal-curve-question-key\"], this.props.count);\n      this.handleChange(\"normal-curve-legend-key1\", this.props.qToDisplay[\"normal-curve-legend-key1\"], this.props.count);\n      this.handleChange(\"normal-curve-legend-key2\", this.props.qToDisplay[\"normal-curve-legend-key2\"], this.props.count);\n    };\n  }\n\n  /**\n   * Updates normal curve shapes upon initial configurations (by researchers)\n   */\n  onUpdateShapes() {\n    const argArr = [\n      Number(this.arg0ref.current.value),\n      Number(this.arg1ref.current.value),\n      Number(this.arg2ref.current.value),\n      Number(this.arg3ref.current.value),\n      Number(this.arg4ref.current.value),\n      Number(this.arg5ref.current.value),\n      Number(this.arg6ref.current.value),\n    ];\n    // console.log(argArr);\n    axios\n      .post('https://test-api-615.herokuapp.com/normalCurve', \n        { argArr: argArr })\n      .then(res => {\n        const jsonData = JSON.parse(res.data.replace(/'/g, '\"'));\n        this.handleChange('FileContent', jsonData, this.props.count);\n        this.setState(this.establishStateData(jsonData));\n      })\n  }\n\n  /**\n   * Updates shapes again when researchers finish configuration\n   */\n  onFinishShapes() {\n    var confirm = window.confirm(\"Are you sure these are the shapes you want?\"+\n      \" Once you click 'OK', you won't be able to change the shapes again\" + \n      \" for this question.\");\n    if (confirm) {\n      this.onUpdateShapes();\n      this.setState({ configuredShapes: true });\n    } else {\n      alert(\"Continue to configure shapes ... \");\n    }\n  }\n\n  render() {\n    const qNum = this.props.count + 1;\n\n    const defaultVal = (qType) => {\n      if (this.props.qToDisplay) {\n        return this.props.qToDisplay[qType]\n      } else {\n        return \"\"\n      }}\n    \n    const defaultCurveVal = (dataType) => {\n      if (this.props.qToDisplay) {\n        return this.props.qToDisplay[\"FileContent\"][dataType]\n      } else {\n        return \"\"\n      }\n    }\n\n    const defaultArg = (whichArg) => {\n      if (this.props.configArgs) {\n        return this.props.configArgs[whichArg];\n      } else {\n        return 0;\n      }\n    }\n\n    return (\n      <div>\n        <div className=\"boxed\">\n          {\n            this.state.configuredShapes\n            ?\n            <h4>You have already configured normal curve shapes for this question.</h4>\n            :\n            <div>\n              <h4>Configure Shapes</h4>\n              <div className=\"args-container\">\n                <div className=\"arg\">\n                  First Curve Height\n                  <br/>\n                  <input type=\"text\" ref={this.arg0ref} \n                    defaultValue={defaultArg(0)}/>\n                </div>\n                <div className=\"arg\">\n                  First Curve Width\n                  <br/>\n                  <input type=\"text\" ref={this.arg1ref}\n                    defaultValue={defaultArg(1)}/>\n                </div>\n                <div className=\"arg\">\n                  Second Curve Height\n                  <br/>\n                  <input type=\"text\" ref={this.arg2ref}\n                    defaultValue={defaultArg(2)}/>\n                </div>\n                <div className=\"arg\">\n                  Second Curve Width\n                  <br/>\n                  <input type=\"text\" ref={this.arg3ref}\n                    defaultValue={defaultArg(3)}/>\n                </div>\n              </div>\n              <div className=\"args-container\">\n                <div className=\"arg\">\n                  Circle Radius <br/> (2 ~ 5 inclusive)\n                  <br/>\n                  <input type=\"text\" ref={this.arg4ref}\n                    defaultValue={defaultArg(4)}/>\n                </div>\n                <div className=\"arg\">\n                  x-axis length <br/> (at least 1)\n                  <br/>\n                  <input type=\"text\" ref={this.arg5ref}\n                    defaultValue={defaultArg(5)}/>\n                </div>\n                <div className=\"arg\">\n                  x-axis lowest value <br/> (at least 0)\n                  <br/>\n                  <input type=\"text\" ref={this.arg6ref}\n                    defaultValue={defaultArg(6)}/>\n                </div>\n              </div>\n              <br/>\n              <button onClick={() => this.onUpdateShapes()}>\n                Update \n              </button> <br/>\n              <button onClick={() => this.onFinishShapes()}>\n                Proceed to Configure Experiment\n              </button>\n            </div>\n          }\n          \n          <div \n            onMouseMove={e => this.triDrag(e)}\n            onMouseUp={e => this.triUp(e)}>\n            <svg width={this.state.svgWidth} height={this.state.svgHeight + 10} ref={this.svgRef}>\n              {/* <rect opacity=\"0.2\" width=\"100%\" height=\"100%\" fill=\"red\"/> */}\n              {[...Array(this.state.len1).keys()].map(\n                (col) =>\n                  [...Array(this.state.colValHeiS[col]).keys()].map(\n                    (row) => this.dotReturn(col, row)\n                  )\n              )}\n              {[...Array(this.state.len2).keys()].map(\n                (col) =>\n                  [...Array(this.state.colValHeiS2[col]).keys()].map(\n                    (row) => this.dotReturn2(col, row)\n                  )\n              )}\n              <rect width={this.state.axisEnd}\n                height=\"2\"\n                fill=\"black\"\n                x={this.state.axisStartCol * this.state.distancing - 1}\n                y={this.state.ceilDist + 20} />\n              <rect width=\"2\"\n                height=\"20\"\n                fill=\"black\"\n                x={this.state.axisStartCol * this.state.distancing - 1}\n                y={this.state.ceilDist + 20} />\n              <rect width=\"2\"\n                height=\"20\"\n                fill=\"black\"\n                x={this.state.axisEnd + this.state.axisStartCol * this.state.distancing - 1}\n                y={this.state.ceilDist + 20} />\n              {[...Array(this.state.tickNum).keys()].map(\n                (tick) =>\n                  <rect\n                    width=\"2\"\n                    height=\"20\"\n                    fill=\"black\"\n                    x={this.state.axisStart + (this.state.tickDist * (tick + 1)) - 1} \n                    y={this.state.ceilDist + 20}\n                  />\n              )}\n              {[...Array(this.state.tickNum).keys()].map(\n                (tick) =>\n                <text \n                textAnchor=\"middle\" \n                x={this.state.axisStart + (this.state.tickDist * (tick + 1)) - 1} \n                y={this.state.ceilDist + 55}>\n                  {this.state.lowVal + (this.state.rangeVal * (tick + 1))}\n                </text>\n              )}\n              {/* triangle rendering below */}\n              {this.returnTri1()}\n              {this.returnTri2()}\n              <text textAnchor=\"middle\" x={this.state.axisStart} y={this.state.ceilDist + 55}>{this.state.lowVal}</text>\n              <text textAnchor=\"middle\" x={this.state.axisStart + this.state.axisEnd} y={this.state.ceilDist + 55}>{this.state.lowVal + this.state.colNum * this.state.colNumVal}</text>\n                        Sorry, please use a different browser.\n            </svg>\n            <br />\n            <h4>Area Under Curve: <span ref={this.areaRef}></span> | First x-coordinate: {this.state.col11} | Second x-coordinate: {this.state.col21} </h4>\n            {\n              !this.state.configuredShapes\n              ?\n              <div></div>\n              :\n              <div>\n                <div class=\"flex-container\">\n                  <div class=\"flex-child-one\">\n                    Question: <br/>\n                    <textarea class=\"normal-curve-text\" cols=\"60\" rows=\"11\" \n                        ref={this.qRef} \n                        defaultValue={defaultVal(\"Question\")}\n                      onInput={() => this.handleChange(\"Question\", this.qRef.current.value, this.props.count)}>\n                    </textarea>\n\n                    <br/><br/>\n                    <div class=\"color-box\" style={{ backgroundColor: this.state.color1 }}></div>\n                    <input type=\"text\" \n                      ref={this.graph1keyRef} \n                      defaultValue={defaultVal(\"graph1key\")}\n                      onInput={() => this.handleChange(\"graph1key\", this.graph1keyRef.current.value, this.props.count)}></input>\n                    <br />\n\n                    <div class=\"color-box\" style={{ backgroundColor: this.state.color2 }}></div>\n                    <input type=\"text\" \n                      ref={this.graph2keyRef} \n                      defaultValue={defaultVal(\"graph2key\")}\n                      onInput={() => this.handleChange(\"graph2key\", this.graph2keyRef.current.value, this.props.count)}></input>\n                  </div>\n\n                  <div class=\"flex-child-two\">\n                    <br/>\n                    What csv column name do you want to assign to this question?\n                    <br/>\n                    {\n                      this.props.editing\n                      ?\n                      <input type=\"text\" ref={this.questionKeyRef} \n                      defaultValue={this.props.qToDisplay[\"normal-curve-question-key\"]}\n                      onInput={() => this.handleChange(\"normal-curve-question-key\", this.questionKeyRef.current.value, this.props.count)}/>\n                      :\n                      <input type=\"text\" ref={this.questionKeyRef} \n                      onInput={() => this.handleChange(\"normal-curve-question-key\", this.questionKeyRef.current.value, this.props.count)}/>\n                    }\n                    <br/>\n                    <b>Use letters only, the name must be unique, leave no space between letters.</b> <br/>\n                    Recommedation: include your experiment name, this question number \n                    ({qNum}), and the question type (normalCurve)<br/>\n                    <br/>\n                    Please enter the csv column names for the graph key: <br/><br/>\n                    <div class=\"color-box\" style={{ backgroundColor: this.state.color1 }}></div>\n                    {\n                      this.props.editing\n                      ?\n                      <input type=\"text\" ref={this.legendKey1Ref}\n                      defaultValue={this.props.qToDisplay[\"normal-curve-legend-key1\"]}\n                      onInput={() => this.handleChange(\"normal-curve-legend-key1\", this.legendKey1Ref.current.value, this.props.count)}></input>\n                      :\n                      <input type=\"text\" ref={this.legendKey1Ref}\n                      onInput={() => this.handleChange(\"normal-curve-legend-key1\", this.legendKey1Ref.current.value, this.props.count)}></input>\n                    }\n                    <br/>\n                    <div class=\"color-box\" style={{ backgroundColor: this.state.color2 }}></div>\n                    {\n                      this.props.editing\n                      ?\n                      <input type=\"text\" ref={this.legendKey2Ref}\n                      defaultValue={this.props.qToDisplay[\"normal-curve-legend-key2\"]}\n                      onInput={() => this.handleChange(\"normal-curve-legend-key2\", this.legendKey2Ref.current.value, this.props.count)}></input>\n                      :\n                      <input type=\"text\" ref={this.legendKey2Ref}\n                      onInput={() => this.handleChange(\"normal-curve-legend-key2\", this.legendKey2Ref.current.value, this.props.count)}></input>\n                    }\n                  </div>\n                </div>\n\n                <div className=\"flex-child-three\">\n                  <span>Enter the width of the graph (each point in the curves is \n                    equivalent to 1 unit of width) </span>\n                  <input ref={this.lengthRef} type=\"text\" \n                    defaultValue={defaultCurveVal(\"axis-length\")}\n                    // name=\"axisLength\" value={this.state.axisLength} \n                    // onChange={this.onChange}\n                    />\n                  <button onClick={() => {this.lengthSubmit(this.lengthRef.current.value)}}>\n                    Change Width\n                  </button>\n                  <br/>\n\n                  <span>Enter your preferred value for the width of each unit in the curve</span>\n                  <input type=\"text\" ref={this.colNumValRef}\n                    defaultValue={defaultCurveVal(\"colNumVal\")}></input>\n                  <button onClick={() => this.updateColVal(this.colNumValRef.current.value)}>Change Unit Value</button>\n                  <br />\n\n                  <span>Enter your preferred value for the radius of each unit in the curve (2 - 5, inclusive)</span>\n                  <input type=\"text\" ref={this.radiusRef}\n                    defaultValue={defaultCurveVal(\"circle-radius\")}></input>\n                  <button onClick={() => this.updateRadius(this.radiusRef.current.value)}>Change Radius</button>\n                  <br />\n\n                  <span>Enter your preferred number of ticks on the graph (equal parts must be divisible by x-axis width)</span>\n                  <input type=\"text\" ref={this.ticksRef}\n                    defaultValue={defaultCurveVal(\"tickNum\")}></input>\n                  <button onClick={() => this.updateTicks(this.ticksRef.current.value)}>Change Tick Count</button>\n                  <br />\n\n                  <span>Enter your preferred starting position for curve 1, \n                    if you want to change it </span>\n                  <input ref={this.startPos1Ref} type=\"text\" \n                    // name=\"startPos1\" value={this.state.startPos1} onChange={this.onChange}\n                    defaultValue={defaultCurveVal(\"startPos1\")}></input>\n                  <button onClick={() => this.alterStartPos1(this.startPos1Ref.current.value)}>\n                    Change Curve 1\n                  </button>\n                  <br/>\n\n                  <input \n                  type=\"checkbox\"\n                  ref={this.toggleTriRef1}\n                  onChange={this.toggleTri1} checked={this.state.fixCurve1}/>\n                  <label for=\"toggle1\"> Check to lock the position of the curve</label>\n                  <p> || </p>\n\n                  <label for=\"color1\">Choose a color for curve 1: </label>\n                  <select name=\"color1\" id=\"color1\" ref={this.color1Ref}\n                    defaultValue={this.state.color1}>\n                    <option value=\"CornflowerBlue\">Blue</option>\n                    <option value=\"Crimson\">Red</option>\n                    <option value=\"MediumSeaGreen\">Green</option>\n                    <option value=\"LightGray\">Gray</option>\n                  </select>\n                  <input onClick={() => this.changeColor1()} type=\"submit\" value=\"Submit\"></input>\n                  <br />\n\n                  <span>Enter your preferred starting position for curve 2, \n                    if you want to change it </span>\n                  <input ref={this.startPos2Ref} type=\"text\" \n                    // name=\"startPos2\" value={this.state.startPos2} onChange={this.onChange}\n                    defaultValue={defaultCurveVal(\"startPos2\")}></input>\n                  <button onClick={() => this.alterStartPos2(this.startPos2Ref.current.value)}>\n                    Change Curve 2\n                  </button>\n                  <br/>\n\n                  <input \n                  type=\"checkbox\"\n                  ref={this.toggleTriRef2}\n                  onChange={this.toggleTri2} checked={this.state.fixCurve2}/>\n                  <label for=\"toggle2\"> Check to lock the position of the curve</label>\n                  <p> || </p>\n\n                  <label for=\"color2\">Choose a color for curve 2: </label>\n                  <select name=\"color2\" id=\"color2\" ref={this.color2Ref}\n                    defaultValue={this.state.color2}>\n                    <option value=\"CornflowerBlue\">Blue</option>\n                    <option value=\"Crimson\">Red</option>\n                    <option value=\"MediumSeaGreen\">Green</option>\n                    <option value=\"LightGray\">Gray</option>\n                  </select>\n                  <input onClick={() => this.changeColor2()} type=\"submit\" value=\"Submit\"></input>\n                  <br />\n                  <div>\n                    <input \n                      type=\"checkbox\" \n                      id=\"vehicle1\" \n                      name=\"vehicle1\" \n                      value=\"Bike\" \n                      ref={this.checkBoxRef}\n                      onChange={this.checkChange} checked={this.state.edgeLim}/>\n                    <label for=\"vehicle1\">Turn edge limiting on/off</label>\n                  </div>\n                </div>\n              </div>\n            }\n            <br/>\n            <button onClick={this.delete.bind(this)}>Delete</button>\n          </div>\n        </div>\n        <br/><br/><br/>\n      </div>\n    )\n  }\n}\n\nexport default NormalCurve;","import React, { Component } from 'react';\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport NormalCurve from './NormalCurve';\nimport './NormalCurve.css';\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { \n  getColData\n} from '../../../actions/dataActions'\n\nimport sameSquare from './sameSquare.png';\nimport rlyDiff from './rlyDiff.png';\nimport bigSmall from './bigSmall.png';\nconst sameSquareData = require('./sameSquare.json');\nconst rlyDiffData = require('./rlyDiff.json');\nconst bigSmallData = require('./bigSmall.json');\n\nclass NormalCurveResearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.rectRef = React.createRef();\n    this.svgRef = React.createRef();\n    this.areaRef = React.createRef();\n\n    this.arg1ref = React.createRef();\n    this.arg2ref = React.createRef();\n    this.arg3ref = React.createRef();\n    this.arg4ref = React.createRef();\n    this.arg5ref = React.createRef();\n    this.arg6ref = React.createRef();\n    this.arg7ref = React.createRef();\n\n    this.handleDrop = this.handleDrop.bind(this);\n    this.handleSelectedFile = this.handleSelectedFile.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.changeJSON = this.changeJSON.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.delete = this.delete.bind(this);\n    this.processJSON = this.processJSON.bind(this);\n    this.selectNC = this.selectNC.bind(this);\n\n    this.state = {\n      dataReceived: false,\n      fileNames: [],\n      setFileNames: [],\n      fileChosen: '',\n      key: this.props.key\n    };\n  }\n\n  /**\n   * Set this.state to display config data as graphs to the frontend\n   * @param {[Object]} jsonData [json data containing config info for normalCurve]\n   */\n  processJSON(jsonData) {\n    const unitHeight = jsonData[\"max-height\"];\n    const circRad = jsonData[\"circle-radius\"];\n    const distancing = circRad * 4 - 1;\n    const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\n    const ceilDist = height - 50;\n    const length = Math.ceil((distancing * jsonData[\"len1\"] * 2 + distancing * jsonData[\"len2\"] * 2) / 100) * 100;\n    const colNum = Math.round(length / distancing);\n    this.setState({\n      dataReceived: true,\n      // fileText: fileText,\n      jsonData: jsonData,\n      svgWidth: length,\n      svgHeight: height,\n      distancing: distancing,\n      dataReceived: true,\n      len1: jsonData[\"len1\"],\n      colValHeiS: jsonData[\"colValHeiS\"],\n      len2: jsonData[\"len2\"],\n      colValHeiS2: jsonData[\"colValHeiS2\"],\n      distancing1: (jsonData[\"len2\"] + 1) * distancing,\n      distancing2: (jsonData[\"len1\"] + jsonData[\"len2\"] + 4) * distancing,\n      triCent1: Math.round((0.5 * jsonData[\"len1\"]) * distancing) + distancing,\n      triCent2: Math.round((0.5 * jsonData[\"len2\"]) * distancing) + distancing,\n      col11: jsonData[\"len2\"] + 1,\n      col12: jsonData[\"len1\"] + jsonData[\"len2\"] + 1,\n      col21: jsonData[\"len1\"] + jsonData[\"len2\"] + 3,\n      col22: jsonData[\"len1\"] + 2 * jsonData[\"len2\"] + 3,\n      colLim1: Math.round((length - (jsonData[\"len1\"] * distancing)) / distancing),\n      colLim2: Math.round((length - (jsonData[\"len2\"] * distancing)) / distancing),\n      overlapVals: jsonData[\"overlapVals\"],\n      circRad: circRad,\n      ceilDist: ceilDist\n    });\n  }\n\n  componentDidMount() {\n    // importing component\n    // console.log(this.props);\n    if (this.props.imported) {\n      // if this normal curve component is imported, we need to append those \n      // associating files to final output with handleChange()\n      this.handleChange(\"FileName\", this.props.qToDisplay[\"FileName\"], this.props.count);\n      const jsonData = this.props.qToDisplay[\"FileContent\"];\n      this.handleChange(\"FileContent\", jsonData, this.props.count);\n      this.setState({ imported: true });\n      // this.processJSON(jsonData);\n    }\n    const username = this.props.auth.user.username;\n    this.props.getColData(username, \"itemData\");\n  }\n\n  // Inherited function from TabList.jsx\n  saveFile(type, name, content) {\n    this.props.saveFile(type, name, content);\n  }\n\n  /**\n   * DEPRECATED since we are not doing drag n drop anymore\n   * Set this.state based on file data and save file data to final output\n   * @param {[File]} acceptedFiles [a file in .json format]\n   */\n  handleDrop(acceptedFiles) {\n    console.log(acceptedFiles.map(file => {\n      acceptedFiles.forEach((file) => {\n\n        const normalCurveFiles = this.props.dataFlowColData.filter(\n          item => item.itemType == \"normal-curve\");\n        var fileNames = normalCurveFiles.map(item => item.fileName);\n        if (fileNames.includes(file.name)) {\n          alert(\"File name already exists. Please upload a file\" +  \n            \" with a unique name.\");\n          this.setState({ dataReceived: false });\n        } else {\n          this.handleChange(\"FileName\", file.name, this.props.count);\n\n          const reader = new FileReader()\n          reader.onabort = () => console.log('file reading was aborted')\n          reader.onerror = () => console.log('file reading has failed')\n          reader.onload = () => {\n            // Do whatever you want with the file contents\n            const fileText = reader.result;\n            const jsonData = JSON.parse(fileText);\n\n            this.handleChange(\"FileContent\", jsonData, this.props.count);\n            if (this.props.files.length == 0) {\n              this.saveFile(\"normal-curve\", file.name, jsonData);\n            } else {\n              const names = this.props.files.map(item => item.fileName);\n              if (!names.includes(file.name)) {\n                this.saveFile(\"normal-curve\", file.name, jsonData);\n              }\n            }\n\n            const unitHeight = jsonData[\"max-height\"];\n            const circRad = jsonData[\"circle-radius\"];\n            const distancing = circRad * 4 - 1;\n            const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\n            const ceilDist = height - 50;\n            const length = Math.ceil((distancing * jsonData[\"len1\"] * 2 + distancing * jsonData[\"len2\"] * 2) / 100) * 100;\n            const colNum = Math.round(length / distancing);\n            this.setState({\n              dataReceived: true,\n              fileText: fileText,\n              jsonData: jsonData, \n              svgWidth: length,\n              svgHeight: height,\n              distancing: distancing,\n              dataReceived: true,\n              len1: jsonData[\"len1\"],\n              colValHeiS: jsonData[\"colValHeiS\"],\n              len2: jsonData[\"len2\"],\n              colValHeiS2: jsonData[\"colValHeiS2\"],\n              distancing1: (jsonData[\"len2\"] + 1) * distancing,\n              distancing2: (jsonData[\"len1\"] + jsonData[\"len2\"] + 4) * distancing,\n              triCent1: Math.round((0.5 * jsonData[\"len1\"]) * distancing) + distancing,\n              triCent2: Math.round((0.5 * jsonData[\"len2\"]) * distancing) + distancing,\n              col11: jsonData[\"len2\"] + 1,\n              col12: jsonData[\"len1\"] + jsonData[\"len2\"] + 1,\n              col21: jsonData[\"len1\"] + jsonData[\"len2\"] + 3,\n              col22: jsonData[\"len1\"] + 2 * jsonData[\"len2\"] + 3,\n              colLim1: Math.round((length - (jsonData[\"len1\"] * distancing)) / distancing),\n              colLim2: Math.round((length - (jsonData[\"len2\"] * distancing)) / distancing),\n              overlapVals: jsonData[\"overlapVals\"],\n              circRad: circRad,\n              ceilDist: ceilDist\n            });\n          };\n          reader.readAsText(file);\n        };\n      });\n    }));\n    this.setState({ fileNames: acceptedFiles.map(file => file.name) })\n  }\n\n  /**\n   * DEPRECATED since we are not doing drag n drop anymore\n   * Triggered when researchers select a previously uploaded file\n   */\n  handleSelectedFile() {\n    console.log(this.props.count);\n    this.handleChange(\"FileName\", this.state.fileChosen, this.props.count);\n\n    const jsonData = this.props.dataFlowColData.filter(item => \n      item.fileName == this.state.fileChosen)[0].fileContent;\n\n    this.handleChange(\"FileContent\", jsonData, this.props.count);\n    \n    this.processJSON(jsonData);\n  }  \n\n  delete() {\n    this.props.delete(this.props.count);\n  }\n\n  getCount() {\n    this.props.getCount(this.props.count);\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  // inherited from TabList.jsx\n  handleChange(key, value, count) {\n    this.props.handleChange(key, value, count);\n  }\n\n  /**\n   * Update @param data and save to final output\n   * This function is specifically designed to change the shape ocnfiguration\n   * data for the normal curve component. \n   * @param {[String]} key [key of entry to update]\n   * @param {[Any]} value [value of entry to update]\n   * @param {[Object]} data [a json object to be updated]\n   */\n  changeJSON(key, value, data) {\n    // var data = this.state.jsonData;\n    data[key] = value;\n    this.handleChange(\"FileContent\", data, this.props.count);\n  }\n\n  /**\n   * Save researcher selection to final output and update this.state\n   * WARNING: do not try to import jsonData from directory because data\n   *          will be altered by researchers' configuration\n   * @param {[Event]} e [an event triggered by researchers clicking on one of \n   *                     the three normal curve options]\n   */\n  selectNC(e) {\n    const id = e.currentTarget.id;\n\n    var jsonData;\n    var configArgs;\n    switch (id) {\n      case \"sameSquare\":\n        jsonData = sameSquareData;\n        configArgs = [20, 20, 20, 20, 3, 30, 0];\n        console.log(\"sameSquare\");\n        break;\n      case \"rlyDiff\":\n        jsonData = rlyDiffData;\n        configArgs = [30, 10, 10, 30, 3, 30, 0];\n        console.log(\"rlyDiff\");\n        break;\n      case \"bigSmall\":\n        jsonData = bigSmallData;\n        configArgs = [30, 15, 20, 10, 3, 30, 0];\n        console.log(\"bigSmall\");\n        break;\n    };\n\n    this.handleChange(\"FileName\", id + \".json\", this.props.count);\n    this.handleChange(\"FileContent\", jsonData, this.props.count);\n    this.setState({ configArgs: configArgs });\n    this.processJSON(jsonData);\n  }\n\n  render() {\n    if (this.state.dataReceived) {\n      // this case is triggered when researchers select one of the three options\n      // previously built for drag n drop file upload. \n      // Search 'dataReceived' in this file to learn more\n      return (\n        <div>\n          <NormalCurve \n            data={this.state.jsonData} count={this.props.count}\n            configArgs={this.state.configArgs}\n            changeJSON={this.changeJSON} \n            handleChange={this.handleChange} \n            delete={this.delete} />\n          <br/>\n        </div>\n      )\n    // importing component\n    } else if (this.state.imported) {\n      // a normal curve is imported in two possible ways:\n      // 1. when researchers import a question from another experiment in expt builder\n      // 2. when researchers use \"Edit Experiment\" feature from ConfigStudy\n      return (\n        <div>\n          <NormalCurve \n            imported={true}\n            editing={this.props.editing}\n            data={this.props.qToDisplay[\"FileContent\"]} \n            qToDisplay={this.props.qToDisplay}\n            count={this.props.count}\n            changeJSON={this.changeJSON} \n            handleChange={this.handleChange} \n            delete={this.delete} />\n        </div>\n      )\n    } else {\n      // provide researchers with three pre-built normal curve items\n      const normalCurveFiles = this.props.dataFlowColData.filter(\n        item => item.itemType == \"normal-curve\");\n      var fileNames = normalCurveFiles.map(item => item.fileName);\n      fileNames.unshift(\"Select File\");\n      const renderOption = item => <option value={item}>{item}</option>\n      const fileOptions = fileNames.map(renderOption);\n\n      return (\n        <div>\n          <div className=\"boxed\">\n            Select one of the following Normal Curve items to start with: <br/><br/>\n            <div className=\"container\">\n              <button>\n                <img src={sameSquare} alt=\"sameSquare\" id=\"sameSquare\"\n                  onClick={this.selectNC}\n                  style={{ height: \"10vw\", width: \"10vw\" }} /> \n              </button>\n              <p> </p>\n              <button>\n                <img src={rlyDiff} alt=\"rlyDiff\" id=\"rlyDiff\"\n                  onClick={this.selectNC}\n                  style={{ height: \"10vw\", width: \"10vw\" }} /> \n              </button>\n              <p> </p>\n              <button>\n                <img src={bigSmall} alt=\"bigSmall\" id=\"bigSmall\" \n                  onClick={this.selectNC}\n                  style={{ height: \"10vw\", width: \"10vw\" }} /> \n              </button>\n              <br/>\n            </div>\n            <br/><br/>\n            {/* Select previously uploaded files: \n            <br/>\n            <select name=\"fileChosen\" value={this.state.fileChosen} onChange={this.onChange}>\n              {fileOptions}\n            </select>\n            <button onClick={this.handleSelectedFile}>OK</button>\n            <br/><br/> */}\n            {/* <br/>\n            <Dropzone\n              onDrop={this.handleDrop}\n              accept=\"application/JSON, .json\"\n            >\n              {({ getRootProps, getInputProps }) => (\n                <div {...getRootProps({ className: \"dropzone\" })}>\n                  <input {...getInputProps()} />\n                  <p>Drag'n'drop files, or click to select files (must be valid JSON file)</p>\n                </div>\n              )}\n            </Dropzone>\n            <br/> */}\n            <button onClick={this.delete.bind(this)}>Delete Question</button>\n          </div>\n          <br/><br/>\n        </div>\n      )\n    }\n  }\n}\n\nNormalCurveResearch.propTypes = {\n  auth: PropTypes.object.isRequired,\n  getColData: PropTypes.func.isRequired,\n  dataFlowColData: PropTypes.array.isRequired\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  dataFlowColData: state.dataFlow.colData\n});\n\nexport default connect(\n  mapStateToProps,\n  { getColData }\n)(NormalCurveResearch);","import React, { Component } from 'react';\nimport './ThresholdSlider.css';\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport { gsap } from 'gsap'\nimport {TweenMax, Draggable} from \"gsap/all\";\n\nimport { json } from 'd3';\nimport { Tween } from 'gsap/gsap-core';\n\n// --------- TODO ----------\n// set up bottom slider\n// record positions such that the 4 boxes move accordingly\n// calculate snap positions in python code\n// add more fields for researchers (legend names, question, ...)\n// set up dataflow (save researcher configuration to database)\n// add component to participant app (pull researcher config from database)\n// for now threshold requires drag and drop, will be nice if it follows the same\n// format as normal curve (give researchers 3 options to select from and then\n// further configure)\n\nclass ThresholdCurve extends Component {\n    constructor(props) {\n      super(props);\n  \n      this.sliderRef = React.createRef();\n      this.slider2Ref = React.createRef();\n      this.rectRef = React.createRef();\n      this.svgRef = React.createRef();\n      this.areaRef = React.createRef();\n      this.lengthRef = React.createRef();\n      this.graph1keyRef = React.createRef();\n      this.graph2keyRef = React.createRef();\n      this.qRef = React.createRef();\n      this.colNumValRef = React.createRef();\n      this.radRef = React.createRef();\n      this.ticksRef = React.createRef();\n      this.checkBoxRef = React.createRef();\n      this.toggleTriRef1 = React.createRef();\n      this.toggleTriRef2 = React.createRef();\n      this.questionKeyRef = React.createRef();\n      this.legendKey1Ref = React.createRef();\n      this.legendKey2Ref = React.createRef();\n      this.stroke1Ref = React.createRef();\n      this.stroke2Ref = React.createRef();\n      this.stroke3Ref = React.createRef();\n      this.stroke4Ref = React.createRef();\n      this.fill1Ref = React.createRef();\n      this.fill2Ref = React.createRef();\n      this.fill3Ref = React.createRef();\n      this.fill4Ref = React.createRef();\n      this.distancing = React.createRef();\n      this.distancing2 = React.createRef();\n      this.distancing3 = React.createRef();\n      this.colWidth = React.createRef();\n      this.displayVal1 = React.createRef();\n      this.displayVal2 = React.createRef();\n      this.rect1Width = React.createRef();\n      this.rectHeight = React.createRef();\n      this.rect2Width = React.createRef();\n\n      //this.dotReturn = this.dotReturn.bind(this); \n      this.onChange1 = this.onChange1.bind(this);\n      this.line1 = this.line1.bind(this);\n      this.line2 = this.line2.bind(this);\n      this.onChange2 = this.onChange2.bind(this);\n      this.onChange4 = this.onChange4.bind(this);\n\n      //this.svgColReturn = this.svgColReturn.bind(this);\n      //this.svgColReturn = this.svgColReturn.bind(this);\n      this.dotReturn1 = this.dotReturn1.bind(this);\n      this.dotReturn2= this.dotReturn2.bind(this);\n      this.dotReturn3= this.dotReturn3.bind(this);\n      this.dotReturn4= this.dotReturn4.bind(this);\n      this.rectReturn1 = this.rectReturn1.bind(this);\n      this.rectReturn2 = this.rectReturn2.bind(this);\n      this.rectReturn3 = this.rectReturn3.bind(this);\n      this.rectReturn4 = this.rectReturn4.bind(this);\n      this.rectReturn5 = this.rectReturn5.bind(this);\n      this.rectReturn6 = this.rectReturn6.bind(this);\n      this.rectReturn7 = this.rectReturn7.bind(this);\n      this.rectReturn8 = this.rectReturn8.bind(this);\n      this.textReturn = this.textReturn.bind(this);\n\n\n      this.establishStateData = this.establishStateData.bind(this);\n      //this.updateRadius = this.updateRadius.bind(this);\n      //this.changeColor1 = this.changeColor1.bind(this);\n      //this.changeColor2 = this.changeColor2.bind(this);\n      //this.changeJSON = this.changeJSON.bind(this);\n      //this.onUpdateShapes = this.onUpdateShapes.bind(this);\n      //this.onFinishShapes = this.onFinishShapes.bind(this);   \n      this.state = this.establishStateData(this.props.data);\n    }\n\n    onChange4(q) {\n      this.setState({rect3Width : q})\n    }\n\n    onChange1(e) {\n      this.setState({ [e.target.name]: e.target.value })\n      this.setState({rect1Width : 400*this.state.displayArr1[e.target.value-1]})\n      this.setState({rect2Width: 400*this.state.displayArr2[e.target.value-1]})\n    }\n    onChange2(e) {\n      this.setState({rect4Width: 400*this.state.displayArr4[e.target.value-1]})\n      this.setState({rect3Width: 400*this.state.displayArr3[e.target.value-1]})\n      this.setState({ [e.target.name]: e.target.value })\n    }\n    line1(xPos1,xPos2,yPos1,yPos2){\n      var hard = <line x1 = {xPos1} x2 = {xPos2} y1 = {yPos1} y2 = {yPos2} stroke = \"#000000\"></line>;\n      return hard;\n    }\n    line2(xPos1,xPos2,yPos1,yPos2){\n      var dottedLine = [];\n      for(var i = 0; i < yPos2 - yPos1; i+=4){\n        var hard = <line x1 = {xPos1} x2 = {xPos1} y1 = {yPos1 + i} y2 = {yPos2 + i + 2} stroke = \"#808080\"></line>;\n        dottedLine.push(hard);\n      }\n      return dottedLine;\n    }\n\n    changeStroke1() {\n      const newColor = this.stroke1Ref.current.value;\n      if (newColor === \"#FF0000\"){\n        this.setState({stroke3: \"#0000FF\"});\n        this.setState({stroke4: \"#0000FF\"});\n        this.setState({fill4:\"#0000FF\"});\n        this.setState({ stroke1 : newColor });\n        this.setState({stroke2: newColor});\n        this.setState({fill2:newColor});\n      }\n      if (newColor === \"#0000FF\"){\n        this.setState({stroke3: \"#FF0000\"});\n        this.setState({stroke4: \"#FF0000\"});        \n        this.setState({fill4: \"#FF0000\"});\n        this.setState({ stroke1 : newColor });\n        this.setState({stroke2: newColor});\n        this.setState({fill2:newColor});\n      }\n      if(newColor === \"Orange and Blue\"){\n        this.setState({stroke3: \"#0000FF\"});\n        this.setState({stroke4: \"#0000FF\"});\n        this.setState({fill4:\"#0000FF\"});\n        this.setState({stroke1: \"#ffa500\"});\n        this.setState({stroke2: \"#ffa500\"});\n        this.setState({fill2: \"#ffa500\"});\n      }\n      if(newColor === \"Blue and Orange\"){\n        this.setState({stroke1: \"#0000FF\"});\n        this.setState({stroke2: \"#0000FF\"});\n        this.setState({fill2:\"#0000FF\"});\n        this.setState({stroke3: \"#ffa500\"});\n        this.setState({stroke4: \"#ffa500\"});\n        this.setState({fill4: \"#ffa500\"});\n      }\n      if(newColor === \"Blue and Yellow\"){\n        this.setState({stroke1: \"#0000FF\"});\n        this.setState({stroke2: \"#0000FF\"});\n        this.setState({fill2:\"#0000FF\"});\n        this.setState({stroke3: \"#FFD300\"});\n        this.setState({stroke4: \"#FFD300\"});\n        this.setState({fill4: \"#FFD300\"});\n      }\n      if(newColor === \"Yellow and Blue\"){\n        this.setState({stroke3: \"#0000FF\"});\n        this.setState({stroke4: \"#0000FF\"});\n        this.setState({fill4:\"#0000FF\"});\n        this.setState({stroke1: \"#FFD300\"});\n        this.setState({stroke2: \"#FFD300\"});\n        this.setState({fill2: \"#FFD300\"});\n      }\n    }\n\n    establishStateData(data) {\n      // console.log(\"establishStateData()\", new Date());\n  \n      return{\n        //arr1: data[\"displayArr1\"],\n        // arr2: data[\"displayArr2\"],\n        // arr3: data[\"displayArr3\"],\n        //arr4: data[\"displayArr4\"],\n        xPos1: data[\"xPos1\"],\n        yPos1: data[\"yPos1\"],\n        xPos2: data[\"xPos2\"],\n        yPos2: data[\"yPos2\"],\n        xPos3: data[\"xPos3\"],\n        yPos3: data[\"yPos3\"],\n        xPos4: data[\"xPos4\"],\n        yPos4: data[\"yPos4\"],\n        stroke1: data[\"stroke1\"],\n        stroke2: data[\"stroke2\"],\n        stroke3: data[\"stroke3\"],\n        stroke4: data[\"stroke4\"],\n        fill1: data[\"fill1\"],\n        fill2: data[\"fill2\"],\n        fill3: data[\"fill3\"],\n        fill4: data[\"fill4\"],\n        height: 1000,\n        width: data[\"width\"],\n        rad:data[\"circRad\"],\n        minVal:1,\n        sliderPos:8,\n        sliderPos2:5,\n        rect1Width: 100,\n        rect2Width: 100,\n        rect3Width: 100,\n        rect4Width: 100,\n        rectHeight:20,\n        displayArr1 : data[\"displayArr1\"],\n        displayArr2 : data[\"displayArr2\"],\n        displayArr3 : data[\"displayArr3\"],\n        displayArr4 : data[\"displayArr4\"],\n        displayVal1: 2,\n        displayVal2: 1,\n        maxVal : data[\"maxVal\"],\n        legendKey : data[\"legendKey\"],\n        displayArr5 : data[\"displayArr5\"],\n        refArr5 : data[\"refArr5\"],\n        indicesXPos: data[\"indicesXPos\"],\n        thumbDown: false,\n        topSliderX: 0,\n        topSliderY: 60,\n        bottomSliderX: 90,\n        bottomSliderY: 175,\n        dragger1Pos: 0,\n        dragger2Pos: 0\n      }\n    }\n\ndotReturn1(xPos, yPos) {\n    var hard = \n    <circle \n    // onMouseEnter={e => this.displayTag1(e)}\n    // onMouseLeave={e => this.hideTag1(e)}\n    // onMouseMove={e => this.updateTag1(e)} \n    className=\"icon\" \n    stroke={this.state.stroke1} \n    fill={this.state.fill1}\n    fillOpacity=\"1\" \n    strokeOpacity=\"1\" cx={xPos} cy={yPos} r={this.state.rad}>\n    </circle>;\n\n    return hard;\n  }\n\n   dotReturn2(xPos, yPos) {\n    var hard = \n    <circle \n    // onMouseEnter={e => this.displayTag1(e)}\n    // onMouseLeave={e => this.hideTag1(e)}\n    // onMouseMove={e => this.updateTag1(e)} \n    className=\"icon\" \n    stroke={this.state.stroke2} \n    fill={this.state.fill2}\n    fillOpacity=\"1\" \n    strokeOpacity=\"1\" cx={xPos} cy={yPos} r={this.state.rad}>\n    </circle>;\n\n    return hard;\n  }\n\n   dotReturn3(xPos, yPos) {\n\n    var hard = \n    <circle \n    // onMouseEnter={e => this.displayTag1(e)}\n    // onMouseLeave={e => this.hideTag1(e)}\n    // onMouseMove={e => this.updateTag1(e)} \n    className=\"icon\" \n    stroke={this.state.stroke3} \n    fill={this.state.fill3}\n    fillOpacity=\"1\" \n    strokeOpacity=\"1\" cx={xPos} cy={yPos} r={this.state.rad}>\n    </circle>;\n\n    return hard;\n  }\n\n   dotReturn4(xPos, yPos) {\n    var hard = \n    <circle \n    // onMouseEnter={e => this.displayTag1(e)}\n    // onMouseLeave={e => this.hideTag1(e)}\n    // onMouseMove={e => this.updateTag1(e)} \n    className=\"icon\" \n    stroke={this.state.stroke4} \n    fill={this.state.fill4}\n    fillOpacity=\"1\" \n    strokeOpacity=\"1\" cx={xPos} cy={yPos} r={this.state.rad}>\n    </circle>;\n\n    return hard;\n  }\n\n  textReturn(xPos, yPos, tedxt){\n    var hard = <text x = {xPos} y = {yPos}>{tedxt}</text>;\n    return hard;\n  }\n  textReturn2(xPos, yPos, tedxt){\n    var hard = <text x = {xPos} y = {yPos}>{tedxt}</text>;\n    return hard;\n  }\n  textReturn3(xPos, yPos, tedxt){\n    var hard = <text x = {xPos} y = {yPos}>{tedxt}</text>;\n    return hard;\n  }\n  textReturn4(xPos, yPos, tedxt){\n    var hard = <text x = {xPos} y = {yPos}>{tedxt}</text>;\n    return hard;\n  }\n\n  rectReturn1(xPos, yPos){\n    var hard = \n    <rect\n    x = {xPos} y = {yPos} stroke = {this.state.stroke1} fill = {this.state.stroke1} height = {this.state.rectHeight-2} width = {this.state.rect1Width} fillOpacity = \"0.7\" strokeOpacity = \"0.7\"></rect>;\n    return hard;\n  }\n\n  rectReturn2(xPos, yPos){\n    var hard = \n    <rect\n    x = {xPos} y = {yPos +1} stroke = {this.state.stroke1} height = {this.state.rectHeight-2} width = {400} fill = {\"none\"} strokeOpacity = \"0.3\"></rect>;\n    return hard;\n  }\n  rectReturn3(xPos, yPos){\n    var hard = \n    <rect\n    x = {xPos} y = {yPos +1} stroke = {this.state.stroke2} height = {this.state.rectHeight-2} width = {this.state.rect2Width} fillOpacity = \"0.7\" fill = {this.state.stroke2} strokeOpacity = \"0.7\"></rect>;\n    return hard;\n  }\n  rectReturn4(xPos, yPos){\n    var hard = \n    <rect\n    x = {xPos} y = {yPos +1} stroke = {this.state.stroke2} height = {this.state.rectHeight-2} width = {400} fill = {\"none\"} strokeOpacity = \"0.7\"></rect>;\n    return hard;\n  }\n  rectReturn5(xPos, yPos){\n    var hard = \n    <rect\n    x = {xPos} y = {yPos +1} stroke = {this.state.stroke3} height = {this.state.rectHeight-2} width = {this.state.rect3Width} fillOpacity = {0.7} fill = {this.state.fill4} strokeOpacity = \"0.7\"></rect>;\n    return hard;\n  }\n  rectReturn6(xPos, yPos){\n    var hard = \n    <rect\n    x = {xPos} y = {yPos +1} stroke = {this.state.stroke3} height = {this.state.rectHeight-2} width = {400} fill = {\"none\"} fillOpacity = {0.7}strokeOpacity = \"0.7\"></rect>;\n    return hard;\n  }\n  rectReturn7(xPos, yPos){\n    var hard = \n    <rect\n    x = {xPos} y = {yPos} stroke = {this.state.stroke4} height = {this.state.rectHeight-2} fill = {this.state.fill4} fillOpacity = {0.7} width = {this.state.rect4Width} strokeOpacity = \"0.7\"></rect>;\n    return hard;\n  }\n  rectReturn8(xPos, yPos){\n    var hard = \n    <rect\n    x = {xPos} y = {yPos +1} stroke = {this.state.stroke4} height = {this.state.rectHeight-2} width = {400} fill = {\"none\"} strokeOpacity = \"0.3\"></rect>;\n    return hard;\n  }\n  /**\n   * Set up dragger when the component mounts\n   */\n  /**\n   * Renders a dragger in the svg\n   */\n\n  \n  // not finished\n\n  render() {\n    const widthFactor = 6;\n    const heightFactor = 3.5;\n    // TODO: change padding so that the entire graph is in the center of the box\n    return (\n      <div style={{ backgroundColor: \"pink\" }}>\n        <svg width={this.state.width} height={this.state.height/2.5} ref={this.svgRef}>\n\n          {/* rows of dots */}\n          {[...this.state.xPos1].map(\n            (col, index) =>\n              (this.dotReturn1(col + 13,this.state.yPos1[index] - 100))\n          )}\n\n          {[...this.state.xPos2].map(\n            (col, index) =>\n              (this.dotReturn2(col + 13,this.state.yPos2[index]- 100))\n          )}\n\n          {[...this.state.xPos3].map(\n            (col, index) =>\n              (this.dotReturn3(col + 13,this.state.yPos3[index] - 100))\n          )}\n          \n          {[...this.state.xPos4].map(\n            (col, index) =>\n              (this.dotReturn4(col + 13,this.state.yPos4[index] - 100))\n          )}\n                    \n          {/* legend dots */}\n          {/* {this.dotReturn1(this.state.width +220,this.state.height/6 + 70)}\n          {this.dotReturn2(this.state.width +220, this.state.height/6 + 40)}\n          {this.dotReturn3(this.state.width +220, this.state.height/4 +28)}\n          {this.dotReturn4(this.state.width +220, this.state.height/4 +48)} */}\n          {this.dotReturn1(this.state.width/widthFactor,this.state.height/heightFactor)}\n          {this.dotReturn2(this.state.width/widthFactor, this.state.height/heightFactor + 30)}\n          {this.dotReturn3(this.state.width/widthFactor, this.state.height/heightFactor +60)}\n          {this.dotReturn4(this.state.width/widthFactor, this.state.height/heightFactor +90)}\n\n          {/* legend texts */}\n          {/* {this.textReturn(this.state.width + 240, this.state.height/4 + 32, this.state.legendKey[0])}\n          {this.textReturn(this.state.width + 240, this.state.height/4 + 52, this.state.legendKey[1])}\n          {this.textReturn(this.state.width + 240, this.state.height/4 - 8, this.state.legendKey[2])}\n          {this.textReturn(this.state.width + 240, this.state.height/4 - 39, this.state.legendKey[3])} */}\n          {this.textReturn(this.state.width/widthFactor + 4 * this.state.rad, this.state.height/heightFactor + 2 * this.state.rad, this.state.legendKey[0])}\n          {this.textReturn(this.state.width/widthFactor + 4 * this.state.rad, this.state.height/heightFactor + 30 + 2 * this.state.rad, this.state.legendKey[2])}\n          {this.textReturn(this.state.width/widthFactor + 4 * this.state.rad, this.state.height/heightFactor + 60 + 2 * this.state.rad, this.state.legendKey[1])}\n          {this.textReturn(this.state.width/widthFactor + 4 * this.state.rad, this.state.height/heightFactor + 90 + 2 * this.state.rad, this.state.legendKey[3])}\n\n          {/* indices for columns */}\n          {[...this.state.displayArr5].map(\n            (b, index) =>\n              (this.textReturn(this.state.refArr5[index] + 15, this.state.indicesXPos, b))\n          )}\n\n          {this.line2(500,500,50,165)}\n\n          {/* rectangular bars */}\n          {/* {this.rectReturn1(this.state.width/2.5,600)}\n          {this.rectReturn2(this.state.width/2.5,600)}\n          {this.rectReturn3(this.state.width/2.5,650)}\n          {this.rectReturn4(this.state.width/2.5,650)}\n          {this.rectReturn5(this.state.width/2.5,700)}\n          {this.rectReturn6(this.state.width/2.5,700)}\n          {this.rectReturn7(this.state.width/2.5,750)}\n          {this.rectReturn8(this.state.width/2.5,750)} */}\n          {this.rectReturn1(this.state.width/2.5,this.state.height/heightFactor - 2 * this.state.rad)}\n          {this.rectReturn2(this.state.width/2.5,this.state.height/heightFactor - 2 * this.state.rad)}\n          {this.rectReturn3(this.state.width/2.5,this.state.height/heightFactor + 30 - 2 * this.state.rad)}\n          {this.rectReturn4(this.state.width/2.5,this.state.height/heightFactor + 30 - 2 * this.state.rad)}\n          {this.rectReturn5(this.state.width/2.5,this.state.height/heightFactor + 60 - 2 * this.state.rad)}\n          {this.rectReturn6(this.state.width/2.5,this.state.height/heightFactor + 60 - 2 * this.state.rad)}\n          {this.rectReturn7(this.state.width/2.5,this.state.height/heightFactor + 90 - 2 * this.state.rad)}\n          {this.rectReturn8(this.state.width/2.5,this.state.height/heightFactor + 90 - 2 * this.state.rad)}\n\n          {/* sliders */}\n\n        </svg>\n      \n\n        <div>\n        <input type=\"range\" min={this.state.minVal} max={this.state.maxVal} \n              className=\"thresh-top-slider\" onChange={this.onChange1}\n              name=\"sliderPos\" value={this.state.sliderPos} ref={this.sliderRef}\n              style={{ width: this.state.width, left:0}}/>\n        <input type = \"range\" min = {this.state.minVal} max = {this.state.maxVal}\n            className = \"thresh-bottom-slider\" onChange={this.onChange2}\n            name = \"sliderPos2\" value = {this.state.sliderPos2} ref = {this.slider2Ref}\n            style = {{width: this.state.width, left:0}}/>\n        </div>  \n                <label>Choose a color combination (the first color is on top): </label>\n                  <select name=\"stroke1\" id=\"stroke1\" ref={this.stroke1Ref}\n                    defaultValue={this.state.stroke1}>\n                    <option value=\"#0000FF\">Blue and Red</option>\n                    <option value=\"#FF0000\">Red and Blue</option>\n                    <option value=\"Orange and Blue\">Orange and Blue</option>\n                    <option value=\"Blue and Orange\">Blue and Orange</option>\n                    <option value = \"Yellow and Blue\">Yellow and Blue</option>\n                    <option value = \"Blue and Yellow\">Blue and Yellow</option>\n                  </select>\n                  <input onClick={() => this.changeStroke1()} type=\"submit\" value=\"Submit\"></input>\n                  <br></br>\n      </div>\n    )\n  }\n}\n\nexport default ThresholdCurve;\n","import React, { Component } from 'react';\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport ThresholdCurve from './threshold.jsx';\nimport './HistSlider.css';\nimport './ThresholdSlider.css';\n\nclass ThresholdCurveResearch extends Component {\n    constructor(props) {\n      super(props);\n  \n      this.rectRef = React.createRef();\n      this.svgRef = React.createRef();\n      this.areaRef = React.createRef();\n  \n      this.arg1ref = React.createRef();\n      this.arg2ref = React.createRef();\n      this.arg3ref = React.createRef();\n      this.arg4ref = React.createRef();\n      this.arg5ref = React.createRef();\n      this.arg6ref = React.createRef();\n      this.arg7ref = React.createRef();\n  \n      this.handleDrop = this.handleDrop.bind(this);\n      this.processJSON = this.processJSON.bind(this);\n  \n      this.state = {\n        dataReceived: false,\n        fileNames: [],\n        setFileNames: [],\n        fileChosen: '',\n        key: this.props.key\n      };\n    }\n\n    handleDrop(acceptedFiles) {\n      console.log(acceptedFiles.map(file => {\n        acceptedFiles.forEach((file) => {\n\n            const reader = new FileReader()\n            reader.onabort = () => console.log('file reading was aborted')\n            reader.onerror = () => console.log('file reading has failed')\n            reader.onload = () => {\n              // Do whatever you want with the file contents\n              const fileText = reader.result;\n              const jsonData = JSON.parse(fileText);\n\n              this.setState({\n                dataReceived : \"true\",\n                jsonData: jsonData\n            });\n            };\n            reader.readAsText(file);\n        });\n      }));\n      this.setState({ fileNames: acceptedFiles.map(file => file.name) })\n    }\n\n    processJSON(data){\n        this.setState({\n            dataReceived : \"true\",\n            jsonData:data\n        });\n  }\n\n  render(){\n    if (this.state.dataReceived) {\n      // this case is triggered when researchers select one of the three options\n      // previously built for drag n drop file upload. \n      // Search 'dataReceived' in this file to learn more\n      return (\n        <div className=\"boxed\">\n          <ThresholdCurve \n            data={this.state.jsonData} />\n          <br/>\n        </div>\n      )\n    // importing component\n    } else{\n      return( \n        <div className=\"boxed\">\n          Threshold Question\n          <Dropzone\n                onDrop={this.handleDrop}\n                accept=\"application/JSON, .json\"\n              >\n                {({ getRootProps, getInputProps }) => (\n                  <div {...getRootProps({ className: \"dropzone\" })}>\n                    <input {...getInputProps()} />\n                    <p>Drag'n'drop files, or click to select files (must be valid JSON file)</p>\n                  </div>\n                )}\n          </Dropzone>\n          TODO: delete question\n        </div>\n      )\n    }\n  }\n\n\n}\n\nexport default ThresholdCurveResearch;\n","import React, { Component } from 'react';\nimport './TabList.css';\nimport '../TabBuilder/TabBuilder'\nimport TabBuilder from '../TabBuilder/TabBuilder'\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\n// ###TODO###: import your component here\nimport SliderTab from '../items/Slider/SliderTab';\nimport StaticText from '../items/StaticText/StaticText';\nimport NormalCurveResearch from '../items/NormalCurve/NormalCurveResearch';\nimport ThresholdResearch from '../items/ThresholdSlider/thresholdReasearch';\n\nimport { \n  sendFile,\n  getStudyInfo\n} from '../../actions/dataActions'\n\nconst axios = require('axios');\n\n// Allows Psych researchers to configure an experiment \nclass TabList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      children: [],\n      count: 0,\n      output: {},\n      deleted: [],\n      complete: false,\n      exptName: '',\n      files: [],\n      expt: {}\n    }\n    this.myRef = React.createRef();\n    this.submitRef = React.createRef();\n    this.nameRef = React.createRef();\n\n    this.builderFunction = this.builderFunction.bind(this);\n    this.importQuestion = this.importQuestion.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.delete = this.delete.bind(this);\n    this.getCount = this.getCount.bind(this);\n    this.outputCreate = this.outputCreate.bind(this);\n    this.checkOutput = this.checkOutput.bind(this);\n    this.configDataToItem = this.configDataToItem.bind(this);\n    this.saveFile = this.saveFile.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.appendToKeysArr = this.appendToKeysArr.bind(this);\n    this.checkValidInput = this.checkValidInput.bind(this);\n  }\n\n  componentDidMount() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    this.props.getStudyInfo(username, studyName);\n    // console.log(this.props.location.state);\n    if (this.props.location.state != null) {\n      if (!this.props.location.state.newExpt) {\n        const thisExpt = this.props.location.state.exptName;\n        if (!this.props.experiments.length == 0) {\n          const exptObj =\n            this.props.experiments.find(item => item.exptName == thisExpt);\n          this.setState({ expt: exptObj });\n          const qKeys = Object.keys(exptObj).filter(key => key.charAt(0) == \"q\");\n          var qArr = [];\n          qKeys.forEach(key => qArr.push(exptObj[key]));\n          qArr.forEach(q => {\n            this.configDataToItem(q, true);\n            this.setState({ count: this.state.count += 1 });\n          });\n          console.log(\"finished rendering items\");\n        };\n      };\n    };\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  // ###TODO###: Add more cases here for TabList to display \n  //             Follow the format of the provided components below\n  /**\n   * Pushes more component to this.state so that render() can present\n   * individual components to the frontend\n   * @param {[String]} tabDefine [component name]\n   */\n  builderFunction = (tabDefine) => {\n    var arr = this.state.children;\n    switch (tabDefine) {\n      case \"slider\":\n        arr.push({ \n          id: this.state.count, \n          tab: <SliderTab getCount={this.getCount} \n                  delete={this.delete} count={this.state.count} \n                  handleChange={this.handleChange} \n                  key={this.state.count.toString()}\n                  appendToKeysArr={this.appendToKeysArr} /> \n        })\n        break;\n      case \"static-text\": \n        arr.push({\n          id: this.state.count,\n          tab: <StaticText getCount={this.getCount}\n                  delete={this.delete} count={this.state.count}\n                  handleChange={this.handleChange}\n                  key={this.state.count.toString()}/>\n        })\n        break;\n      case \"normal-curve\": \n        arr.push({\n          id: this.state.count,\n          tab: <NormalCurveResearch getCount={this.getCount} \n                  delete={this.delete} count={this.state.count} \n                  handleChange={this.handleChange} \n                  files={this.state.files} saveFile={this.saveFile}\n                  key={this.state.count.toString()}/> \n        })\n        break;  \n      case \"threshold\":\n        arr.push({\n          id: this.state.count,\n          tab: <ThresholdResearch getCount={this.getCount} \n                  delete={this.delete} count={this.state.count}\n                  handleChange={this.handleChange} \n                  files={this.state.files} saveFile={this.saveFile}\n                  key={this.state.count.toString()}/>\n        })\n        break;\n      case \"template\": \n        arr.push({\n          id: this.state.count,\n          tab: <template getCount={this.getCount} \n                  delete={this.delete} count={this.state.count} \n                  handleChange={this.handleChange} \n                  files={this.state.files} saveFile={this.saveFile}\n                  key={this.state.count.toString()}/> \n        })\n      default:\n        arr = <div>Unknown Element</div>\n    }\n\n    var curOutput = this.state.output;\n    curOutput[this.state.count.toString()] = { \"Type\": tabDefine };\n    var newCount = this.state.count + 1;\n    this.setState({ children: arr, count: newCount, output: curOutput, complete: false });\n  }\n\n  /** ###TODO###: add more switch statements here when adding a new component\n   *  ###TODO###: the switch statement is not super necessary, pls improve\n   * Convert question type to its key in json\n   * @param {[String]} qType [question type]\n   */\n  mapQTypetoQKey(qType) {\n    switch(qType) {\n      case \"slider\":\n        return \"slider-question-key\"\n      case \"static-text\":\n        return \"static-text-key\"\n      case \"normal-curve\":\n        return \"normal-curve-question-key\"\n      case \"threshold\":\n        return \"threshold-key\"\n      default:\n        return \"\"\n    }\n  }\n\n  /**\n   * Grab question data based on questionKey and call configDataToItem\n   * to push selected component to this.state to be displayed with \n   * default values based on latest user input\n   * @param {[String]} exptName [experiment name]\n   * @param {[String]} questionKey [question key labeled by users for csvColName]\n   */\n  importQuestion(exptName, questionKey) {\n    const thisExpt = this.props.experiments.filter(item => \n      item[\"exptName\"] == exptName)[0];\n    const thisExptQKeys = Object.keys(thisExpt).filter(k => \n      k.charAt(0) == \"q\");\n    // the question key (e.g. q1) that user has selected\n    const thisQKey = thisExptQKeys.filter(k => {\n      const key = this.mapQTypetoQKey(thisExpt[k][\"Type\"]);\n      return thisExpt[k][key] == questionKey;\n    })[0];\n    const questionToDisplay = thisExpt[thisQKey];\n    // console.log(questionToDisplay);\n\n    // questions will show up once an expt type is pushed to this.state.children\n    // by configDataToItem\n    this.configDataToItem(questionToDisplay, false);\n  }\n\n  // ###### TODO ######: Add your component here\n  /**\n   * Push selected react component to this.state.children to be displayed \n   * Used when importing or editing question. \n   * @param {[Object]} question [a json object containing a question's data]\n   * @param {[Boolean]} editing [whether the component is displayed for \n   *                             \"Edit Experiment\" feature]\n   */\n  configDataToItem(question, editing) {\n    var arr = this.state.children;\n    switch (question[\"Type\"]) {\n      case \"slider\":\n        arr.push({ \n          id: this.state.count, \n          tab: <SliderTab \n                  defaultQ={question[\"Question\"]}\n                  defaultMin={question[\"lowRange\"]}\n                  defaultMax={question[\"highRange\"]}\n                  imported={true}\n                  editing={editing}\n                  getCount={this.getCount} \n                  delete={this.delete} count={this.state.count} \n                  handleChange={this.handleChange} \n                  key={this.state.count.toString()}\n                  appendToKeysArr={this.appendToKeysArr} /> \n        })\n        break;\n      case \"static-text\": \n        arr.push({\n          id: this.state.count,\n          tab: <StaticText \n                  qToDisplay={question}\n                  imported={true}\n                  editing={editing}\n                  getCount={this.getCount}\n                  delete={this.delete} count={this.state.count}\n                  handleChange={this.handleChange}\n                  key={this.state.count.toString()}/>\n        })\n        break;\n      case \"normal-curve\": \n        arr.push({\n          id: this.state.count,\n          tab: <NormalCurveResearch \n                  qToDisplay={question}\n                  imported={true}\n                  editing={editing}\n                  getCount={this.getCount} \n                  delete={this.delete} count={this.state.count} \n                  handleChange={this.handleChange} \n                  files={this.state.files} saveFile={this.saveFile}\n                  key={this.state.count.toString()}/> \n        })\n        break;  \n      case \"threshold\":\n        arr.push({\n          id: this.state.count,\n          tab: <ThresholdResearch getCount={this.getCount} \n                  delete={this.delete} count={this.state.count}\n                  handleChange={this.handleChange} \n                  files={this.state.files} saveFile={this.saveFile}\n                  key={this.state.count.toString()}/>\n        })\n        break;\n      default:\n        arr = <div>Unknown Element</div>\n    };\n\n    var curOutput = this.state.output;\n    curOutput[this.state.count.toString()] = { \"Type\": question[\"Type\"] };\n    var newCount = this.state.count + 1;\n    this.setState({ children: arr, count: newCount, output: curOutput, complete: false });    \n  }\n\n  /**\n   * Put / modify the key and value pair in the final output JSON object\n   * @param {[String]} key [key of json object to be updated]\n   * @param {[Any]} value [value to be added / modified]\n   * @param {[Number]} count [numerical order of the question json obj]\n   */\n  handleChange(key, value, count) {\n    var curOutput = this.state.output;\n    curOutput[count.toString()][key] = value;\n    this.setState({ output: curOutput });\n  }\n\n  // DEPRECATED method\n  // it's only applied to SliderTab which we don't use anymore\n  appendToKeysArr(objType, nameType, csvColName, count) {\n    var curOutput = this.state.output;\n    const objKeys = Object.keys(curOutput[count.toString()]);\n    // console.log(objKeys);\n    if (objKeys.includes(objType)) {\n      curOutput[count.toString()][objType][nameType] = csvColName;\n    } else {\n      curOutput[count.toString()][objType] = {};\n      curOutput[count.toString()][objType][nameType] = csvColName;\n    }\n    console.log(curOutput);\n    // curOutput[count.toString()][\"csvColNames\"]\n  }\n\n  /**\n   * Delete a question based on its numerical order\n   * @param {[Number]} id [ID of question to be deleted]\n   */\n  delete(id) {\n    var newDelete = this.state.deleted;\n    newDelete.push(id);\n    this.setState({ deleted: newDelete });\n  }\n\n  getCount(count) {\n    return count;\n  }\n\n  // Action: put newly uploaded files into this.state. \n  //         All newly uploaded files will be sent to database as JSON objs\n  saveFile(type, name, content) {\n    const newFile = {\n      \"itemType\": type,\n      \"fileName\": name,\n      \"fileContent\": content\n    };\n    this.setState({ files: this.state.files.concat(newFile) });\n  }\n\n  // validating input fields. \n  // ****** TODO ******\n  // improve this function such that it checks if user has entered valid inputs\n  checkOutput(obj) {\n    var int = 0;\n    var complete = true;\n    while ((int.toString()) in obj) {\n      var elem = obj[int.toString()];\n      switch (elem[\"Type\"]) {\n        case \"slider\":\n          var lowIs = \"lowRange\" in elem;\n          var highIs = \"highRange\" in elem;\n          var qIs = \"Question\" in elem;\n          if (lowIs && highIs && qIs) {\n            var lowNum = !isNaN(elem[\"lowRange\"]);\n            var highNum = !isNaN(elem[\"highRange\"]);\n            var highLow = parseInt(elem[\"highRange\"]) > parseInt(elem[\"lowRange\"]);\n            if (highLow && lowNum && highNum) {\n              complete = complete && true;\n            }\n            else {\n              complete = false;\n            }\n          }\n          else {\n            complete = false;\n          }\n          break;\n        default:\n          complete = false;\n      case \"normal-curve\":\n        complete = true;\n      }\n      int++;\n    }\n    return complete;\n  }\n\n  /**\n   * A function to check if user has put in required information\n   */\n  checkValidInput() {\n    if (this.nameRef.current.value == '') {\n      alert(\"Please enter the name of your experiment.\");\n      return false;\n    };\n    return true;\n  }\n\n  /**\n   * Create a final json object containing an experiment's config data\n   * and send the object to database\n   * @param {[Boolean]} newExpt [whether the experiment is new]\n   */\n  outputCreate(newExpt) {\n    var obj = {};\n    var index = {};\n    // the following block adds the mapping of cvs columns to question fields\n    this.state.children\n      .filter(item => this.state.deleted.indexOf(item.id) === -1)\n      .map((item) => { \n        obj[item.id.toString()] = this.state.output[item.id.toString()];\n        const exptItem = this.state.output[item.id.toString()];\n        switch (exptItem[\"Type\"]) {\n          case \"static-text\":\n            index[exptItem[\"static-text-key\"]] = exptItem[\"Static Text\"];\n          case \"normal-curve\":\n            index[exptItem[\"normal-curve-question-key\"]] = exptItem[\"Question\"];\n            index[exptItem[\"normal-curve-question-key\"] + \".\" + exptItem[\"normal-curve-legend-key1\"]] = exptItem[\"graph1key\"];\n            index[exptItem[\"normal-curve-question-key\"] + \".\" + exptItem[\"normal-curve-legend-key2\"]] = exptItem[\"graph2key\"];\n          case \"threshold\":\n            index[exptItem[\"threshold-key\"]] = exptItem[\"Question\"];\n        }\n      });\n    // var validName = this.nameRef.current.value.length > 0;\n    // if (!(0 in obj) || !this.checkOutput(obj) || !validName) {\n    // if (!validName) {\n    if (this.checkValidInput()) {\n      var finalObj = {};\n      finalObj[\"exptName\"] = this.nameRef.current.value;\n      var int = 0;\n      while (int < this.state.count) {\n        if ((int.toString()) in obj) {\n          finalObj[\"q\" + int.toString()] = obj[int.toString()];\n        }\n        int++;\n      }\n      finalObj[\"count\"] = int;\n      delete index[\"undefined\"];\n      finalObj[\"index\"] = index;\n\n      console.log(finalObj);\n\n      const username = this.props.auth.user.username;\n      const studyName = this.props.match.params.studyName;\n\n      if (!this.state.files.length == 0) {\n        this.state.files.map(item => this.props.sendFile(username, item))\n      };\n\n      // If this experiment is new, PUT request to append to the \"experiments\"\n      // array associated with studyName in the studyName's file in \"/info\"\n      if (newExpt) {\n        axios\n        .put(\n          'https://test-api-615.herokuapp.com/api/feedback/' + username +\n          '/info/studyName-' + studyName + '/experiments',\n          finalObj\n        )\n        .then(res => {\n          console.log(res)\n        })\n        .then(function (response) {\n          alert(\"Your experiment has been successfully created\");\n          window.location.reload(false);\n        })\n        .catch(function (error) {\n          alert(\"Failed to create the survey\");\n          console.log(error);\n        });\n      } else {\n        // the experiment is not new -> the experiment is in \"Edit Experiment\"\n        // mode, so we need to query the specific exptName and update that \n        // element by deleting the old one and appending the new expt json obj\n        // to the \"experiments\" array associated with studyName\n        if (this.props.location.state != null) {\n          const exptName = this.props.location.state.exptName;\n          axios\n          .delete('https://test-api-615.herokuapp.com/api/feedback/' + \n            username + '/info/studyName-' + studyName + '/experiments/exptName-' +\n            exptName)\n          .then(res => {\n            axios\n            .put(\n              'https://test-api-615.herokuapp.com/api/feedback/' + username +\n              '/info/studyName-' + studyName + '/experiments',\n              finalObj\n            )\n            .then(res => {\n              console.log(res)\n            })\n            .then(function (response) {\n              alert(\"Your experiment has been successfully updated\");\n              window.location.reload(false);\n            })\n            .catch(function (error) {\n              console.log(error);\n            });\n          });\n        }\n        \n      }\n    }\n  }\n\n  render() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    const studyLink = \"/\" + username + \"/\" + studyName;\n\n    var obj = {};\n    this.state.children\n      .filter(item => this.state.deleted.indexOf(item.id) === -1)\n      .map((item) => { obj[item.id.toString()] = this.state.output[item.id.toString()] });\n    var finalObj = {};\n    // finalObj[\"exptName\"] = this.nameRef.current.value;\n    var int = 0;\n    while (int < this.state.count) {\n      if ((int.toString()) in obj) {\n        finalObj[\"q\" + int.toString()] = obj[int.toString()];\n      }\n      int++;\n    }\n    finalObj[\"count\"] = int;\n    return (\n      <div ref={this.myRef}>\n        <h2>Experiment Builder</h2>\n        Back to <p> </p>\n        <Link to={studyLink}>\n          {studyName}\n        </Link>\n        <div>\n          {/* <button onClick={() => console.log(this.state.children)}>see children</button> */}\n          <form action=\"/submit\" method=\"POST\" className=\"unit\">\n            <p>Enter a name for this experiment </p>\n            <input ref={this.nameRef}\n              // value={this.state.exptName}\n              // onChange={this.onChange}\n              defaultValue={this.state.expt.exptName}\n              type=\"text\" id=\"userid\" name=\"exptName\" /><br />\n            <b>all experiments in a study must have unique names</b>\n          </form>\n          {/* Display components in this.state.children */}\n          {\n            this.state.children\n              .filter(item => this.state.deleted.indexOf(item.id) === -1)\n              .map((item) => {\n                return item.tab;\n              })\n          }\n          <TabBuilder \n            build={this.builderFunction} \n            importQuestion={this.importQuestion}\n            username={this.props.match.params.username}\n            studyName={this.props.match.params.studyName} />\n          <br/>\n          {/* Add condition here. Submit / Update Experiment */}\n          {\n            this.props.location.state != null \n            ?\n            // based on whether researchers are creating a new experiment or\n            // editing an experiment, we show different buttons\n            <div>\n              {\n                this.props.location.state.newExpt\n                ?\n                <div className=\"extraPad\">\n                  <button onClick={() => this.outputCreate(true)} ref={this.submitRef} type=\"submit\" value=\"Submit\" className=\"btn\">Submit</button>\n                </div>\n                :\n                <div className=\"extraPad\">\n                  <button onClick={() => this.outputCreate(false)} ref={this.submitRef} type=\"submit\" value=\"Submit\" className=\"btn\">Update Experiment</button>\n                  <p style={{ opacity: 0 }}> place holder </p> \n                  <button className=\"btn\" onClick={() => this.props.history.push(studyLink)}>\n                    Cancel\n                  </button>\n                </div>\n              }\n            </div>\n            :\n            <div className=\"extraPad\">\n              <button onClick={() => this.outputCreate(true)} ref={this.submitRef} type=\"submit\" value=\"Submit\" className=\"btn\">Submit</button>\n            </div>\n          }\n        </div>\n        <br/>\n        {/* <button onClick={() => console.log(finalObj)}>Show finalObj</button><br/> */}\n        {/* <button onClick={() => console.log(this.state.files)}>Show files</button> */}\n      </div>\n    )\n  }\n}\n\nTabList.propTypes = {\n  auth: PropTypes.object.isRequired,\n  dataFlowDBInfo: PropTypes.array.isRequired,\n  sendFile: PropTypes.func.isRequired,\n  dataFlowFileName: PropTypes.string.isRequired,\n  getStudyInfo: PropTypes.func.isRequired,\n  experiments: PropTypes.array.isRequired\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  dataFlowDBInfo: state.dataFlow.dbInfo,\n  dataFlowFileName: state.dataFlow.fileName,\n  experiments: state.dataFlow.studyInfo\n});\n\n// export default TabList;\nexport default connect(\n  mapStateToProps,\n  { sendFile, getStudyInfo }\n)(TabList);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\n/**\n * Navigation bar\n */\nclass Navbar extends Component {\n  render() {\n    const userIsLoggedIn = this.props.auth.isAuthenticated;\n    return (\n      <div className=\"navbar-fixed\">\n        <nav className=\"z-depth-0\">\n          <div className=\"nav-wrapper white\">\n            <Link to=\"/\">\n              Home\n            </Link>\n            <br/>\n            {userIsLoggedIn ? '' : \n              <Link to=\"/register\">Register</Link>}\n            <br/>\n            {userIsLoggedIn ? \n              <Link to=\"/dashboard\"> Dashboard </Link> \n              : \n              <Link to=\"/login\">Login</Link>}\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\n// export default Navbar;\nNavbar.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(Navbar);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\n/**\n * Display researcher name on top of webpage\n */\nclass Landing extends Component {\n  componentWillMount() {\n  }\n\n  render() {\n    if (!this.props.auth.isAuthenticated) {\n      return (\n        <div className=\"container\">\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"container\">\n          Scientist: <b>{this.props.auth.user.username}</b>\n        </div>\n      );\n    }\n  }\n}\n\nLanding.propTypes = {\n  auth: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(Landing);\n\n// export default Landing;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>\n          Welcome to Psych Researcher App!\n          </h1>\n          Please click on this <p></p>\n        <a target=\"_blank\" href=\"https://github.com/statistical-perceptions/statistical-perceptions.github.io\">link</a> <p></p>\n          to view researcher user guide.\n      </div>\n    )\n  }\n}\n\nHomePage.propTypes = {\n  auth: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(HomePage);\n\n// export default Landing;","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\nimport { registerUser } from \"../../actions/authActions\";\n\n/**\n * Register user\n */\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: \"\",\n      password: \"\",\n      password2: \"\",\n      errors: {}\n    };\n  };\n\n  componentDidMount() {\n    // If logged in and user navigates to Register page,\n    // should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    };\n  };\n\n  /**\n   * Change entries in this.state\n   * @param {[Event]} e [An event that's subject to change]\n   */\n  onChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  /**\n   * Register user\n   * @param {[Event]} e [An event]\n   */\n  onSubmit = e => {\n    e.preventDefault();\n    const newUser = {\n      username: this.state.username,\n      password: this.state.password,\n      password2: this.state.password2\n    };\n    this.props.registerUser(newUser, this.props.history);\n  };\n\n  render() {\n    const errors = this.state.errors;\n    return (\n      <div className=\"container\">\n        <h1>Register below</h1>\n        <p className=\"grey-text text-darken-1\">\n          Already have an account?\n        <Link to=\"/login\">Log in</Link>\n        </p>\n        <form noValidate onSubmit={this.onSubmit}>\n          Username:\n          <input\n            onChange={this.onChange}\n            value={this.state.username}\n            error={errors.username}\n            id=\"username\"\n            type=\"text\"\n            className={classnames(\"\", {\n              // userExists comes from res json message in API\n              invalid: errors.userExists\n            })} />\n          <span className=\"red-text\">{errors.userExists}</span>\n          <br />\n          <br />\n            Password:\n            <input\n              onChange={this.onChange}\n              value={this.state.password}\n              error={errors.password}\n              id=\"password\"\n              type=\"password\"\n              className={classnames(\"\", {\n              invalid: errors.password})} />\n          <span className=\"red-text\">{errors.password}</span>\n          <br />\n          <br />\n            Confirm Password:\n            <input\n              onChange={this.onChange}\n              value={this.state.password2}\n              error={errors.password2}\n              id=\"password2\"\n              type=\"password\"\n              className={classnames(\"\", {\n                invalid: errors.password2})} />\n          <span className=\"red-text\">{errors.password2}</span>\n          <br />\n          <br />\n          <button type=\"submit\" className=\"btn\">\n            Register\n          </button>\n        </form>\n      </div>\n    );\n  };\n};\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\n// map state from redux props to use inside components\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\n// linking redux to Register component\n// withRouter makes it easy to redirect within a component\nexport default connect(\n  mapStateToProps,\n  { registerUser }\n)(withRouter(Register));","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\n\n/**\n * Login a user\n */\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: \"\",\n      password: \"\",\n      errors: {}\n    };\n  };\n\n  componentDidMount() {\n    // If logged in and user navigates to Register page,\n    // should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      // push user to dashboard when they login\n      this.props.history.push(\"/dashboard\");\n    }\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  /**\n   * Change entries in this.state\n   * @param {[Event]} e [An event that's subject to change]\n   */\n  onChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  /**\n   * Login user\n   * @param {[Event]} e [An event]\n   */\n  onSubmit = e => {\n    e.preventDefault();\n    const userData = {\n      username: this.state.username,\n      password: this.state.password\n    };\n    // we are redirecting wthin a component, so we don't need to\n    // pass in this.props.history\n    this.props.loginUser(userData);\n  };\n\n  render() {\n    const errors = this.state.errors;\n    return (\n      <div className=\"container\">\n        <h1>Log in</h1>\n        <form noValidate onSubmit={this.onSubmit}>\n          Username:\n          <input\n            onChange={this.onChange}\n            value={this.state.username}\n            error={errors.username}\n            id=\"username\"\n            type=\"text\"\n            className={classnames(\"\", {\n              invalid: errors.userNotFound\n              // || USERNAME NOT FOUND\n            })} />\n          <span className=\"red-text\">{errors.userNotFound}</span>\n          <br />\n          <br />\n          Password:\n          <input\n            onChange={this.onChange}\n            value={this.state.password}\n            error={errors.password}\n            id=\"password\"\n            type=\"password\"\n            className={classnames(\"\", {\n              invalid: errors.pwdIncorrect\n            })} />\n          <span className=\"red-text\">{errors.pwdIncorrect}</span>\n          <br />\n          <br />\n          <input\n            type=\"submit\"\n            value=\"Log in\"\n            className=\"btn\" />\n        </form>\n      </div>\n    );\n  };\n};\n\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { loginUser }\n)(Login);","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport { logoutUser } from \"../../actions/authActions\";\n\nimport {\n  addStudyName,\n  getDBInfo\n} from \"../../actions/dataActions\";\n\nimport './Dashboard.css';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      studyName: ''\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.onAddStudy = this.onAddStudy.bind(this);\n    this.onDeleteStudy = this.onDeleteStudy.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  /**\n   * load experiment names when the page loads\n   */\n  componentWillMount() {\n    const username = this.props.auth.user.username;\n    this.props.getDBInfo(username); // dbInfo will be in the store now\n  }\n\n  /**\n   * Return names of studies created by user\n   */\n  getStudyNames() {\n    const allInfo = this.props.dataFlowDBInfo;\n    return allInfo.map(item => {\n      const allKeys = Object.keys(item);\n      if (allKeys.includes(\"studyName\")) {\n        const username = this.props.auth.user.username;\n        const link = \"/\" + username + \"/\" + item.studyName;\n        return (\n          <div className=\"container\">\n            <p id={item.studyName}>\n              {item.studyName} <p> </p> \n              <Link to={link}>\n                View\n              </Link> <p> </p>\n              <button id={item.studyName} onClick={this.onDeleteStudy}>\n                Delete\n              </button>\n            </p>\n          </div>\n        )\n      }\n    });\n  }\n\n  /**\n   * Call addStudyName from redux actions\n   */\n  onAddStudy() {\n    const username = this.props.auth.user.username;\n    this.props.addStudyName(username, this.state.studyName);\n  };\n\n  /**\n   * DELETE request to remove collection named [studyName] and all other \n   * collections associated with [studyName]\n   * @param {[Event]} e [an event triggered by deleting a study]\n   */\n  onDeleteStudy(e) {\n    const username = this.props.auth.user.username;\n    const studyName = e.target.id;\n    var confirm = window.confirm(\"Are you sure you want to delete this\" + \n      \" study [\" + studyName + \"] and all its experiment data?\");\n    if (confirm) {\n      // delete the study doc in /info collection\n      axios\n        .delete('https://test-api-615.herokuapp.com/api/feedback/' + \n          username + '/info/studyName-' + studyName);\n      // delete all deployed experiment collections in user's database\n      axios\n        .delete('https://test-api-615.herokuapp.com/api/feedback/' + \n          username + \"/all\", { data: { studyName: studyName }})\n        .then(res => {\n          alert(\"You have succesfully deleted [\" + studyName + \"] and all\" + \n            \" its experiment data!\");\n          window.location.reload(true);\n        })\n    } else {\n      alert(\"Deletion cancelled!\");\n      window.location.reload(true);\n    }\n  }\n\n  onLogoutClick = e => {\n    e.preventDefault();\n    this.props.logoutUser();\n  };\n\n  render() {\n    const username = this.props.auth.user.username;\n    return (\n      <div className=\"container\">\n        <h2>Dashboard</h2>\n\n        {/* Deprecated, used to direct researchers to configure normal curve items on google colab */}\n        {/* <div className=\"boxed\" style={{ width: \"60%\", margin: \"auto\" }}>\n          <br/>\n          <b>Configure Experiment Types:</b> <br/>\n          <a href=\"https://colab.research.google.com/drive/1yleVQB_CrNJ5Z3v-YPatW2XqAD7yS8yp?usp=sharing\" target=\"_blank\">Normal Curves</a>\n          <div><br/></div>\n        </div> */}\n\n        <h3>Add a Study</h3>\n        Enter a name for your study: <br/>\n        <input type=\"text\" name=\"studyName\"\n          value={this.state.studyName} onChange={this.onChange} />\n        <button onClick={this.onAddStudy}>Add Study</button>\n        <br/>\n        Please do <b>not</b> use \"-\" in the name\n\n        <br/><br/>\n        <div className=\"boxed\" style={{ width: \"60%\", margin: \"auto\" }}>\n          <br />\n          {this.getStudyNames()}\n          <br />\n        </div>\n\n        <br/><br/>\n        <button\n          onClick={this.onLogoutClick}\n          className=\"btn\">\n          Logout\n        </button>\n        <div><br/><br/></div>\n      </div>\n    )\n  };\n};\n\nDashboard.propTypes = {\n  // Proptype.type, the type here must match initialState of reducer\n  logoutUser: PropTypes.func.isRequired,\n  addStudyName: PropTypes.func.isRequired,\n  getDBInfo: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  dataFlowDBInfo: PropTypes.array.isRequired\n};\n\n// interaction between reducer and store (state), connect to props \n// for components to use\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  dataFlowDBInfo: state.dataFlow.dbInfo\n});\n\nexport default connect(\n  mapStateToProps,\n  { logoutUser, addStudyName, getDBInfo }\n)(Dashboard);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  getStudyInfo,\n  createExptCol,\n  getColNames,\n  saveAddInfo\n} from \"../../actions/dataActions\"\n\nimport axios from \"axios\";\n\n/**\n * Create, Edit, Manage experiments in a study\n */\nclass ConfigStudy extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: true,\n      deployed: Boolean\n    };\n\n    this.deployExpts = this.deployExpts.bind(this);\n    this.changeState = this.changeState.bind(this);\n    this.onDeploy = this.onDeploy.bind(this);\n    this.onChecked = this.onChecked.bind(this);\n    this.onDeleteExperiment = this.onDeleteExperiment.bind(this);\n  }\n\n  componentDidMount() {\n    const username = this.props.auth.user.username;\n    const studyName = this.props.match.params.studyName;\n    // Get whether studies in this experiment are randomized. \n    // variable is stored in the file containing studyName\n    axios\n      .get('https://test-api-615.herokuapp.com/api/feedback/' + username +\n        '/info/studyName-' + studyName)\n      .then(res => {\n        const dataToPut = {\n          \"randomize\": true\n        };\n        console.log(res.data);\n        // Deal with studies created by researchers before I implemented \n        // this randomize indicator\n        if (!Object.keys(res.data).includes(\"randomize\")) {\n          this.putRandomize(username, studyName, dataToPut);\n        } else {\n          this.setState({ checked: res.data.randomize });\n        };\n      });\n    this.props.getStudyInfo(username, studyName);\n    this.props.getColNames(username);\n    // if there are more than 1 experiment collections associated with the \n    // study, we mark the state of this experiment as { deployed : true }\n    // once deployed, researchers cannot turn on/off randomization\n    axios\n      .get('https://test-api-615.herokuapp.com/api/' + username + \"/collections\")\n      .then(res => {\n        const thisSudyDeployedExpt = res.data.filter(name => \n          name.split(\"-\")[0] == studyName);\n        this.setState({ deployed: thisSudyDeployedExpt.length >= 1 });\n      });\n  }\n\n  /**\n   * Get names of collections that are already deployed\n   */\n  processColNames() {\n    const studyName = this.props.match.params.studyName;\n    // const processedArr = this.props.colNames.filter(name => name !== \"info\");\n    // const currentStudyExpts = processedArr.filter(name =>\n    //   name.split('-')[0] == studyName);\n    const currentStudyExpts = this.props.colNames.filter(name =>\n      name.split('-')[0] == studyName);\n    const deployedExpts = currentStudyExpts.map(name => name.split('-')[1]);\n    return deployedExpts;\n  }\n\n  /**\n   * PUT request to update document w info\n   * @param {[String]} database_name [name of database to query]\n   * @param {[String]} study_name [study name to query]\n   * @param {[Object]} data [a json object that will be added to the document\n   *                         queried by study_name]\n   */\n  putRandomize(database_name, study_name, data) {\n    axios.put('https://test-api-615.herokuapp.com/api/feedback/' + \n      database_name + '/info/studyName-' + study_name, data);\n  }\n\n  /**\n   * Update document in database when users turn on/off randomization\n   */\n  onChecked() {\n    const nowState = !this.state.checked;\n    this.setState({ checked: !this.state.checked });\n    const username = this.props.auth.user.username;\n    const studyName = this.props.match.params.studyName;\n    const dataToPut = {\n      \"randomize\": nowState\n    }\n    this.putRandomize(username, studyName, dataToPut);\n  }\n\n  /**\n   * Return experiments in a study\n   */\n  getExpts() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n\n    const deployed = this.processColNames();\n    // check if the experiments are deployed \n    return this.props.experiments.map(expt => {\n      const exptName = expt.exptName;\n      const surveyLink = expt.link;\n\n      var condition;\n      if (expt.condition == null) {\n        condition = \"N/A\";\n      } else {\n        condition = expt.condition;\n      }\n\n      const exptDataLink = \"/\" + username + \"/\" + studyName + \"/\" +\n        exptName + \"/configs\";\n      const partExptDataLink = \"/\" + username + \"/\" + studyName + \"/\" +\n        exptName + \"/participantsExptData\";\n      const exptPartLink = \"https://statistical-perceptions.github.io/\" + \n        \"participant-app/#/participant-app/expt/\" + username + \n          \"/\" + studyName + \"-\" + exptName\n      const previewLink = \"https://statistical-perceptions.github.io/\" + \n      \"participant-app/#/participant-app/preview/\" + username + \n        \"/\" + studyName + \"-\" + exptName\n      const dbLink = \"https://test-api-615.herokuapp.com/api/feedback/\" + \n        username + \"/\" + studyName + \"-\" + exptName\n      const exptBuilderLink = \"/\" + username + \"/\" +\n        studyName + \"/exptBuilder\";\n\n      if (deployed.includes(exptName)) {\n        return (\n          <div className=\"container\">\n            <div className=\"boxed\">\n              <b>{expt.exptName}</b> <br/>\n              <a target=\"_blank\" href={previewLink}>\n                Preview Experiment\n              </a> <br/><br/>\n              <Link to={exptDataLink}>\n                <button type=\"button\">\n                  Experiment Configs\n                </button>\n              </Link> <p> </p>\n              <Link to={partExptDataLink}>\n                <button type=\"button\">\n                  View Participants Data\n                </button>\n              </Link> <p> </p> \n              <br/><br/>\n              <button id={expt.exptName} onClick={this.onDeleteExperiment}>\n              Delete this Experiment\n              </button>\n              <br/><br/>\n              Condition: <b>{condition}</b>\n              <br/><br/>\n              <b>Database Link:</b><br/>\n              {dbLink} <br/>\n              <CopyToClipboard text={dbLink}>\n                <button \n                  onClick={() => \n                    alert(\"Database link has been copied to clipboard. \" + \n                      \"Paste it into your Qualtrics survey :)\")}>\n                  Copy experiment link to clipboard\n                </button>\n              </CopyToClipboard>\n              <br/><br/>\n              <b>Experiment Link:</b> <br/>\n              {exptPartLink} <br/>\n              <CopyToClipboard text={exptPartLink}>\n                <button \n                  onClick={() => \n                    alert(\"Experiment link has been copied to clipboard. \" + \n                      \"Paste it into your Qualtrics survey :)\")}>\n                  Copy experiment link to clipboard\n                </button>\n              </CopyToClipboard>\n              <br/><br/>\n              <b>Qualtrics Demographics Survey Link:</b> <br/>\n              {surveyLink} <br/>\n              <CopyToClipboard text={surveyLink}>\n                <button \n                  onClick={() => \n                    alert(\"Qualtrics Survey link has been copied to clipboard. \" + \n                      \"Paste it into your Qualtrics survey :)\")}>\n                  Copy experiment link to clipboard\n                </button>\n              </CopyToClipboard>\n            </div>\n          </div>\n        )\n      } else {\n        return (\n          <div>\n            <div className=\"boxed\">\n            Experiment: <b>{expt.exptName}</b><br/><br/>\n            {/* <Link to={exptDataLink}>\n              <button type=\"button\">\n                Configurations\n              </button>\n            </Link> <p> </p> */}\n            {/* We are passing info to the link so that TabList.js knows */}\n            {/* that we are in editing mode */}\n            <Link to={{\n                pathname: exptBuilderLink,\n                state: {\n                  newExpt: false,\n                  exptName: exptName  \n                }\n              }}>\n              <button type=\"button\">\n                Edit Experiment\n              </button>\n            </Link>\n            {/* <br/><br/> */}\n            <p> </p>\n            <button id={expt.exptName} onClick={this.onDeleteExperiment}>\n            Delete this Experiment\n            </button>\n            <br/><br/>\n            <b>Experiment Link:</b><br/>\n            {exptPartLink} <br/>\n            <CopyToClipboard text={exptPartLink}>\n              <button \n                onClick={() => \n                  alert(\"Experiment link has been copied to clipboard. \" + \n                    \"Paste it into your Qualtrics survey :)\")}>\n                Copy experiment link to clipboard\n              </button>\n            </CopyToClipboard>\n            <br/><br/>\n            <b>Database Link:</b><br/>\n            {dbLink} <br/>\n            <CopyToClipboard text={dbLink}>\n              <button \n                onClick={() => \n                  alert(\"Database link has been copied to clipboard. \" + \n                    \"Paste it into your Qualtrics survey :)\")}>\n                Copy experiment link to clipboard\n              </button>\n            </CopyToClipboard>\n            <br/><br/>\n            <b>TODO</b> <br/>\n            Paste the link to demographics qualtrics survey below: <br/>\n            <textarea cols=\"60\" rows=\"1\" id={exptName + \"link\"}\n              onInput={this.changeState} value={this.state.exptName}></textarea>\n            <br/><br/>\n            {\n              this.state.checked\n              ? <div>\n                <b>TODO</b> <br/>\n                Name the condition of this experiment: <br/>\n                <textarea cols=\"60\" rows=\"1\" id={exptName + \"condition\"}\n                  onInput={this.changeState} value={this.state.condition}></textarea>\n                <br/>\n              </div>\n              : <div></div>\n            }\n            <br/>\n            {/* <button onClick={() => console.log(this.state)}>Show State</button><br/> */}\n            <button id={exptName} onClick={this.onDeploy}> \n              <b>DEPLOY</b>\n            </button>\n            <br/>\n          </div>\n          </div>\n        )\n      };\n    })\n  }\n\n  changeState(e) {\n    this.setState({ [e.target.id]: e.target.value });\n  }\n\n  /**\n   * Delte both expt data stored in /info and expt collection that stores \n   * participant data\n   * @param {[Event]} e [an event triggered by users to delete an expt]\n   */\n  onDeleteExperiment(e) {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    const exptName = e.target.id;\n    var confirm = window.confirm(\"Are you sure you want to delete this\" +\n      \" experiment [\" + exptName + \"] (and all its participant data)?\");\n    if (confirm) {\n      // first delete expt config from /info\n      axios\n      .delete('https://test-api-615.herokuapp.com/api/feedback/' + \n        username + '/info/studyName-' + studyName + '/experiments/exptName-' +\n        exptName)\n      .then(res => {\n        // then delete participant data collection\n        axios\n          .delete('https://test-api-615.herokuapp.com/api/feedback/' + \n            username + \"/one\", {data: {colName: studyName + \"-\" + exptName}})\n          .then(res => {\n            alert(\"You have successfully deleted [\" + exptName + \n              \"] and all its data!\");\n            window.location.reload(true);\n          })\n      });\n    } else {\n      alert(\"Deletion cancelled!\");\n      window.location.reload(true);\n    }\n  }\n\n  /**\n   * Modify expt data associated with studyName file stored in /info \n   * and create a new collectino to store participant data\n   * @param {[Event]} e [an event triggered by user deploying an expt]\n   */\n  onDeploy(e) {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n\n    var exptName;\n    if (e.currentTarget != null) {\n      exptName = e.currentTarget.id;\n    } else {\n      exptName = e;\n    };\n    console.log(exptName);\n\n    const link = this.state[exptName + \"link\"];\n    const condition = this.state[exptName + \"condition\"];\n\n    // process condition first\n    var conditionInfo;\n    if (condition == null) {\n      conditionInfo = { \"condition\": \"N/A\" };\n    } else {\n      conditionInfo = { \"condition\": condition };\n    }\n    // this.props.saveAddInfo(username, studyName, exptName, \"condition\", conditionInfo);\n\n    // NEED TO CLEAN THIS UP \n    // i only used axios here for debugging\n    // PUT requests to add condition and link data to a specific experiment in \n    // the \"experiments array\" associated with studyName\n    axios\n      .put('https://test-api-615.herokuapp.com/api/feedback/' + username + \n           '/info/studyName-' + studyName + '/experiments/exptName-' + exptName + '/' + 'condition',\n           conditionInfo)\n      .then(res => {\n        var linkToSend;\n        if (this.state.checked) {\n          linkToSend = link + \"?condition=\" + condition\n        } else {\n          linkToSend = link;\n        }\n        const linkInfo = { \"link\": linkToSend };\n        axios\n          .put('https://test-api-615.herokuapp.com/api/feedback/' + username + \n               '/info/studyName-' + studyName + '/experiments/exptName-' + exptName + '/' + 'link',\n               linkInfo)\n          .then(res => {\n            // create a new collection in user's database\n            this.props.createExptCol(username, studyName + \"-\" + exptName, exptName);\n          })\n      })\n  }\n\n  // for now deployment simply creates a collection for each experiment \n  // that would later store participants data\n  deployExpts() {\n    const username = this.props.auth.user.username;\n    const studyName = this.props.match.params.studyName;\n\n    const deployed = this.processColNames();\n    const exptNames = this.props.experiments.map(item => item.exptName);\n    const difference = exptNames.filter(name => !deployed.includes(name));\n    difference.forEach(expt_name => {\n      this.props.createExptCol(username, studyName + \"-\" + expt_name, expt_name);\n    });\n  }\n\n  /**\n   * Footer to show different deployment buttons based on deployment status\n   */\n  deploy() {\n    const deployed = this.processColNames();\n    const exptNames = this.props.experiments.map(item => item.exptName);\n    const difference = exptNames.filter(name => !deployed.includes(name));\n    if (exptNames.length == 0) {\n      return (\n        <div className=\"container\">\n          <p style={{ color: \"grey\" }}>\n            No experiments.\n          </p>\n        </div>\n      )\n    } else if (difference.length == 0) {\n      return (\n        <div className=\"container\">\n          <p style={{ color: \"grey\" }}>\n            All experiments are deployed.\n          </p>\n        </div>\n      )\n    } else if (difference.length >= 0) {\n      return (\n        <div className=\"container\">\n          <button style={{ padding: \"12px 28px\" }}\n          onClick={() => difference.forEach(name => this.onDeploy(name))}>\n            <b>Deploy All Experiments</b>\n          </button>\n          <br/>\n          <br/>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    const exptBuilderLink = \"/\" + username + \"/\" +\n      studyName + \"/exptBuilder\";\n\n    const deployed = this.processColNames();\n    const exptNames = this.props.experiments.map(item => item.exptName);\n\n    const partStudyDataLink = \"/\" + username + \"/\" + studyName + \"/participantsStudyData\";\n    return (\n      <div className=\"container\">\n        <h2>Study: {this.props.match.params.studyName}</h2>\n        <Link to={{\n          pathname: exptBuilderLink,\n          state: {\n              newExpt: true\n            }\n          }}>\n          <button>\n            Build an Experiment\n          </button>\n        </Link>\n        <p> </p>\n        <Link to={partStudyDataLink}>\n          <button>\n            View All Participant Data\n          </button>\n        </Link>\n        <h3>\n          Your Experiments\n        </h3>\n        {\n          this.state.deployed\n          ? <div></div>\n          : <div>\n              <input type=\"checkbox\" onChange={this.onChecked} checked={this.state.checked}/>\n                I want to randomize experiments in this study\n              <br/>\n          </div>\n        }\n        {\n          this.state.checked \n          ? <div>\n            You have chosen to randomize experiments in this study.\n          </div>\n          : <div>\n            You have chosen not to randomize experiments in this study. \n            <br/>\n          </div>\n        }\n        <br/>\n        {this.getExpts()}\n        <br /><br />\n        {this.deploy()}\n        <br />\n        {/* <button onClick={() => console.log(this.props.experiments)}>show state</button> */}\n      </div>\n    )\n  }\n}\n\nConfigStudy.propTypes = {\n  // Proptype.type, the type here must match initialState of reducer\n  auth: PropTypes.object.isRequired,\n  getStudyInfo: PropTypes.func.isRequired,\n  experiments: PropTypes.array.isRequired,\n  createExptCol: PropTypes.func.isRequired,\n  getColNames: PropTypes.func.isRequired,\n  colNames: PropTypes.array.isRequired,\n  saveAddInfo: PropTypes.func.isRequired\n};\n\n// interaction between reducer and store (state), connect to props \n// for components to use\n// props: state\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  // experiments refer to the experiment configurations \n  // stored in collection [info] under the user's database\n  experiments: state.dataFlow.studyInfo,\n  colNames: state.dataFlow.colNames\n});\n\nexport default connect(\n  mapStateToProps,\n  { getStudyInfo, createExptCol, getColNames, saveAddInfo }\n)(ConfigStudy);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport {\n  getStudyInfo\n} from \"../../actions/dataActions\"\n\n/**\n * Shows experiment configurations\n * TODO: Improve this component so that data presentation looks better\n */\nclass ExptConfigs extends Component {\n\n  componentDidMount() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    this.props.getStudyInfo(username, studyName);\n  }\n\n  /**\n   * Get experiment config data (obj) from redux store and show it as a string\n   */\n  showExptData() {\n    const thisExpt = this.props.match.params.exptName;\n    if (!this.props.experiments.length == 0) {\n      const exptObj =\n        this.props.experiments.find(item => item.exptName == thisExpt);\n      const JSONString = JSON.stringify(exptObj);\n      return (\n        <div>\n          {JSONString}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    const studyLink = \"/\" + username + \"/\" + studyName;\n    return (\n      <div className=\"container\">\n        <h2>Experiment: {this.props.match.params.exptName}</h2>\n        Back to <p> </p>\n        <Link to={studyLink}>\n          {studyName}\n        </Link>\n        <br /><br />\n        <b>Configuration data: </b>\n        <br /><br />\n        {this.showExptData()}\n      </div>\n    )\n  }\n}\n\nExptConfigs.propTypes = {\n  // Proptype.type, the type here must match initialState of reducer\n  getStudyInfo: PropTypes.func.isRequired,\n  experiments: PropTypes.array.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\n// interaction between reducer and store (state), connect to props \n// for components to use\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  experiments: state.dataFlow.studyInfo\n});\n\nexport default connect(\n  mapStateToProps,\n  { getStudyInfo }\n)(ExptConfigs);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { CSVLink } from \"react-csv\";\nimport axios from \"axios\";\n\nimport {\n  getColNames,\n  getColsData,\n  getStudyInfo\n} from \"../../actions/dataActions\"\n\nimport \"./PartData.css\";\n\n/**\n * Shows participant data for a specific study\n */\nclass PartStudyData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.makeArr = this.makeArr.bind(this);\n    this.showJSONData = this.showJSONData.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n  }\n\n  /**\n   * Get participant data from all collections associated with this study\n   */\n  componentWillMount() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    axios\n      .get('https://test-api-615.herokuapp.com/api/' + username + \"/collections\")\n      .then(res => {\n        const nameArr = res.data;\n        // ****** TODO ******\n        // improve this query method so it's safer than .includes\n        const partColNames = nameArr.filter(name => \n          name != \"info\" && name != \"itemData\" && name.includes(studyName));\n        console.log(partColNames);\n        partColNames.map(colName => this.props.getColsData(username, colName));\n        this.props.getStudyInfo(username, studyName);\n    })\n  }\n\n  /**\n   * Flatten the object such that all data lives \"flat\" on the first level\n   * @param {[Object]} obj [a json object containing an indivual participant's\n   *                        experiment data]\n   */\n  flattenObj(obj) {\n    var flattendObj = {};\n    const flattenObject = (obj, keyName) => {\n      Object.keys(obj).forEach(key => {\n        var newKey = `${keyName}.${key}` \n        if (typeof obj[key] === \"object\") {\n          // calling the function again\n          flattenObject(obj[key], newKey);\n        } else {\n          flattendObj[newKey] = obj[key];\n        }\n      });\n    };\n    flattenObject(obj, \"\");\n\n    function renameKey (obj, oldKey, newKey) {\n      obj[newKey] = obj[oldKey];\n      delete obj[oldKey];\n    }\n\n    const allKeys = Object.keys(flattendObj);\n    allKeys.map(k => {\n      const oldKey = k;\n      const newKey = oldKey.substr(1, oldKey.length);\n      renameKey(flattendObj, oldKey, newKey)\n    })\n\n    return flattendObj;\n  } \n\n  /**\n   * Make an array where each entry is a flat json Object containing an \n   * individual participant's experiment data\n   */\n  makeArr() {\n    if (!Object.keys(this.props.colsData).length == 0) {\n      // console.log(this.props.colData);\n      var arr = [];\n      var ids = [];\n      const arrToProcess = this.props.colsData;\n      // console.log(arrToProcess);\n      arrToProcess.forEach(item => {\n        const id = item.participantID;\n        const keysInItem = Object.keys(item);\n        const qKeys = \n          keysInItem.filter(k => k != \"participantID\" && k != \"_id\");\n        \n        if (ids.includes(id)) {\n          // find that id in arr and update the item\n          arr.forEach(ele => {\n            if (ele.participantID == id) {\n              const prevData = ele;\n              qKeys.forEach(k => prevData[k] = item[k]);\n              ele = prevData;\n            }\n          })\n        } else {\n          // make a new item, put it in arr, and put id in ids \n          const doc = {};\n          doc[\"participantID\"] = id;\n          qKeys.forEach(k => doc[k] = item[k]);\n          arr.push(doc);\n          ids.push(id);\n          // console.log(doc);\n        }\n      })\n      // arr.map(ele => ele = this.flattenObj(ele));\n      arr.map(ele => {\n        const newEle = this.flattenObj(ele);\n        const i = arr.indexOf(ele);\n        arr[i] = newEle;\n      });\n      return arr;\n    }\n  }\n\n  /**\n   * Convert json objects to string and present them\n   */\n  showJSONData() {\n    const arr = this.makeArr();\n    if (arr != null) {\n      return arr.map(ele => {\n        const line = JSON.stringify(ele);\n        return (\n          <div>\n            <br/>\n            {line}\n          </div>\n        )\n      })\n    }\n  }\n\n  /**\n   * Method to export csv file containing participant data for this study\n   */\n  getIndex() {\n    const studyName = this.props.match.params.studyName;\n    if (!this.props.experiments.length == 0) {\n      var allIndex = [];\n      this.props.experiments.map(item => {\n        allIndex.push(item[\"index\"]);\n      });\n\n      let str = \"\";\n      allIndex.map(item => {\n        const objKeys = Object.keys(item);\n        objKeys.map(key => {\n          const line = key.toString() + \": \" + item[key].toString() + \"\\n\"\n          str += line;\n        });\n      });\n\n      const element = document.createElement(\"a\");\n      const file = new Blob([str], {type: 'text/plain'});\n      element.href = URL.createObjectURL(file);\n      element.download = studyName + \"Legend.txt\";\n      document.body.appendChild(element); \n      element.click();\n      console.log(file);\n    }\n  }\n\n  render() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    const studyLink = \"/\" + username + \"/\" + studyName;\n    const file_name = username + \"_\" + studyName + \"_data.csv\";\n    const arr = this.makeArr();\n    if (arr != null) {\n      return (\n        <div>\n          <h2>All Participant Data from Study: {studyName}</h2>\n          Back to <p> </p>\n          <Link to={studyLink}>\n            {studyName}\n          </Link>\n          <br /><br />\n          <button>\n            <CSVLink data={arr} filename={file_name}>\n              Download Data as CSV\n            </CSVLink>\n          </button>\n          <br/><br/>\n          <button onClick={this.getIndex}>Download Legend</button>\n          {this.showJSONData()}\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <h2>All Participant Data from Study: {studyName}</h2>\n          Back to <p> </p>\n          <Link to={studyLink}>\n            {studyName}\n          </Link>\n          <br /><br />\n          It seems like there's no participant data yet... \n        </div>\n      )\n    }\n    \n  }\n}\n\nPartStudyData.propTypes = {\n  // Proptype.type, the type here must match initialState of reducer\n  getColsData: PropTypes.func.isRequired,\n  getColNames: PropTypes.func.isRequired,\n  colsData: PropTypes.array.isRequired,\n  auth: PropTypes.object.isRequired,\n  colNames: PropTypes.array.isRequired,\n  getStudyInfo: PropTypes.func.isRequired,\n  experiments: PropTypes.array.isRequired\n};\n\n// interaction between reducer and store (state), connect to props \n// for components to use\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  colsData: state.dataFlow.colsData,\n  colNames: state.dataFlow.colNames,\n  experiments: state.dataFlow.studyInfo\n});\n\nexport default connect(\n  mapStateToProps,\n  { getColNames, getColsData, getStudyInfo }\n)(PartStudyData);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { CSVLink } from \"react-csv\";\n\nimport {\n  getColData,\n  getStudyInfo\n} from \"../../actions/dataActions\"\n\nimport \"./PartData.css\";\n\n/**\n * Shows participant data for a specific experiment\n */\nclass PartExptData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // finalObj: {}\n    };\n\n    this.makeArr = this.makeArr.bind(this);\n    this.showJSONData = this.showJSONData.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n  }\n\n  componentWillMount() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    const exptName = this.props.match.params.exptName;\n    const colName = studyName + \"-\" + exptName;\n    this.props.getColData(username, colName);\n    this.props.getStudyInfo(username, studyName);\n  }\n\n  /**\n   * Flatten the object such that all data lives \"flat\" on the first level\n   * @param {[Object]} obj [a json object containing an indivual participant's\n   *                        experiment data]\n   */\n  flattenObj(obj) {\n    var flattendObj = {};\n    const flattenObject = (obj, keyName) => {\n      Object.keys(obj).forEach(key => {\n        var newKey = `${keyName}.${key}` \n        if (typeof obj[key] === \"object\") {\n          // recursive call\n          flattenObject(obj[key], newKey);\n        } else {\n          flattendObj[newKey] = obj[key];\n        }\n      });\n    };\n    flattenObject(obj, \"\");\n\n    function renameKey (obj, oldKey, newKey) {\n      obj[newKey] = obj[oldKey];\n      delete obj[oldKey];\n    }\n\n    const allKeys = Object.keys(flattendObj);\n    allKeys.map(k => {\n      const oldKey = k;\n      const newKey = oldKey.substr(1, oldKey.length);\n      renameKey(flattendObj, oldKey, newKey)\n    })\n\n    return flattendObj;\n  } \n\n  /**\n   * Make an array where each entry is a flat json Object containing an \n   * individual participant's experiment data\n   */\n  makeArr() {\n    if (!Object.keys(this.props.colData).length == 0) {\n      var arr = [];\n      var ids = [];\n      const arrToProcess = this.props.colData;\n      arrToProcess.forEach(item => {\n        const id = item.participantID;\n        const keysInItem = Object.keys(item);\n        // switch statement here\n        const qKeys = \n          keysInItem.filter(k => k != \"participantID\" && k != \"_id\");\n        \n        if (ids.includes(id)) {\n          // find that id in arr and update the item\n          arr.forEach(ele => {\n            if (ele.participantID == id) {\n              const prevData = ele;\n              qKeys.forEach(k => prevData[k] = item[k]);\n              ele = prevData;\n            }\n          })\n        } else {\n          // make a new item, put it in arr, and put id in ids \n          const doc = {};\n          doc[\"participantID\"] = id;\n          qKeys.forEach(k => doc[k] = item[k]);\n          arr.push(doc);\n          ids.push(id);\n          // console.log(doc);\n        }\n      })\n      // arr.map(ele => ele = this.flattenObj(ele));\n      arr.map(ele => {\n        const newEle = this.flattenObj(ele);\n        const i = arr.indexOf(ele);\n        arr[i] = newEle;\n      });\n      return arr;\n    }\n  }\n\n  /**\n   * Convert json objects to string and present them\n   */\n  showJSONData() {\n    const arr = this.makeArr();\n    if (arr != null) {\n      return arr.map(ele => {\n        const line = JSON.stringify(ele);\n        return (\n          <div>\n            <br/>\n            {line}\n          </div>\n        )\n      })\n    }\n  }\n\n  /**\n   * Method to export csv file containing participant data for this expt\n   */\n  getIndex() {\n    const exptName = this.props.match.params.exptName;\n    if (!this.props.experiments.length == 0) {\n      const thisExpt = \n      this.props.experiments\n        .filter(item => item[\"exptName\"] == this.props.match.params.exptName)[0]\n      const index = thisExpt[\"index\"];\n\n      let str = \"\"\n      const objKeys = Object.keys(index);\n      objKeys.map(key => {\n        const line = key.toString() + \": \" + index[key].toString() + \"\\n\"\n        str += line;\n      });\n\n      const element = document.createElement(\"a\");\n      const file = new Blob([str], {type: 'text/plain'});\n      element.href = URL.createObjectURL(file);\n      element.download = exptName + \"Legend.txt\";\n      document.body.appendChild(element); \n      element.click();\n      console.log(file);\n    }\n  }\n\n  render() {\n    const username = this.props.match.params.username;\n    const studyName = this.props.match.params.studyName;\n    const exptName = this.props.match.params.exptName;\n    const studyLink = \"/\" + username + \"/\" + studyName;\n    const file_name = username + \"_\" + studyName + \"_\" + exptName + \"_data.csv\";\n    const arr = this.makeArr();\n    if (arr != null) {\n      console.log(arr);\n      return (\n        <div>\n          <h2>Experiment: {exptName}</h2>\n          Back to <p> </p>\n          <Link to={studyLink}>\n            {studyName}\n          </Link>\n          <br/>\n          <h4>Participants data: </h4> \n          <button>\n            <CSVLink data={arr} filename={file_name}>\n              Download Data as CSV\n            </CSVLink>\n          </button>\n          <br/><br/>\n          <button onClick={this.getIndex}>Download Legend</button><br/>\n          \n          <div>\n            {this.showJSONData()}\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <h2>Experiment: {this.props.match.params.exptName}</h2>\n          Back to <p> </p>\n          <Link to={studyLink}>\n            {studyName}\n          </Link>\n          <br/><br/>\n          It seems like there's no participant data yet...\n        </div>\n      )\n    }\n  }\n}\n\nPartExptData.propTypes = {\n  // Proptype.type, the type here must match initialState of reducer\n  getColData: PropTypes.func.isRequired,\n  colData: PropTypes.array.isRequired,\n\n  getStudyInfo: PropTypes.array.isRequired,\n  experiments: PropTypes.array.isRequired,\n\n  auth: PropTypes.object.isRequired\n};\n\n// interaction between reducer and store (state), connect to props \n// for components to use\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  colData: state.dataFlow.colData,\n  experiments: state.dataFlow.studyInfo\n});\n\nexport default connect(\n  mapStateToProps,\n  { getColData, getStudyInfo }\n)(PartExptData);","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, BrowserRouter, HashRouter } from \"react-router-dom\";\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport TabList from './components/TabList/TabList';\n\nimport NavBar from './components/layout/NavBar';\nimport Landing from './components/layout/Landing';\nimport HomePage from './components/layout/HomePage';\n\nimport Register from './components/auth/Register';\nimport Login from './components/auth/Login'\n\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport ConfigStudy from './components/Study/ConfigStudy';\nimport ExptConfigs from './components/Study/ExptConfigs';\nimport PartStudyData from './components/Study/PartStudyData';\nimport PartExptData from './components/Study/PartExptData';\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n  // Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HashRouter basename=\"/survey-builder/\">\n        <div className=\"App\">\n          < NavBar />\n          <br/>\n          < Landing />\n          < Route exact path=\"/\" component={HomePage} />\n          < Route exact path=\"/register\" component={Register} />\n          < Route exact path=\"/login\" component={Login} />\n          <Switch>\n            <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n            <PrivateRoute exact path=\"/:username/:studyName\"\n              component={ConfigStudy} />\n            <PrivateRoute exact path=\"/:username/:studyName/exptBuilder\"\n              component={TabList} />\n            <PrivateRoute exact path=\"/:username/:studyName/:exptName/configs\"\n              component={ExptConfigs}/>\n            <PrivateRoute exact path=\"/:username/:studyName/participantsStudyData\"\n              component={PartStudyData}/>\n            <PrivateRoute exact path=\"/:username/:studyName/:exptName/participantsExptData\"\n              component={PartExptData}/>\n          </Switch>\n        </div>\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sameSquare.8c0ac2fb.png\";","module.exports = __webpack_public_path__ + \"static/media/rlyDiff.06e96a79.png\";","module.exports = __webpack_public_path__ + \"static/media/bigSmall.29f3b573.png\";"],"sourceRoot":""}