{"version":3,"sources":["components/private-route/PrivateRoute.js","utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/dataReducers.js","reducers/index.js","store.js","components/TabBuilder/TabBuilder.jsx","components/SliderTab/SliderTab.jsx","components/TabList/TabList.jsx","components/layout/NavBar.js","components/layout/Landing.js","components/layout/HomePage.js","components/auth/Register.js","components/auth/Login.js","actions/dataActions.js","components/dashboard/Dashboard.js","components/Study/ConfigStudy.js","components/Study/ExptConfigs.js","components/Study/PartData.js","App.js","serviceWorker.js","index.js"],"names":["connect","state","auth","Component","component","rest","render","props","isAuthenticated","to","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","user","loading","studyName","dbInfo","studyInfo","partData","combineReducers","action","errors","dataFlow","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","TabBuilder","selectRef","React","createRef","className","name","id","ref","this","value","onClick","build","current","SliderTab","sliderRef","outputRef","qRef","minRef","maxRef","min","max","checked","handleChange","bind","delete","count","getCount","q","onInput","defaultValue","TabList","builderFunction","tabDefine","arr","children","push","tab","key","toString","curOutput","output","newCount","setState","complete","deleted","exptName","myRef","submitRef","nameRef","outputCreate","checkOutput","onChange","e","target","pos","newVal","newDelete","obj","int","elem","lowNum","isNaN","highNum","parseInt","filter","item","indexOf","map","validName","length","finalObj","userID","Date","username","match","params","put","then","res","console","log","response","alert","window","location","reload","catch","error","studyLink","method","dataFlowDBInfo","Navbar","userIsLoggedIn","Landing","HomePage","Register","onSubmit","preventDefault","newUser","password","password2","registerUser","history","nextProps","noValidate","classnames","invalid","userExists","userData","post","err","data","withRouter","Login","loginUser","userNotFound","pwdIncorrect","class","setItem","jwt_decode","getStudyInfo","which_database","which_study","get","experiments","Dashboard","onLogoutClick","onAddStudy","getDBInfo","Object","keys","includes","link","addStudyName","getStudyNames","study_name","dataToPost","entry","ConfigStudy","deployExpts","exptNames","forEach","expt_name","createExptCol","expt","exptDataLink","partDataLink","exptBuilderLink","getExptNames","col_name","ExptConfigs","thisExpt","exptObj","find","info","JSON","stringify","showExptData","colName","getPartData","showPartData","jwtToken","currentTime","now","exp","href","App","basename","NavBar","exact","path","PartData","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f47bf0c7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n        auth.isAuthenticated === true ? (\r\n            <Component {...props} />\r\n        ) : (\r\n            <Redirect to=\"/login\" />\r\n        )}\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","// this will delete the Authorization header for axios requests \r\n// if the user is already logged in \r\n\r\nimport axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    } else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;","import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING\r\n} from \"./types\";\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n    axios\r\n        // set up proxy in package.json later\r\n        .post(\"https://test-api-615.herokuapp.com/api/register\", userData)\r\n        .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n        .catch(err =>\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n    axios\r\n        // set up proxy in package.json later\r\n        .post(\"https://test-api-615.herokuapp.com/api/login\", userData)\r\n        .then(res => {\r\n        // Save to localStorage\r\n        // Set token to localStorage\r\n        const { token } = res.data;\r\n        localStorage.setItem(\"jwtToken\", token);\r\n        // Set token to Auth header\r\n        setAuthToken(token);\r\n        // Decode token to get user data\r\n        const decoded = jwt_decode(token);\r\n        // Set current user\r\n        dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch(err =>\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded\r\n    };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n    // Remove token from local storage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    // Remove auth header for future requests\r\n    setAuthToken(false);\r\n    // Set current user to empty object {} which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n};","// types are how actions communicate with reducers\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n\r\nexport const ADD_STUDY_NAME = \"ADD_STUDY_NAME\";\r\nexport const GET_DB_INFO = \"GET_DB_INFO\";\r\nexport const GET_STUDY_INFO = \"GET_STUDY_INFO\";\r\nexport const GET_PART_DATA = \"GET_PART_DATA\";","import {\r\n    SET_CURRENT_USER,\r\n    USER_LOADING\r\n  } from \"../actions/types\";\r\n\r\nconst isEmpty = require(\"is-empty\"); \r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isEmpty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default: return state;\r\n    }\r\n}","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS: return action.payload;\r\n        default: return state;\r\n    }\r\n}","import { \r\n    ADD_STUDY_NAME,\r\n    GET_DB_INFO,\r\n    GET_STUDY_INFO,\r\n    GET_PART_DATA\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    studyName: '',\r\n    dbInfo: [],\r\n    studyInfo: [],\r\n    partData: []\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_STUDY_NAME:\r\n            return {\r\n                ...state,\r\n                studyName: action.payload\r\n            };\r\n        case GET_DB_INFO:\r\n            return {\r\n                ...state,\r\n                dbInfo: action.payload\r\n            };\r\n        case GET_STUDY_INFO:\r\n            return {\r\n                ...state,\r\n                studyInfo: action.payload\r\n            };\r\n        case GET_PART_DATA:\r\n            return {\r\n                ...state,\r\n                partData: action.payload\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducers\";\r\nimport errorReducer from \"./errorReducers\";\r\nimport dataReducer from \"./dataReducers\";\r\n\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n    dataFlow: dataReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware)\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react';\r\n\r\nclass TabBuilder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.selectRef = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"unit\">\r\n                <span>Choose what element to add next</span><br />\r\n                <select name=\"tabType\" id=\"tabType\" ref={this.selectRef}>\r\n                    <option value=\"slider\">Slider</option>\r\n                </select>\r\n                <button onClick={() => this.props.build(this.selectRef.current.value)}>+</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TabBuilder;","import React, { Component } from 'react';\r\nimport './SliderTab.css';\r\n\r\nclass SliderTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.sliderRef = React.createRef();\r\n        this.outputRef = React.createRef();\r\n        this.qRef = React.createRef();\r\n        this.minRef = React.createRef();\r\n        this.maxRef = React.createRef();\r\n        this.state = {min : 1, max : 100}\r\n\r\n        // console.log(this.props);\r\n\r\n        this.state = {\r\n            checked : false\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    delete(){\r\n        this.props.delete(this.props.count);\r\n    }\r\n\r\n    getCount() {\r\n        this.props.getCount(this.props.count);\r\n    }\r\n\r\n    handleChange(type, q, count) {\r\n        // if (this.qRef.current.value.length === 0 || this.minRef.current.value.length === 0 || this.maxRef.current.value.length === 0 || isNaN(this.minRef.current.value) || isNaN(this.maxRef.current.value)) {\r\n        //     this.setState({checked : false});\r\n        // }\r\n        // else {\r\n        //     this.setState({checked : true});\r\n        // }\r\n        // console.log(this.qRef.current.value.length === 0);\r\n        // console.log(this.minRef.current.value.length === 0);\r\n        // console.log(this.maxRef.current.value.length === 0);\r\n        // console.log(isNaN(this.minRef.current.value));\r\n        // console.log(isNaN(this.maxRef.current.value));\r\n        // console.log(this.state.checked);\r\n        this.props.handleChange(type, q, count);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // var slider = this.sliderRef.current;\r\n        // var output = this.outputRef.current;\r\n        // output.innerHTML = slider.value;\r\n\r\n        // slider.oninput = function () {\r\n        //     output.innerHTML = this.value;\r\n        // }\r\n        // var minNode = this.minRef.current;\r\n        // var maxNode = this.maxRef.current;\r\n\r\n        // minNode.oninput = function () {\r\n        //     this.props.handleChange(\"lowRange\", minNode.value);\r\n        // }\r\n\r\n        // maxNode.oninput = function () {\r\n        //     this.props.handleChange(\"highRange\", maxNode.value);\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <form className=\"unit\">\r\n                <p>Drag the slider and click confirm</p>\r\n                <p>Question: <input onInput={() => this.handleChange(\"Question\", this.qRef.current.value, this.props.count)} ref={this.qRef} type=\"text\" /></p>\r\n                <input type=\"range\" min=\"1\" max=\"100\" defaultValue=\"50\" className=\"slider\" name=\"myRange\" id=\"myRange\" ref={this.sliderRef} />\r\n                <p>Minimum: <input onInput={() => this.handleChange(\"lowRange\", this.minRef.current.value, this.props.count)} ref={this.minRef} type=\"text\" /></p>\r\n                {/* <p>Value: <span id=\"slider1\" ref={this.outputRef}></span></p> */}\r\n                <p>Maximum: <input onInput={() => this.handleChange(\"highRange\", this.maxRef.current.value, this.props.count)} ref={this.maxRef} type=\"text\" /></p>\r\n                <p onClick={this.delete.bind(this)}>Delete</p>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SliderTab;","import React, { Component } from 'react';\r\nimport './TabList.css';\r\nimport '../TabBuilder/TabBuilder'\r\nimport TabBuilder from '../TabBuilder/TabBuilder';\r\nimport SliderTab from '../SliderTab/SliderTab';\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst axios = require('axios');\r\n\r\nclass TabList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            children : [],\r\n            count : 0,\r\n            output : {},\r\n            deleted : [],\r\n            complete : false,\r\n            exptName : ''\r\n        }\r\n        this.myRef = React.createRef();\r\n        this.submitRef = React.createRef();\r\n        this.nameRef = React.createRef();\r\n\r\n        this.builderFunction = this.builderFunction.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n        this.getCount = this.getCount.bind(this);\r\n        this.outputCreate = this.outputCreate.bind(this);\r\n        this.checkOutput = this.checkOutput.bind(this);\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    builderFunction = (tabDefine) => {\r\n        var arr = this.state.children;\r\n\r\n        switch (tabDefine) {\r\n            case \"slider\":\r\n            arr.push({id : this.state.count, tab : <SliderTab getCount={this.getCount} delete={this.delete} count={this.state.count} handleChange={this.handleChange} key={this.state.count.toString()} />})\r\n                break;\r\n            default:\r\n                arr = <div>Unknown Element</div>\r\n        }\r\n\r\n        var curOutput = this.state.output;\r\n        curOutput[this.state.count.toString()] = {\"Type\" : tabDefine};\r\n        var newCount = this.state.count + 1;\r\n        this.setState({children : arr, count : newCount, output : curOutput, complete : false});\r\n    }\r\n\r\n    handleChange(pos, newVal, count) {\r\n        var curOutput = this.state.output;\r\n        curOutput[count.toString()][pos] = newVal;\r\n        this.setState({output : curOutput});\r\n    }\r\n\r\n    delete(id){\r\n        var newDelete = this.state.deleted;\r\n        newDelete.push(id);\r\n        this.setState({ deleted: newDelete });\r\n    }\r\n\r\n    getCount(count) {\r\n        return count;\r\n    }\r\n\r\n    checkOutput(obj) {\r\n        var int = 0;\r\n        var complete = true;\r\n        while ((int.toString()) in obj) {\r\n            var elem = obj[int.toString()];\r\n            switch (elem[\"Type\"]) {\r\n                case \"slider\":\r\n                    var lowIs = \"lowRange\" in elem;\r\n                    var highIs = \"highRange\" in elem;\r\n                    var qIs = \"Question\" in elem;\r\n                    if (lowIs && highIs && qIs){\r\n                        var lowNum = !isNaN(elem[\"lowRange\"]);\r\n                        var highNum = !isNaN(elem[\"highRange\"]);\r\n                        var highLow = parseInt(elem[\"highRange\"]) > parseInt(elem[\"lowRange\"]);\r\n                        if (highLow && lowNum && highNum) {\r\n                            complete = complete && true;\r\n                        }\r\n                        else {\r\n                            complete = false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        complete = false;\r\n                    }\r\n                    break;\r\n                default:\r\n                    complete = false;\r\n            }\r\n\r\n            int++;\r\n        }\r\n        return complete;\r\n    }\r\n\r\n    outputCreate() {\r\n        var obj = {};\r\n        this.state.children\r\n        .filter(item => this.state.deleted.indexOf(item.id) === -1)\r\n        .map((item) => {obj[item.id.toString()] = this.state.output[item.id.toString()]});\r\n        var validName = this.nameRef.current.value.length > 0;\r\n        if (!(0 in obj) || !this.checkOutput(obj) || !validName) {\r\n            alert(\"You have not filled out all fields, or have entered an invalid value!\");\r\n        }\r\n        else {\r\n            var finalObj = {userID : new Date().toString()};\r\n            finalObj[\"exptName\"] = this.nameRef.current.value;\r\n            var int = 0;\r\n            while (int < this.state.count) {\r\n                if ((int.toString()) in obj) {\r\n                    finalObj[\"q\" + int.toString()] = obj[int.toString()];\r\n                }\r\n                int++;\r\n            }\r\n            finalObj[\"count\"] = int;\r\n            finalObj[\"type\"] = \"experiment\";\r\n\r\n            const username = this.props.auth.user.username;\r\n            const expt_name = this.state.exptName;\r\n            const studyName = this.props.match.params.studyName;\r\n\r\n            // use the API to add a json object into an array under the study\r\n            axios.put(\r\n                'https://test-api-615.herokuapp.com/api/feedback/' + username + \r\n                    '/info/studyName-' + studyName + '/experiments',\r\n                finalObj\r\n            )\r\n            .then(res => {\r\n                console.log(res)\r\n            })\r\n            .then(function (response) {\r\n                alert(\"Your survey has been successfully created\");\r\n                console.log(response);\r\n                window.location.reload(false);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const username = this.props.match.params.username;\r\n        const studyName = this.props.match.params.studyName;\r\n        const studyLink = \"/\" + username + \"/\" + studyName;\r\n        return(\r\n            <div className=\"list\" ref={this.myRef}>\r\n                Back to <p> </p>\r\n                <Link to={studyLink}>\r\n                    {studyName}\r\n                </Link>\r\n                <form action=\"/submit\" method=\"POST\" className=\"unit\">\r\n                    <p>Enter a name for this experiment</p>\r\n                    <input ref={this.nameRef} \r\n                        value={this.state.exptName} \r\n                        onChange={this.onChange}\r\n                        type=\"text\" id=\"userid\" name=\"exptName\" /><br /><br />\r\n                </form>\r\n                {\r\n                    this.state.children\r\n                    .filter(item => this.state.deleted.indexOf(item.id) === -1)\r\n                    .map((item) => {\r\n                        return item.tab;\r\n                    })\r\n                }\r\n                <TabBuilder build={this.builderFunction} />\r\n                <div className=\"extraPad\">\r\n                    <button onClick={this.outputCreate} ref={this.submitRef} type=\"submit\" value=\"Submit\" className=\"btn\">Submit</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTabList.propTypes = {\r\n    auth: PropTypes.object.isRequired,\r\n    dataFlowDBInfo: PropTypes.array.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    dataFlowDBInfo: state.dataFlow.dbInfo\r\n});\r\n\r\n// export default TabList;\r\nexport default connect(mapStateToProps)(TabList);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    const userIsLoggedIn = this.props.auth.isAuthenticated;\r\n    return (\r\n      <div className=\"navbar-fixed\">\r\n        <nav className=\"z-depth-0\">\r\n          <div className=\"nav-wrapper white\">\r\n            <Link to=\"/\">\r\n              Home\r\n            </Link>\r\n            <br/>\r\n            {userIsLoggedIn ? '' : \r\n              <Link to=\"/register\">Register</Link>}\r\n            <br/>\r\n            {userIsLoggedIn ? \r\n              <Link to=\"/dashboard\"> Dashboard </Link> \r\n              : \r\n              <Link to=\"/login\">Login</Link>}\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// export default Navbar;\r\nNavbar.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Landing extends Component {\r\n  componentWillMount() {\r\n    console.log(!this.props.auth)\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.auth.isAuthenticated) {\r\n      return (\r\n        <div className=\"container\">\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"container\">\r\n          Scientist: <b>{this.props.auth.user.username}</b>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nLanding.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {}\r\n)(Landing);\r\n\r\n// export default Landing;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n      return(\r\n        <div className=\"container\">\r\n            <h1>\r\n            Welcome to Psych Researcher App!\r\n            </h1>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nHomePage.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {}\r\n)(HomePage);\r\n\r\n// export default Landing;","import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Register extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            password2: \"\",\r\n            errors: {}\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        // If logged in and user navigates to Register page,\r\n        // should redirect them to dashboard\r\n        if (this.props.auth.isAuthenticated) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({\r\n                errors: nextProps.errors\r\n            });\r\n        };\r\n    };\r\n\r\n    // <form> element will have a corresponding onChange event that sends value\r\n    // to this.state. Works similarly to html form and flask request. \r\n    onChange = e => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    };\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        const newUser = {\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n            password2: this.state.password2\r\n        };\r\n        console.log(newUser);\r\n        this.props.registerUser(newUser, this.props.history); \r\n    };\r\n    render() {\r\n        const errors = this.state.errors;\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Register below</h1>\r\n                <p className=\"grey-text text-darken-1\">\r\n                    Already have an account? \r\n                    <Link to=\"/login\">Log in</Link>\r\n                </p>\r\n                <form noValidate onSubmit={this.onSubmit}>\r\n                    Username:\r\n                    <input \r\n                        onChange={this.onChange} \r\n                        value={this.state.username} \r\n                        error={errors.username} \r\n                        id=\"username\" \r\n                        type=\"text\"\r\n                        className={classnames(\"\", {\r\n                            // userExists comes from res json message in API\r\n                            invalid: errors.userExists\r\n                        })}/>\r\n                    <span className=\"red-text\">{errors.userExists}</span>\r\n                    <br/>\r\n                    <br/>\r\n                    Password: \r\n                    <input \r\n                        onChange={this.onChange} \r\n                        value={this.state.password} \r\n                        error={errors.password} \r\n                        id=\"password\" \r\n                        type=\"password\"\r\n                        className={classnames(\"\", {\r\n                            invalid: errors.password\r\n                        })}/>\r\n                    <span className=\"red-text\">{errors.password}</span>\r\n                    <br/>\r\n                    <br/>\r\n                    Confirm Password: \r\n                    <input \r\n                        onChange={this.onChange} \r\n                        value={this.state.password2} \r\n                        error={errors.password2} \r\n                        id=\"password2\" \r\n                        type=\"password\"\r\n                        className={classnames(\"\", {\r\n                            invalid: errors.password2\r\n                        })}/>\r\n                    <span className=\"red-text\">{errors.password2}</span>\r\n                    <br/>\r\n                    <br/>\r\n                    <button type=\"submit\" className=\"btn\">\r\n                        Register\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n// export default Register;\r\n\r\nRegister.propTypes = {\r\n    registerUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\n// map state from redux props to use inside components\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n});\r\n\r\n// linking redux to Register component\r\n// withRouter makes it easy to redirect within a component\r\nexport default connect(\r\n    mapStateToProps,\r\n    { registerUser }\r\n)(withRouter(Register));","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            errors: {}\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        // If logged in and user navigates to Register page,\r\n        // should redirect them to dashboard\r\n        if (this.props.auth.isAuthenticated) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.auth.isAuthenticated) {\r\n            // push user to dashboard when they login\r\n            this.props.history.push(\"/dashboard\"); \r\n        }\r\n        if (nextProps.errors) {\r\n            this.setState({\r\n                errors: nextProps.errors\r\n            });\r\n        }\r\n    }\r\n\r\n    // <form> element will have a corresponding onChange event that sends value\r\n    // to this.state. Works similarly to html form post and request. \r\n    onChange = e => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    };\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        const userData = {\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        };\r\n        console.log(userData);\r\n        // we are redirecting wthin a component, so we don't need to\r\n        // pass in this.props.history\r\n        this.props.loginUser(userData);\r\n    };\r\n    render() {\r\n        const errors = this.state.errors;\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Log in</h1> \r\n                <form noValidate onSubmit={this.onSubmit}>\r\n                    Username:\r\n                    <input \r\n                        onChange={this.onChange} \r\n                        value={this.state.username} \r\n                        error={errors.username} \r\n                        id=\"username\" \r\n                        type=\"text\"\r\n                        className={classnames(\"\", {\r\n                            invalid: errors.userNotFound\r\n                            // || USERNAME NOT FOUND\r\n                        })}/>\r\n                    <span className=\"red-text\">{errors.userNotFound}</span>\r\n                    <br/>\r\n                    <br/>\r\n                    Password: \r\n                    <input \r\n                        onChange={this.onChange} \r\n                        value={this.state.password} \r\n                        error={errors.password} \r\n                        id=\"password\" \r\n                        type=\"password\"\r\n                        className={classnames(\"\", {\r\n                            invalid: errors.pwdIncorrect\r\n                        })}/>\r\n                    <span className=\"red-text\">{errors.pwdIncorrect}</span>\r\n                    <br/>\r\n                    <br/>\r\n                    <input \r\n                        type=\"submit\" \r\n                        value=\"Log in\" \r\n                        class=\"btn\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n// export default Login;\r\n\r\nLogin.propTypes = {\r\n    loginUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n });\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { loginUser }\r\n)(Login);","import axios from \"axios\";\r\nimport { \r\n    ADD_STUDY_NAME,\r\n    GET_DB_INFO,\r\n    GET_STUDY_INFO,\r\n    GET_PART_DATA\r\n} from \"./types\";\r\n\r\nexport const addStudyName = (which_database, study_name) => dispatch => {\r\n    const dataToPost = {\r\n        studyName: study_name,\r\n        experiments: []\r\n    };\r\n    // note that the goal of the following step is to show researchers \r\n    // the name of the study they have just created. This is totally doable\r\n    // via a simple this.state written in Dashboard. However, putting it here\r\n    // just makes things more organized and fits well with the rest of the \r\n    // redux structure I have used to create this demo\r\n    axios\r\n        .post('https://test-api-615.herokuapp.com/api/feedback/' + which_database + '/info',\r\n            dataToPost)\r\n        .then(entry => {\r\n            // console.log(entry);\r\n            dispatch({\r\n                type: ADD_STUDY_NAME,\r\n                payload: entry.data.studyName\r\n            })\r\n        })\r\n}\r\n\r\nexport const getDBInfo = (which_database) => dispatch => {\r\n    axios\r\n        .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database + '/info')\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_DB_INFO,\r\n                payload: res.data\r\n            })\r\n        })\r\n}\r\n\r\nexport const getStudyInfo = (which_database, which_study) => dispatch => {\r\n    axios\r\n        .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database + \r\n            '/info/studyName-' + which_study)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_STUDY_INFO,\r\n                payload: res.data.experiments\r\n            })\r\n        })\r\n}\r\n\r\nexport const createExptCol = (which_database, col_name) => dispatch => {\r\n    axios\r\n        .post('https://test-api-615.herokuapp.com/api/' + which_database + \r\n            \"/createCol/\" + col_name)\r\n}\r\n\r\nexport const getPartData = (which_database, col_name) => dispatch => {\r\n    axios\r\n        .get('https://test-api-615.herokuapp.com/api/feedback/' + which_database + \r\n            \"/\" + col_name)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_PART_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n}","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { logoutUser } from \"../../actions/authActions\";\r\n\r\nimport {\r\n    addStudyName,\r\n    getDBInfo\r\n} from \"../../actions/dataActions\";\r\n\r\nimport './Dashboard.css';\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            studyName: ''\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onAddStudy = this.onAddStudy.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    // load experiment names when the page loads\r\n    componentWillMount() {\r\n        const username = this.props.auth.user.username;\r\n        this.props.getDBInfo(username); // dbInfo will be in the store now\r\n    }\r\n\r\n    getStudyNames() {\r\n        // TODO. Filter out study names. If an item doesn't have study names\r\n        // as a key, then don't do anything. (wrap everything inside an if)\r\n        const allInfo = this.props.dataFlowDBInfo;\r\n        return allInfo.map(item => {\r\n            const allKeys = Object.keys(item);\r\n            if (allKeys.includes(\"studyName\")) {\r\n                const username = this.props.auth.user.username;\r\n                const link = \"/\" + username + \"/\" + item.studyName;\r\n                return(\r\n                    <div className=\"container\">\r\n                        <p> \r\n                            {item.studyName} <p> </p>\r\n                            <Link to={link}>\r\n                                View\r\n                            </Link>\r\n                        </p>\r\n                    </div>\r\n                )\r\n            }\r\n        });\r\n    }\r\n\r\n    onAddStudy(e) {\r\n        const username = this.props.auth.user.username;\r\n        this.props.addStudyName(username, this.state.studyName);\r\n        // alert(\"Your study has been succesfully created.\");\r\n        window.location.reload(true);\r\n    };\r\n\r\n    onLogoutClick = e => {\r\n        e.preventDefault();\r\n        this.props.logoutUser();\r\n    };\r\n\r\n    render() {\r\n        const username = this.props.auth.user.username;\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.onAddStudy}>\r\n                    Enter a name for your study: <p>  </p>\r\n                    <input type=\"text\" name=\"studyName\" \r\n                        value={this.state.studyName} onChange={this.onChange}/>\r\n                    <input type=\"submit\" value=\"Add Study\"/>\r\n                </form>\r\n                \r\n                <form>\r\n                    <br/>\r\n                    {this.getStudyNames()}\r\n                    <br/>\r\n                </form>\r\n\r\n                <button\r\n                    onClick={this.onLogoutClick}\r\n                    className=\"btn\">\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nDashboard.propTypes = {\r\n    // Proptype.type, the type here must match initialState of reducer\r\n    logoutUser: PropTypes.func.isRequired,\r\n    addStudyName: PropTypes.func.isRequired,\r\n    getDBInfo: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    dataFlowDBInfo: PropTypes.array.isRequired\r\n};\r\n\r\n// interaction between reducer and store (state), connect to props \r\n// for components to use\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    dataFlowDBInfo: state.dataFlow.dbInfo\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { logoutUser, addStudyName, getDBInfo }\r\n)(Dashboard);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    getStudyInfo,\r\n    createExptCol\r\n} from \"../../actions/dataActions\"\r\n\r\nclass ConfigStudy extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n\r\n        this.deployExpts = this.deployExpts.bind(this);\r\n    }\r\n    // note: using params to get studyName is probably not good practice. \r\n    // figure out a better way to get info from previous page later, might\r\n    // use cookies? or does react have some way to pass states between pages?\r\n    componentWillMount() {\r\n        const username = this.props.auth.user.username;\r\n        const studyName = this.props.match.params.studyName;\r\n        this.props.getStudyInfo(username, studyName);\r\n    }\r\n\r\n    // for now deployment simply creates a collection for each experiment \r\n    // that would later store participants data\r\n    deployExpts(e) {\r\n        e.preventDefault();\r\n        // create a collection. Collection name: studyName - exptName \r\n        const username = this.props.auth.user.username;\r\n        const studyName = this.props.match.params.studyName;\r\n        const exptNames = this.props.experiments.map(item => item.exptName);\r\n        console.log(exptNames);\r\n        exptNames.forEach(expt_name => {\r\n            this.props.createExptCol(username, studyName + \"-\" + expt_name);\r\n        });\r\n        // the alert could include res data from API\r\n        alert(\"Successfully deployed your experiments\")\r\n    }\r\n\r\n    getExptNames() {\r\n        const username = this.props.match.params.username;\r\n        const studyName = this.props.match.params.studyName;\r\n        // check if the experiments are deployed \r\n        return this.props.experiments.map(expt => {\r\n            const exptName = expt.exptName;\r\n            const exptDataLink = \"/\" + username + \"/\" + studyName + \"/\" + \r\n                exptName + \"/configs\";\r\n            const partDataLink = \"/\" + username + \"/\" + studyName + \"/\" + \r\n                exptName + \"/participantsData\";\r\n            return (\r\n                <div className=\"container\">\r\n                    {expt.exptName} <p> </p>\r\n                    <Link to={exptDataLink}>\r\n                        Experiment Configs\r\n                    </Link> <p> </p>\r\n                    <Link to={partDataLink}>\r\n                        View Participants Data\r\n                    </Link>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    // an action to fetch userData from APi for componentWillMount\r\n    render () {\r\n        const username = this.props.match.params.username;\r\n        const studyName = this.props.match.params.studyName;\r\n        const exptBuilderLink = \"/\" + username + \"/\" + \r\n            studyName + \"/exptBuilder\"\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <br/>\r\n                <b>{this.props.match.params.studyName}</b>\r\n                <br/><br/>\r\n                <Link to={exptBuilderLink}>\r\n                    Build an Experiment\r\n                </Link>\r\n                <form onSubmit={this.deployExpts}>\r\n                    <br/>\r\n                    Your Experiments\r\n                    <br/><br/>\r\n                    {this.getExptNames()}\r\n                    <br/><br/>\r\n                    <input type=\"submit\" value=\"Deploy All Experiments\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nConfigStudy.propTypes = {\r\n    // Proptype.type, the type here must match initialState of reducer\r\n    getStudyInfo: PropTypes.func.isRequired,\r\n    createExptCol: PropTypes.func.isRequired,\r\n    experiments: PropTypes.array.isRequired,\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\n// interaction between reducer and store (state), connect to props \r\n// for components to use\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    experiments: state.dataFlow.studyInfo,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { getStudyInfo, createExptCol }\r\n)(ConfigStudy);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    getStudyInfo\r\n} from \"../../actions/dataActions\"\r\n\r\nclass ExptConfigs extends Component {\r\n    componentWillMount() {\r\n        const username = this.props.match.params.username;\r\n        const studyName = this.props.match.params.studyName;\r\n        this.props.getStudyInfo(username, studyName);\r\n    }\r\n\r\n    showExptData() {\r\n        const thisExpt = this.props.match.params.exptName;\r\n        const exptObj = \r\n            this.props.experiments.find(item => item.exptName == thisExpt);\r\n        const info = JSON.stringify(exptObj);\r\n        return (\r\n            <div>\r\n                <p>\r\n                    {info}\r\n                </p>\r\n            </div>\r\n        )\r\n        // return this.props.experiments.find(item => item.exptName == thisExpt);\r\n    }\r\n\r\n    // an action to fetch userData from APi for componentWillMount\r\n    render () {\r\n        return (\r\n            <div className=\"container\">\r\n                <br/>\r\n                <br/>\r\n                {this.showExptData()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nExptConfigs.propTypes = {\r\n    // Proptype.type, the type here must match initialState of reducer\r\n    getStudyInfo: PropTypes.func.isRequired,\r\n    experiments: PropTypes.array.isRequired,\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\n// interaction between reducer and store (state), connect to props \r\n// for components to use\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    experiments: state.dataFlow.studyInfo\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { getStudyInfo }\r\n)(ExptConfigs);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    getPartData\r\n} from \"../../actions/dataActions\"\r\n\r\nclass ExptConfigs extends Component {\r\n    componentWillMount() {\r\n        const username = this.props.match.params.username;\r\n        const studyName = this.props.match.params.studyName;\r\n        const exptName = this.props.match.params.exptName;\r\n        const colName = studyName + \"-\" + exptName;\r\n        this.props.getPartData(username, colName);\r\n    }\r\n\r\n    showPartData() {\r\n        const info = JSON.stringify(this.props.partData);\r\n        return (\r\n            <div className=\"container\">\r\n                {info}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // an action to fetch userData from APi for componentWillMount\r\n    render () {\r\n        return (\r\n            <div className=\"container\">\r\n                <br/>\r\n                {this.showPartData()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nExptConfigs.propTypes = {\r\n    // Proptype.type, the type here must match initialState of reducer\r\n    getPartData: PropTypes.func.isRequired,\r\n    partData: PropTypes.array.isRequired,\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\n// interaction between reducer and store (state), connect to props \r\n// for components to use\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    partData: state.dataFlow.partData\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { getPartData }\r\n)(ExptConfigs);","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch, BrowserRouter, HashRouter } from \"react-router-dom\";\r\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport TabList from './components/TabList/TabList';\r\nimport NavBar from './components/layout/NavBar';\r\nimport Landing from './components/layout/Landing';\r\nimport HomePage from './components/layout/HomePage';\r\n\r\nimport Register from './components/auth/Register';\r\nimport Login from './components/auth/Login'\r\n\r\nimport Dashboard from \"./components/dashboard/Dashboard\";\r\nimport ConfigStudy from './components/Study/ConfigStudy';\r\nimport ExptConfigs from './components/Study/ExptConfigs';\r\nimport PartData from './components/Study/PartData';\r\n\r\n// Check for token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n  // Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    // Logout user\r\n    store.dispatch(logoutUser());\r\n    // Redirect to login\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <HashRouter basename=\"/survey-builder/\">\r\n        <div className=\"App\">\r\n          < NavBar />\r\n          <br/>\r\n          < Landing />\r\n          < Route exact path=\"/\" component={HomePage} />\r\n          < Route exact path=\"/register\" component={Register} />\r\n          < Route exact path=\"/login\" component={Login} />\r\n          <Switch>\r\n                <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\r\n                <PrivateRoute exact path=\"/:expt/participantsData\"\r\n                    component={PartData} />\r\n                <PrivateRoute exact path=\"/:username/:studyName\"\r\n                    component={ConfigStudy} />\r\n                <PrivateRoute exact path=\"/:username/:studyName/exptBuilder\"\r\n                    component={TabList} />\r\n                <PrivateRoute exact path=\"/:username/:studyName/:exptName/configs\"\r\n                    component={ExptConfigs}/>\r\n                <PrivateRoute exact path=\"/:username/:studyName/:exptName/participantsData\"\r\n                    component={PartData}/>\r\n          </Switch>\r\n        </div>\r\n      </HashRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}